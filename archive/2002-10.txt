From kaa@pax.priv.no Mon, 7 Oct 2002 13:12:29 +0200
Date: Mon, 7 Oct 2002 13:12:29 +0200
From: KAA kaa@pax.priv.no
Subject: [concurrency-interest] Thread safe Set

This is a multi-part message in MIME format.

------=_NextPartTM-000-aa841335-5e9f-4636-91c4-341bb8216a9d
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0046_01C26E03.307386F0"

------=_NextPart_000_0046_01C26E03.307386F0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Since you have provided the ConcurrentHashMap there is a thing or two =
that puzzels me:

1) there is no ConcurrentHashSet

2) From what you have provided there seem to be some problems providing =
both concurrency AND (naturally) ordered index-sequential structures, is =
that so? Is the only solution to draw data from for instance =
ConcurrentHashMap  and then sort/order the resultset.

Kolbj=F8rn

------=_NextPart_000_0046_01C26E03.307386F0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"MSHTML 5.50.4522.1800" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#ffffff>
<DIV><FONT face=3DArial size=3D2>Since you have provided the =
ConcurrentHashMap there=20
is a thing or two that puzzels me:</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>1) there is no =
ConcurrentHashSet</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>2) From what you have provided there =
seem to be=20
some problems providing both concurrency AND (naturally) ordered=20
index-sequential structures, is that so? Is the only solution to draw =
data from=20
for instance ConcurrentHashMap&nbsp; and then sort/order the=20
resultset.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Kolbj=F8rn</FONT></DIV></BODY></HTML>

------=_NextPart_000_0046_01C26E03.307386F0--


------=_NextPartTM-000-aa841335-5e9f-4636-91c4-341bb8216a9d--






From dl@cs.oswego.edu Mon, 7 Oct 2002 07:41:04 -0400
Date: Mon, 7 Oct 2002 07:41:04 -0400
From: Doug Lea dl@cs.oswego.edu
Subject: [concurrency-interest] Thread safe Set

> 1) there is no ConcurrentHashSet

You can use a ConcurrentHashMap as a Set by always puttin, say
java.lang.Boolean.TRUE as the value for each key.  Several of the
java.util Sets do something equivalent internally.  I don't know of a
compelling reason to provide such a wrapper here though. On the other
hand, if we can provide a substantially better concurrent hash-based
set implementation that doesn't just wrap ConcurrentHashMap, we may
supply one.

> 
> 2) From what you have provided there seem to be some problems
>    providing both concurrency AND (naturally) ordered index-sequential
>    structures, is that so? Is the only solution to draw data from for
>    instance ConcurrentHashMap and then sort/order the resultset.

Yes. For the moment you are better off either sorting elements only
when you need to, or using a java.util.Colelctions synchronization
wrapper around a TreeMap.

We are however continuing to investigate and develop additional data
structures to put in j.u.c. At least one addition (although not for
ordered sets) will be put into to APIs soon.  Stay tuned.

-Doug




From sparmar@necam.com Mon, 7 Oct 2002 07:20:49 -0500
Date: Mon, 7 Oct 2002 07:20:49 -0500
From: Sumeet Parmar sparmar@necam.com
Subject: [concurrency-interest] offtopic: communicating design choices

Hi,

I am sure often enough everyone has dealt with communicating design choices to 
fellow programmers. Last week I had to excercise extreme patience as I 
explained why dynamic threads are not a good idea. The programmer wanted to 
start a thread on demand and let the garbage collector take care of it, his 
prior experience being threads under Windows/MFC/VC++. I elaborated on my 
misgivings on the subject to great details, seguing elements from 
util.concurrent, but to no avail. After discussions, the person concluded 
Java Threads are a 'huge step backwards'.

I have come to realisation over the years that people want instant 
gratification i.e. clever tricks rather than eliminating problems with 
design. Also I prefer the team believes in the design otherwise quality will 
suffer eventually and yet I don't want to issue fatwas which I think will 
deter some simple mistakes but leave developers confused over what they are 
really supposed to do.

So, my question is how is one to address developers who aren't aware of 
concurrency issues/idioms? Is this a technical issue or within the realm of 
communication skills? Frameworks over composition of loose elements?

I'll appreciate any insights on this one. Thanks for your time.

-Sumeet Parmar







From crahen@cse.Buffalo.EDU Mon, 7 Oct 2002 13:04:25 -0400 (EDT)
Date: Mon, 7 Oct 2002 13:04:25 -0400 (EDT)
From: Eric D Crahen crahen@cse.Buffalo.EDU
Subject: [concurrency-interest] offtopic: communicating design choices

On Mon, 7 Oct 2002, Sumeet Parmar wrote:

> I have come to realisation over the years that people want instant
> gratification i.e. clever tricks rather than eliminating problems with
> design. Also I prefer the team believes in the design otherwise quality will
> suffer eventually and yet I don't want to issue fatwas which I think will
> deter some simple mistakes but leave developers confused over what they are
> really supposed to do.

Aren't these two issues in conflict? I would give more wieght to a robust
design first. You won't rule out the possibility of using clever tricks;
and by using a decent design you'll have a guideline that can help you
find a suitable place to put those tricks. If you let the use of clever
tricks dictate the overall form of your project, then you'll compound
any problems you are having now when it comes to people being confused
about what something does and how they are supposed to change it.

> So, my question is how is one to address developers who aren't aware of
> concurrency issues/idioms? Is this a technical issue or within the realm of
> communication skills?

I would say that it's a mixture of these things. Part of is answering
questions about "How does this work in Java?" and part of it is
giving that effectively to someone.

> Frameworks over composition of loose elements?

An understanding of the induvidual parts and concepts is definently
a very important issue; but an understanding of how to use them together
is just as important. I would say even more important. Without that you
could be stuck trying to fit a square pegs into a round holes.
Your framework would essentially be a composition of loose elements, but
it would a (hopefully) thought out composition with a clear purpose as
opposed to a composition of things that is used because it just works.

To me, this sounds like a job for design patterns. For concurrency, there
are alot of them that you could apply to Java. Doug Schmitt's 2nd book
(I don't recall the title right now, and I'm on a device with limited
capability so I can easily look it up) has alot of them that are useful.
You can find some others on the web. I wrote one for PLoP this year about
Executors. That particular one would let you factor out the details of
where and when your Threads are created and let you focus on the tasks you
you want performed by a set threads.

Hope that helps,

- Eric
http://www.code-foo.com/





