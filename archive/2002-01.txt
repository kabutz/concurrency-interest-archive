From TEREKHOV@de.ibm.com Wed, 30 Jan 2002 18:59:24 +0100
Date: Wed, 30 Jan 2002 18:59:24 +0100
From: Alexander Terekhov TEREKHOV@de.ibm.com
Subject: Interface Condition - bind/unbind ?!

G'Day,

Are there any reasons why there is no interface to bind/unbind
a condition to(another)/from a corresponding lock object?

http://groups.google.com/groups?as_umsgid=slrn9ehssd.hq.kaz%40cafe.net

"For example, a condition variable could be placed in some request
structure.
 The request structure is enqueued somewhere in a service provider, which
 contains a mutex. The mutex and condition are used together to do the
condition
 wait for the request completion.  After the request completes, the same
request
 object is then reused, this time with a completely different service
provider
 with a different mutex.

 In this scenario, the wait and signal operation are always with respect
 to the same mutex. It never happens that the request is signaled in
 the context of one service provider, while enqueued in another.
 Perhaps more to the point, in that scenario, you never have two or more
waiting
 threads which use the condition with a different mutex at the same time!

 Your API proposal would rule out this usage; or, at least, the condition
would
 have to be reinitialized each time to bind to the new mutex, which is
 overhead."

regards,
alexander.






From dl@cs.oswego.edu Wed, 30 Jan 2002 19:48:23 -0500
Date: Wed, 30 Jan 2002 19:48:23 -0500
From: Doug Lea dl@cs.oswego.edu
Subject: slides

Dear concurrency-interest subscribers,

Even though JSR-166 is just getting underway, I foolishly volunteered
to give a talk about it a few days ago at Sun Labs East. 4up slides
from the talk are at
  http://gee.cs.oswego.edu/dl/concurrency-interest/jsr166-28jan02-4up.pdf
These are similar to but a little bit better structured than the
aims.html web page. Comments, suggestions, questions etc would be welcome!

-- 
Doug Lea, Computer Science Department, SUNY Oswego, Oswego, NY 13126 USA
dl@cs.oswego.edu 315-312-2688 FAX:315-312-5424 http://gee.cs.oswego.edu/  




From dl@cs.oswego.edu Wed, 30 Jan 2002 20:05:36 -0500
Date: Wed, 30 Jan 2002 20:05:36 -0500
From: Doug Lea dl@cs.oswego.edu
Subject: Interface Condition - bind/unbind ?!

Hi Alexander; I'm happy to see that you subscribed to this list!

> Are there any reasons why there is no interface to bind/unbind
> a condition to(another)/from a corresponding lock object?
> 
> http://groups.google.com/groups?as_umsgid=slrn9ehssd.hq.kaz%40cafe.net

The supplied implementations of Condition won't be rebindable.
The reasons are similar to the ones stated by some people in that
newsgroup thread: It reduces the likelihood of error and is more
efficient for the vastly most common case.

However, it is not hard to create your own Condition implementation
class that is rebindable. (Condition is an interface.)
You can write something like:

class RebindableCondition implements Condition {
  private Condition delegate;

  RebindableCondition(Object l) {
    delegate = Locks.createConditionFor(l);
  }

  void await() ... { delegate.await(); }
  // etc

  void rebind(Object l) {
    delegate = Locks.createConditionFor(l);
  }
}

Where I left out the necessary internal synchronization, and the error
checking that would be needed, both of which would take some thought.
Creating a new Condition for each rebind is more expensive than
resetting a field, but all in all, I think this is the right tradeoff.
It IS a rare (and rarely recomendable) usage, and even here, rebinds are
infrequent, so this strategy ought to be competitive.

Do you agree?

-- 
Doug Lea, Computer Science Department, SUNY Oswego, Oswego, NY 13126 USA
dl@cs.oswego.edu 315-312-2688 FAX:315-312-5424 http://gee.cs.oswego.edu/  




From TEREKHOV@de.ibm.com Thu, 31 Jan 2002 19:46:54 +0100
Date: Thu, 31 Jan 2002 19:46:54 +0100
From: Alexander Terekhov TEREKHOV@de.ibm.com
Subject: Interface Condition - bind/unbind ?!


> Hi Alexander; I'm happy to see that you subscribed to this list!

Hi Doug; that's a GREAT/MANDATORY place to be for
anyone occasionally ;-) doing *concurrent* Java
(== OO) programming! You and others do a terrific
job with the 133/166 JSRs!! I only wish that such
amount of deep thinking would some day be applied
to PTHREADS/C++: OO/type-safe/less-error-prone-than-C/
easy C++ concurrent programming. BTW, that is actually
my second/"hidden" agenda to be here ;-) partly I
just want to steal ideas, which would help me in
my private/hobby efforts with respect to "MY
PTHREADS++" - a C++ wrapper library; the beginning
(rather chaotic stuff) is here:

http://www.terekhov.de/mythread.c
http://www.terekhov.de/thread_ptr.txt
(Pardon me for my poor English and late-night writting)

And sorry for off-topic stuff, I just thought that
someone on the list here might have some interest/
time to take a look and perhaps even help ;-)

> The supplied implementations of Condition won't be rebindable.
> The reasons are similar to the ones stated by some people in that
> newsgroup thread: It reduces the likelihood of error and is more
> efficient for the vastly most common case.

Why would an explicit way (without a need to "re-initialize")
to *change* the associated lock would make some problems with
respect to errors (error checking) and/or efficiency?

Or are you just worried with respect to an extra "unbound"
state?

Please clarify!

[...class RebindableCondition implements Condition...]

Yep, that would work just fine (except the
need to "re-init", which I somewhat dislike ;-).

regards,
alexander.



Doug Lea <dl@cs.oswego.edu>@altair.cs.oswego.edu on 01/31/2002 02:05:36 AM

Please respond to dl@cs.oswego.edu

Sent by:  concurrency-interest-admin@altair.cs.oswego.edu


To:   Alexander Terekhov/Germany/IBM@IBMDE
cc:   concurrency-interest@altair.cs.oswego.edu
Subject:  Re: Interface Condition - bind/unbind ?!




Hi Alexander; I'm happy to see that you subscribed to this list!

> Are there any reasons why there is no interface to bind/unbind
> a condition to(another)/from a corresponding lock object?
>
> http://groups.google.com/groups?as_umsgid=slrn9ehssd.hq.kaz%40cafe.net

The supplied implementations of Condition won't be rebindable.
The reasons are similar to the ones stated by some people in that
newsgroup thread: It reduces the likelihood of error and is more
efficient for the vastly most common case.

However, it is not hard to create your own Condition implementation
class that is rebindable. (Condition is an interface.)
You can write something like:

class RebindableCondition implements Condition {
  private Condition delegate;

  RebindableCondition(Object l) {
    delegate = Locks.createConditionFor(l);
  }

  void await() ... { delegate.await(); }
  // etc

  void rebind(Object l) {
    delegate = Locks.createConditionFor(l);
  }
}

Where I left out the necessary internal synchronization, and the error
checking that would be needed, both of which would take some thought.
Creating a new Condition for each rebind is more expensive than
resetting a field, but all in all, I think this is the right tradeoff.
It IS a rare (and rarely recomendable) usage, and even here, rebinds are
infrequent, so this strategy ought to be competitive.

Do you agree?

--
Doug Lea, Computer Science Department, SUNY Oswego, Oswego, NY 13126 USA
dl@cs.oswego.edu 315-312-2688 FAX:315-312-5424 http://gee.cs.oswego.edu/

_______________________________________________
Concurrency-interest mailing list
Concurrency-interest@altair.cs.oswego.edu
http://altair.cs.oswego.edu/mailman/listinfo/concurrency-interest







