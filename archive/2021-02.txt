From valentin.male.kovalenko at gmail.com  Tue Feb  2 19:53:57 2021
From: valentin.male.kovalenko at gmail.com (Valentin Kovalenko)
Date: Tue, 2 Feb 2021 17:53:57 -0700
Subject: [concurrency-interest] is HB consistent with SO for not otherwise
 related synchronization actions?
Message-ID: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>

Hi all,

Imagine that we have only partial information about an execution (as is
almost always true in practice):
there are synchronization actions wx and wy such that happens-before(wx,
wy). These actions are not otherwise explicitly related, we may think of
them as being volatile writes to two different variables x and y.

According to JMM, they are also ordered with the total synchronization
order. The order so(wx, wy) is a possibility that clearly does not violate
any JMM constraints. Interestingly, so(wy, wx) also does not seem to
violate anything, and, thus, should also be allowed.

However, if I try to imagine a program that produces executions with hb(wx,
wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed to have
hb(wx, wy) in an execution, causes this execution to have so(wx, wy).

So maybe happens-before order is always consistent with the synchronization
order (if this is not the case, could someone come up with a
counterexample)? If this is the case, is there a way to formally deduce it
from JMM without resorting to the argument "I can't imagine a program that
produces executions with hb not being consistent with so"?

Thank you,
Valentin www.kovalenko.link
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210202/a77d1903/attachment.htm>

From valentin.male.kovalenko at gmail.com  Tue Feb  2 20:38:07 2021
From: valentin.male.kovalenko at gmail.com (Valentin Kovalenko)
Date: Tue, 2 Feb 2021 18:38:07 -0700
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
Message-ID: <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>

I believe, I found how to formally prove this.

Same thread.
If hb(wx, wy) and the actions wx, wy are performed by the same thread, then
we have so(wx, wy) trivially due to both so and hb being consistent with
the program order (po).

Different threads.
A more interesting situation is when wx and wy are performed by different
threads, let us label them X and Y respectively. The only way to have a
happens-before relation between actions performed by different threads X
and Y is to have a synchronizes-with relation between a pair of
synchronization actions in these threads. In other words, given hb(wx, wy),
the execution must have actions releaseX performed by X and acquireY
performed by Y, such that synchronizes-with(releaseX, acquireY) and
po(wx, releaseX), po(acquireY, wy).

Now we can see that hb(wx, wy) necessary leads to so(wx, releaseX),
sw(releaseX, acquireY), so(acquireY, wy); and sw(releaseX, acquireY)
necessary means so(releaseX, acquireY).
Therefore, hb(wx, wy) necessary leads to so(wx, releaseX), so(releaseX,
acquireY), so(acquireY, wy), which gives so(wx, wy).

I would highly appreciate it if someone could confirm this reasoning.

Regards,
Valentin www.kovalenko.link


On Tue, Feb 2, 2021 at 5:53 PM Valentin Kovalenko <
valentin.male.kovalenko at gmail.com> wrote:

> Hi all,
>
> Imagine that we have only partial information about an execution (as is
> almost always true in practice):
> there are synchronization actions wx and wy such that happens-before(wx,
> wy). These actions are not otherwise explicitly related, we may think of
> them as being volatile writes to two different variables x and y.
>
> According to JMM, they are also ordered with the total synchronization
> order. The order so(wx, wy) is a possibility that clearly does not violate
> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
> violate anything, and, thus, should also be allowed.
>
> However, if I try to imagine a program that produces executions with
> hb(wx, wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed
> to have hb(wx, wy) in an execution, causes this execution to have so(wx,
> wy).
>
> So maybe happens-before order is always consistent with the
> synchronization order (if this is not the case, could someone come up with
> a counterexample)? If this is the case, is there a way to formally deduce
> it from JMM without resorting to the argument "I can't imagine a program
> that produces executions with hb not being consistent with so"?
>
> Thank you,
> Valentin www.kovalenko.link
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210202/ce437da9/attachment.htm>

From alarmnummer at gmail.com  Wed Feb  3 00:37:25 2021
From: alarmnummer at gmail.com (Peter Veentjer)
Date: Wed, 3 Feb 2021 07:37:25 +0200
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
Message-ID: <CAGuAWdD0NJkBZ4jR3nyu8LmYEf5gV+r0Fa9yepDDeJRqCJDAVQ@mail.gmail.com>

On Wed, Feb 3, 2021 at 2:56 AM Valentin Kovalenko via Concurrency-interest <
concurrency-interest at cs.oswego.edu> wrote:

> Hi all,
>
> Imagine that we have only partial information about an execution (as is
> almost always true in practice):
> there are synchronization actions wx and wy such that happens-before(wx,
> wy). These actions are not otherwise explicitly related, we may think of
> them as being volatile writes to two different variables x and y.
>
> According to JMM, they are also ordered with the total synchronization
> order. The order so(wx, wy) is a possibility that clearly does not violate
> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
> violate anything, and, thus, should also be allowed.
>

It is all about pretending a total order exists. So even if you have 2
unrelated writes, you can pretend a total order on the synchronisation
actions exists by either ordering wx before wy, or by ordering wy before wx.

It is like there are parallel universes and in each universe you can
pretend for example a total order over the synchronization actions exist.
The primary task is to determine if there is at least one universe that
matches the requirements of the memory model (e.g. sequential consistency
or TSO).


> However, if I try to imagine a program that produces executions with
> hb(wx, wy) and so(wy, wx) - I fail miserably.
>

Yes. You have run into a universe where the synchronization order is in
conflict with the happens-before order. So drop this universe and continue
with the other ones. If you can't find any universe that matches the
requirement, then your execution isn't consistent with the memory model.

Whatever I imagine is needed to have hb(wx, wy) in an execution, causes
> this execution to have so(wx, wy).
>
> So maybe happens-before order is always consistent with the
> synchronization order (if this is not the case, could someone come up with
> a counterexample)? If this is the case, is there a way to formally deduce
> it from JMM without resorting to the argument "I can't imagine a program
> that produces executions with hb not being consistent with so"?
>
> Thank you,
> Valentin www.kovalenko.link
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210203/3bdb3f4e/attachment.htm>

From alarmnummer at gmail.com  Wed Feb  3 02:39:35 2021
From: alarmnummer at gmail.com (Peter Veentjer)
Date: Wed, 3 Feb 2021 09:39:35 +0200
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
 <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>
Message-ID: <CAGuAWdCn8uoMgrsG4-7jmV2zT-i2K7HjRiCCb8XxBscNdrHgiQ@mail.gmail.com>

On Wed, Feb 3, 2021 at 3:40 AM Valentin Kovalenko via Concurrency-interest <
concurrency-interest at cs.oswego.edu> wrote:

> I believe, I found how to formally prove this.
>
> Same thread.
> If hb(wx, wy) and the actions wx, wy are performed by the same thread,
> then we have so(wx, wy) trivially due to both so and hb being consistent
> with the program order (po).
>

Correct.

If wx,wy are synchronization actions, then they are part of both so and po.

>
>
> Different threads.
> A more interesting situation is when wx and wy are performed by different
> threads, let us label them X and Y respectively. The only way to have a
> happens-before relation between actions performed by different threads X
> and Y is to have a synchronizes-with relation between a pair of
> synchronization actions in these threads.
>

Correct

>
> In other words, given hb(wx, wy), the execution must have actions releaseX
> performed by X and acquireY performed by Y, such that
> synchronizes-with(releaseX, acquireY) and po(wx, releaseX), po(acquireY,
> wy).
>

Your example is open for multiple interpretations. So I'll make it concrete
and hope it reflects what you have in mind.

int a;
volatile int b;

thread1(){
  a=1;
  b=1;
}

thread(){
  int rb=b;
  int ra=a;
  if(rb==1 && ra==0) println("violation");
}

And let's assume we see rb==1; what can we tell about a.

So we have the following:
po(a=1,b=1)
so(b=1,rb=b)
po(rb=b, ra=a)

So we have a hb(a=1,ra=a)=po(a=1,b=1), so(b=1,rb=b),po(rb=b, ra=a)

So we are good because the read of a should see the write of a and hence
"violation" can't be printed.


> Now we can see that hb(wx, wy) necessary leads to so(wx, releaseX),
> sw(releaseX, acquireY), so(acquireY, wy); and sw(releaseX, acquireY)
> necessary means so(releaseX, acquireY).
>

I'm not sure what wx,wy for actions are. If they are regular loads/stores
then they are not part of the so because they are not synchronization
actions.



> Therefore, hb(wx, wy) necessary leads to so(wx, releaseX), so(releaseX,
> acquireY), so(acquireY, wy), which gives so(wx, wy).
>

The question is if wx,wy are synchronization actions. If they are not, then
they are not part of so.  So in my example the so doesn't order (a=1,b=1)
and it doesn't order (rb=b, ra=a)

If a and b would both be volatile and hence become synchronization actions,
then the so would contain

(a=1,b=1),(b=1,rb=b),(rb=b,ra=a)


>
> I would highly appreciate it if someone could confirm this reasoning.
>

The definition of the so is that it is a total order over all
synchronization actions that is consistent with the po of each of the
threads.

So in case of the universes; it would filter out any universes that
- doesn't have a total order over all synchronization actions
- the total order of the synchronization actions isn't consistent with the
po of each of the threads.

Based on the so you can determine the sw order since it is a sub order of
so.

And based on the po and the sw, you can determine the hb order, i.e. the
transitive closure of the union of the po and the sw.


>
> Regards,
> Valentin www.kovalenko.link
>
>
> On Tue, Feb 2, 2021 at 5:53 PM Valentin Kovalenko <
> valentin.male.kovalenko at gmail.com> wrote:
>
>> Hi all,
>>
>> Imagine that we have only partial information about an execution (as is
>> almost always true in practice):
>> there are synchronization actions wx and wy such that happens-before(wx,
>> wy). These actions are not otherwise explicitly related, we may think of
>> them as being volatile writes to two different variables x and y.
>>
>> According to JMM, they are also ordered with the total synchronization
>> order. The order so(wx, wy) is a possibility that clearly does not violate
>> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
>> violate anything, and, thus, should also be allowed.
>>
>> However, if I try to imagine a program that produces executions with
>> hb(wx, wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed
>> to have hb(wx, wy) in an execution, causes this execution to have so(wx,
>> wy).
>>
>> So maybe happens-before order is always consistent with the
>> synchronization order (if this is not the case, could someone come up with
>> a counterexample)? If this is the case, is there a way to formally deduce
>> it from JMM without resorting to the argument "I can't imagine a program
>> that produces executions with hb not being consistent with so"?
>>
>> Thank you,
>> Valentin www.kovalenko.link
>>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210203/96bbf27e/attachment-0001.htm>

From oleksandr.otenko at gmail.com  Wed Feb  3 03:02:04 2021
From: oleksandr.otenko at gmail.com (Alex Otenko)
Date: Wed, 3 Feb 2021 08:02:04 +0000
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
Message-ID: <CANkgWKgOSE9nmLCEB-Cd8W46zkwvhE5HUyTstBV+PP8rij0C2A@mail.gmail.com>

The definition of happens-before is such that it is consistent with
synchronization order (see JMM spec).

Alex

On Wed, 3 Feb 2021, 00:56 Valentin Kovalenko via Concurrency-interest, <
concurrency-interest at cs.oswego.edu> wrote:

> Hi all,
>
> Imagine that we have only partial information about an execution (as is
> almost always true in practice):
> there are synchronization actions wx and wy such that happens-before(wx,
> wy). These actions are not otherwise explicitly related, we may think of
> them as being volatile writes to two different variables x and y.
>
> According to JMM, they are also ordered with the total synchronization
> order. The order so(wx, wy) is a possibility that clearly does not violate
> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
> violate anything, and, thus, should also be allowed.
>
> However, if I try to imagine a program that produces executions with
> hb(wx, wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed
> to have hb(wx, wy) in an execution, causes this execution to have so(wx,
> wy).
>
> So maybe happens-before order is always consistent with the
> synchronization order (if this is not the case, could someone come up with
> a counterexample)? If this is the case, is there a way to formally deduce
> it from JMM without resorting to the argument "I can't imagine a program
> that produces executions with hb not being consistent with so"?
>
> Thank you,
> Valentin www.kovalenko.link
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210203/a91f1c44/attachment.htm>

From oleksandr.otenko at gmail.com  Wed Feb  3 03:13:31 2021
From: oleksandr.otenko at gmail.com (Alex Otenko)
Date: Wed, 3 Feb 2021 08:13:31 +0000
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
 <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>
Message-ID: <CANkgWKgZLCrH17+nkaagUt1=VCUsvu8hVEYDbuoJTWghaqYr5A@mail.gmail.com>

What you are describing is the definition of the closure of po and sw
consistent with so, which is hb.

Alex

On Wed, 3 Feb 2021, 01:39 Valentin Kovalenko via Concurrency-interest, <
concurrency-interest at cs.oswego.edu> wrote:

> I believe, I found how to formally prove this.
>
> Same thread.
> If hb(wx, wy) and the actions wx, wy are performed by the same thread,
> then we have so(wx, wy) trivially due to both so and hb being consistent
> with the program order (po).
>
> Different threads.
> A more interesting situation is when wx and wy are performed by different
> threads, let us label them X and Y respectively. The only way to have a
> happens-before relation between actions performed by different threads X
> and Y is to have a synchronizes-with relation between a pair of
> synchronization actions in these threads. In other words, given hb(wx, wy),
> the execution must have actions releaseX performed by X and acquireY
> performed by Y, such that synchronizes-with(releaseX, acquireY) and
> po(wx, releaseX), po(acquireY, wy).
>
> Now we can see that hb(wx, wy) necessary leads to so(wx, releaseX),
> sw(releaseX, acquireY), so(acquireY, wy); and sw(releaseX, acquireY)
> necessary means so(releaseX, acquireY).
> Therefore, hb(wx, wy) necessary leads to so(wx, releaseX), so(releaseX,
> acquireY), so(acquireY, wy), which gives so(wx, wy).
>
> I would highly appreciate it if someone could confirm this reasoning.
>
> Regards,
> Valentin www.kovalenko.link
>
>
> On Tue, Feb 2, 2021 at 5:53 PM Valentin Kovalenko <
> valentin.male.kovalenko at gmail.com> wrote:
>
>> Hi all,
>>
>> Imagine that we have only partial information about an execution (as is
>> almost always true in practice):
>> there are synchronization actions wx and wy such that happens-before(wx,
>> wy). These actions are not otherwise explicitly related, we may think of
>> them as being volatile writes to two different variables x and y.
>>
>> According to JMM, they are also ordered with the total synchronization
>> order. The order so(wx, wy) is a possibility that clearly does not violate
>> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
>> violate anything, and, thus, should also be allowed.
>>
>> However, if I try to imagine a program that produces executions with
>> hb(wx, wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed
>> to have hb(wx, wy) in an execution, causes this execution to have so(wx,
>> wy).
>>
>> So maybe happens-before order is always consistent with the
>> synchronization order (if this is not the case, could someone come up with
>> a counterexample)? If this is the case, is there a way to formally deduce
>> it from JMM without resorting to the argument "I can't imagine a program
>> that produces executions with hb not being consistent with so"?
>>
>> Thank you,
>> Valentin www.kovalenko.link
>>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210203/8e33f760/attachment.htm>

From valentin.male.kovalenko at gmail.com  Thu Feb  4 00:35:48 2021
From: valentin.male.kovalenko at gmail.com (Valentin Kovalenko)
Date: Wed, 3 Feb 2021 22:35:48 -0700
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CAGuAWdCn8uoMgrsG4-7jmV2zT-i2K7HjRiCCb8XxBscNdrHgiQ@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
 <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>
 <CAGuAWdCn8uoMgrsG4-7jmV2zT-i2K7HjRiCCb8XxBscNdrHgiQ@mail.gmail.com>
Message-ID: <CAO-wXwKaL834rEcgt22i-xR+9e5k68ZHVBbEuhQfr-6BJG8inA@mail.gmail.com>

Hi Peter,

> The question is if wx,wy are synchronization actions.
> Your example is open for multiple interpretations.

Yes, wx and wy are synchronization actions. I did not specify what they are
exactly on purpose, to make the statement as general as possible.

Thank you,
Valentin www.kovalenko.link


On Wed, Feb 3, 2021 at 12:39 AM Peter Veentjer <alarmnummer at gmail.com>
wrote:

>
>
> On Wed, Feb 3, 2021 at 3:40 AM Valentin Kovalenko via Concurrency-interest
> <concurrency-interest at cs.oswego.edu> wrote:
>
>> I believe, I found how to formally prove this.
>>
>> Same thread.
>> If hb(wx, wy) and the actions wx, wy are performed by the same thread,
>> then we have so(wx, wy) trivially due to both so and hb being consistent
>> with the program order (po).
>>
>
> Correct.
>
> If wx,wy are synchronization actions, then they are part of both so and po.
>
>>
>>
>> Different threads.
>> A more interesting situation is when wx and wy are performed by different
>> threads, let us label them X and Y respectively. The only way to have a
>> happens-before relation between actions performed by different threads X
>> and Y is to have a synchronizes-with relation between a pair of
>> synchronization actions in these threads.
>>
>
> Correct
>
>>
>> In other words, given hb(wx, wy), the execution must have actions
>> releaseX performed by X and acquireY performed by Y, such that
>> synchronizes-with(releaseX, acquireY) and po(wx, releaseX), po(acquireY,
>> wy).
>>
>
> Your example is open for multiple interpretations. So I'll make it
> concrete and hope it reflects what you have in mind.
>
> int a;
> volatile int b;
>
> thread1(){
>   a=1;
>   b=1;
> }
>
> thread(){
>   int rb=b;
>   int ra=a;
>   if(rb==1 && ra==0) println("violation");
> }
>
> And let's assume we see rb==1; what can we tell about a.
>
> So we have the following:
> po(a=1,b=1)
> so(b=1,rb=b)
> po(rb=b, ra=a)
>
> So we have a hb(a=1,ra=a)=po(a=1,b=1), so(b=1,rb=b),po(rb=b, ra=a)
>
> So we are good because the read of a should see the write of a and hence
> "violation" can't be printed.
>
>
>> Now we can see that hb(wx, wy) necessary leads to so(wx, releaseX),
>> sw(releaseX, acquireY), so(acquireY, wy); and sw(releaseX, acquireY)
>> necessary means so(releaseX, acquireY).
>>
>
> I'm not sure what wx,wy for actions are. If they are regular loads/stores
> then they are not part of the so because they are not synchronization
> actions.
>
>
>
>> Therefore, hb(wx, wy) necessary leads to so(wx, releaseX), so(releaseX,
>> acquireY), so(acquireY, wy), which gives so(wx, wy).
>>
>
> The question is if wx,wy are synchronization actions. If they are not,
> then they are not part of so.  So in my example the so doesn't order
> (a=1,b=1) and it doesn't order (rb=b, ra=a)
>
> If a and b would both be volatile and hence become synchronization
> actions, then the so would contain
>
> (a=1,b=1),(b=1,rb=b),(rb=b,ra=a)
>
>
>>
>> I would highly appreciate it if someone could confirm this reasoning.
>>
>
> The definition of the so is that it is a total order over all
> synchronization actions that is consistent with the po of each of the
> threads.
>
> So in case of the universes; it would filter out any universes that
> - doesn't have a total order over all synchronization actions
> - the total order of the synchronization actions isn't consistent with the
> po of each of the threads.
>
> Based on the so you can determine the sw order since it is a sub order of
> so.
>
> And based on the po and the sw, you can determine the hb order, i.e. the
> transitive closure of the union of the po and the sw.
>
>
>>
>> Regards,
>> Valentin www.kovalenko.link
>>
>>
>> On Tue, Feb 2, 2021 at 5:53 PM Valentin Kovalenko <
>> valentin.male.kovalenko at gmail.com> wrote:
>>
>>> Hi all,
>>>
>>> Imagine that we have only partial information about an execution (as is
>>> almost always true in practice):
>>> there are synchronization actions wx and wy such that happens-before(wx,
>>> wy). These actions are not otherwise explicitly related, we may think of
>>> them as being volatile writes to two different variables x and y.
>>>
>>> According to JMM, they are also ordered with the total synchronization
>>> order. The order so(wx, wy) is a possibility that clearly does not violate
>>> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
>>> violate anything, and, thus, should also be allowed.
>>>
>>> However, if I try to imagine a program that produces executions with
>>> hb(wx, wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed
>>> to have hb(wx, wy) in an execution, causes this execution to have so(wx,
>>> wy).
>>>
>>> So maybe happens-before order is always consistent with the
>>> synchronization order (if this is not the case, could someone come up with
>>> a counterexample)? If this is the case, is there a way to formally deduce
>>> it from JMM without resorting to the argument "I can't imagine a program
>>> that produces executions with hb not being consistent with so"?
>>>
>>> Thank you,
>>> Valentin www.kovalenko.link
>>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210203/2f573690/attachment.htm>

From valentin.male.kovalenko at gmail.com  Thu Feb  4 00:40:35 2021
From: valentin.male.kovalenko at gmail.com (Valentin Kovalenko)
Date: Wed, 3 Feb 2021 22:40:35 -0700
Subject: [concurrency-interest] is HB consistent with SO for not
 otherwise related synchronization actions?
In-Reply-To: <CANkgWKgZLCrH17+nkaagUt1=VCUsvu8hVEYDbuoJTWghaqYr5A@mail.gmail.com>
References: <CAO-wXwLMKkJCKNCOaP=R4e9pAqU1hqwrW79Sn3=ObqfOxksj-Q@mail.gmail.com>
 <CAO-wXwJY6YSFqbK-rJiyH1K3WAocfniceqCsej0-mnRBCr6G5g@mail.gmail.com>
 <CANkgWKgZLCrH17+nkaagUt1=VCUsvu8hVEYDbuoJTWghaqYr5A@mail.gmail.com>
Message-ID: <CAO-wXw+oqrHiec=NOhcXPDHMZCN=XGZAVZwC56QdzWm9B9HBZg@mail.gmail.com>

Hi Alex,

Exactly! This seems so obvious today but appeared subtle
yesterday. ¯\_(ツ)_/¯

Regards,
Valentin www.kovalenko.link


On Wed, Feb 3, 2021 at 1:13 AM Alex Otenko <oleksandr.otenko at gmail.com>
wrote:

> What you are describing is the definition of the closure of po and sw
> consistent with so, which is hb.
>
> Alex
>
> On Wed, 3 Feb 2021, 01:39 Valentin Kovalenko via Concurrency-interest, <
> concurrency-interest at cs.oswego.edu> wrote:
>
>> I believe, I found how to formally prove this.
>>
>> Same thread.
>> If hb(wx, wy) and the actions wx, wy are performed by the same thread,
>> then we have so(wx, wy) trivially due to both so and hb being consistent
>> with the program order (po).
>>
>> Different threads.
>> A more interesting situation is when wx and wy are performed by different
>> threads, let us label them X and Y respectively. The only way to have a
>> happens-before relation between actions performed by different threads X
>> and Y is to have a synchronizes-with relation between a pair of
>> synchronization actions in these threads. In other words, given hb(wx, wy),
>> the execution must have actions releaseX performed by X and acquireY
>> performed by Y, such that synchronizes-with(releaseX, acquireY) and
>> po(wx, releaseX), po(acquireY, wy).
>>
>> Now we can see that hb(wx, wy) necessary leads to so(wx, releaseX),
>> sw(releaseX, acquireY), so(acquireY, wy); and sw(releaseX, acquireY)
>> necessary means so(releaseX, acquireY).
>> Therefore, hb(wx, wy) necessary leads to so(wx, releaseX), so(releaseX,
>> acquireY), so(acquireY, wy), which gives so(wx, wy).
>>
>> I would highly appreciate it if someone could confirm this reasoning.
>>
>> Regards,
>> Valentin www.kovalenko.link
>>
>>
>> On Tue, Feb 2, 2021 at 5:53 PM Valentin Kovalenko <
>> valentin.male.kovalenko at gmail.com> wrote:
>>
>>> Hi all,
>>>
>>> Imagine that we have only partial information about an execution (as is
>>> almost always true in practice):
>>> there are synchronization actions wx and wy such that happens-before(wx,
>>> wy). These actions are not otherwise explicitly related, we may think of
>>> them as being volatile writes to two different variables x and y.
>>>
>>> According to JMM, they are also ordered with the total synchronization
>>> order. The order so(wx, wy) is a possibility that clearly does not violate
>>> any JMM constraints. Interestingly, so(wy, wx) also does not seem to
>>> violate anything, and, thus, should also be allowed.
>>>
>>> However, if I try to imagine a program that produces executions with
>>> hb(wx, wy) and so(wy, wx) - I fail miserably. Whatever I imagine is needed
>>> to have hb(wx, wy) in an execution, causes this execution to have so(wx,
>>> wy).
>>>
>>> So maybe happens-before order is always consistent with the
>>> synchronization order (if this is not the case, could someone come up with
>>> a counterexample)? If this is the case, is there a way to formally deduce
>>> it from JMM without resorting to the argument "I can't imagine a program
>>> that produces executions with hb not being consistent with so"?
>>>
>>> Thank you,
>>> Valentin www.kovalenko.link
>>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20210203/bd8d01f7/attachment-0001.htm>

