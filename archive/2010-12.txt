From davidcholmes at aapt.net.au  Wed Dec  1 02:41:34 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Wed, 1 Dec 2010 17:41:34 +1000
Subject: [concurrency-interest] producer-consumer POISON msg
In-Reply-To: <AANLkTi=KL_Xy1t0w0s5t82wiqbyaUpkP-pHUSqhpQUY2@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCEEOJIJAA.davidcholmes@aapt.net.au>

Satyendra Gurjar writes:
> Hello, I'm trying producer-consumer pattern as described in jcip 5.3
> I'm putting POISON MSG for consumers to stop after finish
> consuming real msgs.
> But what I'm seeing is consumers consumes POISON MSG before real msgs and
> stops. Following is my code, please help me understand the behavior.

I can't see anything obviously wrong with your approach - though some of the
details are missing. If we wait until all producers are done before
inserting any POISON_MSGS in the queue then all the real messages must
appear before the poison ones and must be taken before them.

Can you reduce this to a full example (eg not using files and your
"crawler") and reproduce it? At a minimum can you should how producer and
consumer interact with the queue.

David Holmes
------------

> Thanks.
>
>
> static final File POISON_MSG = new File("");
>
> static void main(String[] args) throws Exception {
>
>  int N_CONSUMERS = 10, BOUND = 1000;
>  BlockingQueue<File> blockingqueue = new LinkedBlockingQueue<File>(BOUND);
>
>  ArrayList<Thread> producers = new ArrayList<Thread>();
>  for(String[] file : logfiles) { // producer threads
>      Thread t = new Thread(new Producer(file[0], file[1], blockingqueue));
>      t.start();
>      producers.add(t);
>  }
>
>  Crawler crawler = new Crawler(); // Crawler is immutable
>
>  for(int i=0; i < N_CONSUMERS; i++) { // consumer threads
>      new Thread(new Consumer(blockingqueue, crawler)).start();
>  }
>
>  // wait for all producers to finish
>  for(Thread p : producers) p.join();
>
>  // then put N_CONSUMERS POISON_MSG for consumers to stop
>  for(int i=0; i < N_CONSUMERS; i++) blockingqueue.put(POISON_MSG);
>
> }
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From davidcholmes at aapt.net.au  Wed Dec  1 02:44:57 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Wed, 1 Dec 2010 17:44:57 +1000
Subject: [concurrency-interest] producer-consumer POISON msg
In-Reply-To: <AANLkTi=KL_Xy1t0w0s5t82wiqbyaUpkP-pHUSqhpQUY2@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCMEOJIJAA.davidcholmes@aapt.net.au>

Just a clarification:

> Hello, I'm trying producer-consumer pattern as described in jcip 5.3
> I'm putting POISON MSG for consumers to stop after finish
> consuming real msgs.
> But what I'm seeing is consumers consumes POISON MSG before real msgs and
> stops. Following is my code, please help me understand the behavior.

How do you observe this? Are there still real messages in the queue after
the consumers are done - how do you detect that? Or is it just that some
consumers report real messages after other report that they have been
poisoned? This latter case is quite possible because a consumer can take a
real message and then get descheduled and only resume after other consumers
have been poisoned.

David Holmes

> Thanks.
>
>
> static final File POISON_MSG = new File("");
>
> static void main(String[] args) throws Exception {
>
>  int N_CONSUMERS = 10, BOUND = 1000;
>  BlockingQueue<File> blockingqueue = new LinkedBlockingQueue<File>(BOUND);
>
>  ArrayList<Thread> producers = new ArrayList<Thread>();
>  for(String[] file : logfiles) { // producer threads
>      Thread t = new Thread(new Producer(file[0], file[1], blockingqueue));
>      t.start();
>      producers.add(t);
>  }
>
>  Crawler crawler = new Crawler(); // Crawler is immutable
>
>  for(int i=0; i < N_CONSUMERS; i++) { // consumer threads
>      new Thread(new Consumer(blockingqueue, crawler)).start();
>  }
>
>  // wait for all producers to finish
>  for(Thread p : producers) p.join();
>
>  // then put N_CONSUMERS POISON_MSG for consumers to stop
>  for(int i=0; i < N_CONSUMERS; i++) blockingqueue.put(POISON_MSG);
>
> }
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From vgrazi at gmail.com  Wed Dec  1 06:04:44 2010
From: vgrazi at gmail.com (Victor Grazi)
Date: Wed, 1 Dec 2010 06:04:44 -0500
Subject: [concurrency-interest] Concurrent Programming in Java Third Edition
Message-ID: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>

I remember a few months ago seeing on Amazon that Concurrent Programming in
Java Third Edition was "soon to be released". However I no longer see it
there.

I was wondering when Concurrent Programming in Java Third Edition will be
available and is there an early access e-version edition available now?

Thanks Victor
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101201/61a85d47/attachment.html>

From tfh2000 at gmail.com  Wed Dec  1 11:04:41 2010
From: tfh2000 at gmail.com (Thomas Hughes)
Date: Wed, 1 Dec 2010 10:04:41 -0600
Subject: [concurrency-interest] PrioritySemaphore
Message-ID: <AANLkTikwWL8UUfpCb5FWKu7pDXFrEkjt4cEGoZZzf02K@mail.gmail.com>

What?s the best Java5/Java6 library (or near-drop-in replacement) for
PrioritySemaphore, other than just using the full concurrent-1.3.4.jar? ?
where is the ?follow-up add-on package? mentioned below?



http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html

?(A few niche classes here have no equivalents in java.util.concurrent. They
will become part of a follow-up add-on package that will also include other
unstandardized classes.)?



-Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101201/c52b5f56/attachment.html>

From dl at cs.oswego.edu  Wed Dec  1 12:35:44 2010
From: dl at cs.oswego.edu (Doug Lea)
Date: Wed, 01 Dec 2010 12:35:44 -0500
Subject: [concurrency-interest] Concurrent Programming in Java Third
	Edition
In-Reply-To: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>
References: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>
Message-ID: <4CF68770.4060908@cs.oswego.edu>

On 12/01/10 06:04, Victor Grazi wrote:
> I remember a few months ago seeing on Amazon that Concurrent Programming in Java
> Third Edition was "soon to be released". However I no longer see it there.
>
> I was wondering when Concurrent Programming in Java Third Edition will be
> available and is there an early access e-version edition available now?
>

Years, ago, before the Java Concurrency in Practice book was
started, there were briefly some publisher plans for a third
edition. Maybe that's how this happened. But no, I'm not
planning to write one anytime soon. (Never say never though...)

-Doug

From sg at sgurjar.com  Wed Dec  1 13:42:00 2010
From: sg at sgurjar.com (Satyendra Gurjar)
Date: Wed, 1 Dec 2010 13:42:00 -0500
Subject: [concurrency-interest] producer-consumer POISON msg
In-Reply-To: <NFBBKALFDCPFIDBNKAPCMEOJIJAA.davidcholmes@aapt.net.au>
References: <AANLkTi=KL_Xy1t0w0s5t82wiqbyaUpkP-pHUSqhpQUY2@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCMEOJIJAA.davidcholmes@aapt.net.au>
Message-ID: <AANLkTikpaN266P3bV1sOznCODB_f2emTUeUK1udYu2t9@mail.gmail.com>

Later on, I have realized my problem was due to following code. I was using
find command to get the list of file (as File.listFiles was very slow, and
no built-in support for glob). StreamReader stdout puts File on the filequeue
that it reads from stdout of Process. Process.waitFor returns while
StreamReader
stdout still putting Files on the filequeue and not finished, causing Producer
thread to end before all produced files are put on the filequeue,
causing POISION msg to put ahead of real msg.

class Producer implements Runnable {
  String basedir, filenameglob;
  BlockingQueue<File> filequeue;

  Producer(String basedir, String filenameglob, BlockingQueue<File> filequeue){
        this.basedir      = basedir;
        this.filenameglob = filenameglob;
        this.filequeue    = filequeue;
  }

  public void run(){
    try{
      String cmd = "find " + basedir + " -name " + filenameglob;
      Process proc = Runtime.getRuntime().exec(cmd);

      StreamReader stderr = new StreamReader(proc.getErrorStream());
      StreamReader stdout = new StreamReader(proc.getInputStream(), filequeue);
      new Thread(stderr).start();
      new Thread(stdout).start();

      int exitValue = proc.waitFor();

    } catch(InterruptedException ex) {
      ex.printStackTrace(System.err);
      Thread.currentThread().interrupt();
    } catch(Exception ex) {
      ex.printStackTrace(System.err);
    }
  }
}

I fixed run method as following

      String cmd = "find " + basedir + " -name " + filenameglob;
      Process proc = Runtime.getRuntime().exec(cmd);

      Thread stderr_th = new Thread(new StreamReader(proc.getErrorStream()));
      Thread stdout_th = new Thread(new
StreamReader(proc.getInputStream(), filequeue));
      stderr_th.start();
      stdout_th.start();

      int exitValue = proc.waitFor();

      stderr_th.join();
      stdout_th.join();

Thanks.

On Wed, Dec 1, 2010 at 2:44 AM, David Holmes <davidcholmes at aapt.net.au> wrote:
> Just a clarification:
>
>> Hello, I'm trying producer-consumer pattern as described in jcip 5.3
>> I'm putting POISON MSG for consumers to stop after finish
>> consuming real msgs.
>> But what I'm seeing is consumers consumes POISON MSG before real msgs and
>> stops. Following is my code, please help me understand the behavior.
>
> How do you observe this? Are there still real messages in the queue after
> the consumers are done - how do you detect that? Or is it just that some
> consumers report real messages after other report that they have been
> poisoned? This latter case is quite possible because a consumer can take a
> real message and then get descheduled and only resume after other consumers
> have been poisoned.
>
> David Holmes
>
>> Thanks.
>>
>>
>> static final File POISON_MSG = new File("");
>>
>> static void main(String[] args) throws Exception {
>>
>> ?int N_CONSUMERS = 10, BOUND = 1000;
>> ?BlockingQueue<File> blockingqueue = new LinkedBlockingQueue<File>(BOUND);
>>
>> ?ArrayList<Thread> producers = new ArrayList<Thread>();
>> ?for(String[] file : logfiles) { // producer threads
>> ? ? ?Thread t = new Thread(new Producer(file[0], file[1], blockingqueue));
>> ? ? ?t.start();
>> ? ? ?producers.add(t);
>> ?}
>>
>> ?Crawler crawler = new Crawler(); // Crawler is immutable
>>
>> ?for(int i=0; i < N_CONSUMERS; i++) { // consumer threads
>> ? ? ?new Thread(new Consumer(blockingqueue, crawler)).start();
>> ?}
>>
>> ?// wait for all producers to finish
>> ?for(Thread p : producers) p.join();
>>
>> ?// then put N_CONSUMERS POISON_MSG for consumers to stop
>> ?for(int i=0; i < N_CONSUMERS; i++) blockingqueue.put(POISON_MSG);
>>
>> }
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
>


From forax at univ-mlv.fr  Wed Dec  1 14:27:50 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Wed, 01 Dec 2010 20:27:50 +0100
Subject: [concurrency-interest] producer-consumer POISON msg
In-Reply-To: <AANLkTikpaN266P3bV1sOznCODB_f2emTUeUK1udYu2t9@mail.gmail.com>
References: <AANLkTi=KL_Xy1t0w0s5t82wiqbyaUpkP-pHUSqhpQUY2@mail.gmail.com>	<NFBBKALFDCPFIDBNKAPCMEOJIJAA.davidcholmes@aapt.net.au>
	<AANLkTikpaN266P3bV1sOznCODB_f2emTUeUK1udYu2t9@mail.gmail.com>
Message-ID: <4CF6A1B6.9090507@univ-mlv.fr>

On 12/01/2010 07:42 PM, Satyendra Gurjar wrote:
> Later on, I have realized my problem was due to following code. I was using
> find command to get the list of file (as File.listFiles was very slow, and
> no built-in support for glob).

This support was introduced in jdk7:
http://download.java.net/jdk7/docs/api/java/nio/file/Path.html#newDirectoryStream%28java.lang.String%29

R?mi


From alarmnummer at gmail.com  Wed Dec  1 21:56:36 2010
From: alarmnummer at gmail.com (Peter Veentjer)
Date: Thu, 2 Dec 2010 03:56:36 +0100
Subject: [concurrency-interest] Concurrent Programming in Java Third
	Edition
In-Reply-To: <4CF68770.4060908@cs.oswego.edu>
References: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>
	<4CF68770.4060908@cs.oswego.edu>
Message-ID: <AANLkTikEa7x4qmJanr37oc4CE9r+jadNdMS8M2vzAEkB@mail.gmail.com>

And there is no way to bribe you?

There is a lot of new cool stuff coming up like the FJ framework and the
support for fences. So I would certainly like to have an up to date in depth
book book about all the newest goodies. And who is better for explaining it
than the one that influenced/wrote it.

On Wed, Dec 1, 2010 at 6:35 PM, Doug Lea <dl at cs.oswego.edu> wrote:

> On 12/01/10 06:04, Victor Grazi wrote:
>
>> I remember a few months ago seeing on Amazon that Concurrent Programming
>> in Java
>> Third Edition was "soon to be released". However I no longer see it there.
>>
>> I was wondering when Concurrent Programming in Java Third Edition will be
>> available and is there an early access e-version edition available now?
>>
>>
> Years, ago, before the Java Concurrency in Practice book was
> started, there were briefly some publisher plans for a third
> edition. Maybe that's how this happened. But no, I'm not
> planning to write one anytime soon. (Never say never though...)
>
> -Doug
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101202/4ae4dc93/attachment.html>

From giorgio.zoppi at gmail.com  Thu Dec  2 04:33:03 2010
From: giorgio.zoppi at gmail.com (Giorgio Zoppi)
Date: Thu, 2 Dec 2010 10:33:03 +0100
Subject: [concurrency-interest] Concurrent Programming in Java Third
	Edition
In-Reply-To: <AANLkTikEa7x4qmJanr37oc4CE9r+jadNdMS8M2vzAEkB@mail.gmail.com>
References: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>
	<4CF68770.4060908@cs.oswego.edu>
	<AANLkTikEa7x4qmJanr37oc4CE9r+jadNdMS8M2vzAEkB@mail.gmail.com>
Message-ID: <AANLkTikVYJ+3xaVscN-bcY1=PnsytAGB4-FJcd1USDc=@mail.gmail.com>

i would interested to in such a book.
-- 
Quiero ser el rayo de sol que cada d?a te despierta
para hacerte respirar y vivir en me.
"Favola -Moda".


From benoit at dissert.fr  Thu Dec  2 04:50:44 2010
From: benoit at dissert.fr (=?ISO-8859-1?Q?Beno=EEt_Dissert?=)
Date: Thu, 2 Dec 2010 10:50:44 +0100
Subject: [concurrency-interest] Concurrent Programming in Java Third
	Edition
In-Reply-To: <AANLkTikVYJ+3xaVscN-bcY1=PnsytAGB4-FJcd1USDc=@mail.gmail.com>
References: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>
	<4CF68770.4060908@cs.oswego.edu>
	<AANLkTikEa7x4qmJanr37oc4CE9r+jadNdMS8M2vzAEkB@mail.gmail.com>
	<AANLkTikVYJ+3xaVscN-bcY1=PnsytAGB4-FJcd1USDc=@mail.gmail.com>
Message-ID: <AANLkTimyMty5G=XLTnEj8KaTB=07_dXv0yuaCBvpQKET@mail.gmail.com>

I would be also.

Regards,

Beno?t

_______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101202/ac2e7c5b/attachment.html>

From giorgio.zoppi at gmail.com  Thu Dec  2 04:58:08 2010
From: giorgio.zoppi at gmail.com (Giorgio Zoppi)
Date: Thu, 2 Dec 2010 10:58:08 +0100
Subject: [concurrency-interest] Concurrent Programming in Java Third
	Edition
In-Reply-To: <AANLkTimyMty5G=XLTnEj8KaTB=07_dXv0yuaCBvpQKET@mail.gmail.com>
References: <AANLkTi=yumamW-Z2=dd88MwMrRmipKg03ZWqka9NsEB7@mail.gmail.com>
	<4CF68770.4060908@cs.oswego.edu>
	<AANLkTikEa7x4qmJanr37oc4CE9r+jadNdMS8M2vzAEkB@mail.gmail.com>
	<AANLkTikVYJ+3xaVscN-bcY1=PnsytAGB4-FJcd1USDc=@mail.gmail.com>
	<AANLkTimyMty5G=XLTnEj8KaTB=07_dXv0yuaCBvpQKET@mail.gmail.com>
Message-ID: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>

I belive that it could be also updated by a collective work (i.e. the
same process that Eckel had in TIJ).
Ciao,
Giorgio.

From davidcholmes at aapt.net.au  Thu Dec  2 05:04:55 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Thu, 2 Dec 2010 20:04:55 +1000
Subject: [concurrency-interest] Concurrent Programming in Java
	ThirdEdition
In-Reply-To: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>

> I belive that it could be also updated by a collective work (i.e. the
> same process that Eckel had in TIJ).

No. "Java Concurrency in Practice" is a collective work. "Concurrent
Programming in Java" is pure Doug Lea. ;-)

David Holmes


From viktor.klang at gmail.com  Thu Dec  2 05:13:37 2010
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3IgS2xhbmc=?=)
Date: Thu, 2 Dec 2010 11:13:37 +0100
Subject: [concurrency-interest] Concurrent Programming in Java
	ThirdEdition
In-Reply-To: <NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>
References: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>
Message-ID: <AANLkTi=aGvaY6sOCDfvFMRpCEsw4QUHSZmCbfw9Qty=o@mail.gmail.com>

On Thu, Dec 2, 2010 at 11:04 AM, David Holmes <davidcholmes at aapt.net.au>wrote:

> > I belive that it could be also updated by a collective work (i.e. the
> > same process that Eckel had in TIJ).
>
> No. "Java Concurrency in Practice" is a collective work. "Concurrent
> Programming in Java" is pure Doug Lea. ;-)
>

Why not call it "JVM Concurrency" and have a general discussion on
concurrency, and even include some other of the JVM languages into the game.


>
> David Holmes
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>



-- 
Viktor Klang,
Code Connoisseur
Work:   Scalable Solutions <http://www.scalablesolutions.se>
Code:   github.com/viktorklang
Follow: twitter.com/viktorklang
Read:   klangism.tumblr.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101202/e5a5bab7/attachment-0001.html>

From partha.net at gmail.com  Thu Dec  2 10:16:41 2010
From: partha.net at gmail.com (Partha Pal)
Date: Thu, 2 Dec 2010 20:46:41 +0530
Subject: [concurrency-interest] Fwd: Concurrent Programming in Java
	ThirdEdition
In-Reply-To: <AANLkTi=aGvaY6sOCDfvFMRpCEsw4QUHSZmCbfw9Qty=o@mail.gmail.com>
References: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>
	<AANLkTi=aGvaY6sOCDfvFMRpCEsw4QUHSZmCbfw9Qty=o@mail.gmail.com>
Message-ID: <AANLkTimidn1GB47bjFcsOqkXo4eDSV8BvkWKfrG-nQur@mail.gmail.com>

David's suggestion is OK  , but that would lead to several volumes of the
book I guess :-) let Doug stick to Java/JVM with some hardware trends and we
would see few more JSRs.

--Partha

---------- Forwarded message ----------
From: ?iktor Klang <viktor.klang at gmail.com>
Date: 2 December 2010 15:43
Subject: Re: [concurrency-interest] Concurrent Programming in Java
ThirdEdition
To: dholmes at ieee.org
Cc: concurrency-interest at cs.oswego.edu




On Thu, Dec 2, 2010 at 11:04 AM, David Holmes <davidcholmes at aapt.net.au>wrote:

> > I belive that it could be also updated by a collective work (i.e. the
> > same process that Eckel had in TIJ).
>
> No. "Java Concurrency in Practice" is a collective work. "Concurrent
> Programming in Java" is pure Doug Lea. ;-)
>

Why not call it "JVM Concurrency" and have a general discussion on
concurrency, and even include some other of the JVM languages into the game.


>
> David Holmes
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>



-- 
Viktor Klang,
Code Connoisseur
Work:   Scalable Solutions <http://www.scalablesolutions.se>
Code:   github.com/viktorklang
Follow: twitter.com/viktorklang
Read:   klangism.tumblr.com


_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101202/af58856a/attachment.html>

From ghosh.debasish at gmail.com  Thu Dec  2 11:36:49 2010
From: ghosh.debasish at gmail.com (Debasish Ghosh)
Date: Thu, 2 Dec 2010 22:06:49 +0530
Subject: [concurrency-interest] Fwd: Concurrent Programming in Java
	ThirdEdition
In-Reply-To: <AANLkTimidn1GB47bjFcsOqkXo4eDSV8BvkWKfrG-nQur@mail.gmail.com>
References: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>
	<AANLkTi=aGvaY6sOCDfvFMRpCEsw4QUHSZmCbfw9Qty=o@mail.gmail.com>
	<AANLkTimidn1GB47bjFcsOqkXo4eDSV8BvkWKfrG-nQur@mail.gmail.com>
Message-ID: <AANLkTik-kK7kJi713jUOp-oecEinD8akKKsyGfBSs6GC@mail.gmail.com>

+1 on Partha's suggestion .. we should have a persistent version of Doug's
wisdom (of course besides all the code in JDK that he has written) that has
primarily shaped the way we do concurrency in Java/JVM ..

On Thu, Dec 2, 2010 at 8:46 PM, Partha Pal <partha.net at gmail.com> wrote:

> David's suggestion is OK  , but that would lead to several volumes of the
> book I guess :-) let Doug stick to Java/JVM with some hardware trends and we
> would see few more JSRs.
>
> --Partha
>
> ---------- Forwarded message ----------
> From: ?iktor Klang <viktor.klang at gmail.com>
> Date: 2 December 2010 15:43
> Subject: Re: [concurrency-interest] Concurrent Programming in Java
> ThirdEdition
> To: dholmes at ieee.org
> Cc: concurrency-interest at cs.oswego.edu
>
>
>
>
> On Thu, Dec 2, 2010 at 11:04 AM, David Holmes <davidcholmes at aapt.net.au>wrote:
>
>> > I belive that it could be also updated by a collective work (i.e. the
>> > same process that Eckel had in TIJ).
>>
>> No. "Java Concurrency in Practice" is a collective work. "Concurrent
>> Programming in Java" is pure Doug Lea. ;-)
>>
>
> Why not call it "JVM Concurrency" and have a general discussion on
> concurrency, and even include some other of the JVM languages into the game.
>
>
>>
>> David Holmes
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
>
>
> --
> Viktor Klang,
> Code Connoisseur
> Work:   Scalable Solutions <http://www.scalablesolutions.se>
> Code:   github.com/viktorklang
> Follow: twitter.com/viktorklang
> Read:   klangism.tumblr.com
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>


-- 
Debasish Ghosh
http://manning.com/ghosh

Twttr: @debasishg
Blog: http://debasishg.blogspot.com
Code: http://github.com/debasishg
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101202/14ea8a9c/attachment.html>

From Thorsten.Moeller at unibas.ch  Fri Dec  3 11:58:39 2010
From: Thorsten.Moeller at unibas.ch (=?Windows-1252?Q?Thorsten_M=F6ller?=)
Date: Fri, 3 Dec 2010 17:58:39 +0100
Subject: [concurrency-interest] Bug in
	ConcurrentSkipListSet/ConcurrentSkipListMap?
Message-ID: <21185AD2BA3B49499E28D1953B855CC3@cs.unibas.ch>

Hi all,

I believe I've found a bug in ConcurrentSkipListSet (or in
ConcurrentSkipListMap because the former is based on the latter). Since
I'm not 100% sure I thought I write to this list in order to cross check
and see if somebody here can reproduce the problem or tell me that I'm
missing something. The JUnit 4 test below (attachment) can be used to
reproduce the problem. It uses only Java classes. In short, the test
creates three threads which concurrently insert unique Long values into
a ConcurrentSkipListSet and check if they are contained in the set after
the insert. The test fails rarely in about 1 out of 10-15 runs (you
might need to run it often). If it fails the assertions in line 75 or 77
do not hold. If you run it often enough then you will also notice that
both test methods can fail, which means that it is not a matter of how
the Long values are created.

What I'm not 100% sure is whether the test is really written in a way
that it cannot create duplicated Long values. If not, then I think there
must be a bug in ConcurrentSkipListSet. Otherwise, I would like to know
why it can happen that duplicated Long values can be created. I also
tried to make sure that no auto(un)boxing is used and that the caching
implemented by Long is not used (by creating new instances using the
constructor Long(long)). Finally, since Long is immutable, there should
be no hashCode related problems.

Also interesting is that if I switch from a ConcurrentSkipListSet to a
synchronized TreeSet (by switching lines 40,41) the test always passes
(albeit it is slower which is an obvious result of the locking). This is
one more indication that there must be a bug in ConcurrentSkipListSet.

I could reproduce the bug using Oracle JDK 1.6.0_22 on both Windows XP
32bit and Linux 2.6.32-26 32bit machines.

Can anybody confirm the problem and do you agree that it must be a bug?

Thanks,
Thorsten





/*
* Created on 02.12.2010
*
*/
package ch.unibas.cs;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.Test;
/**
*
* @author Thorsten M?ller - Thorsten.Moeller at unibas.ch
*/
public class JavaTest
{
private static final int NUMBER_OF_ITERATIONS = 300000;
private static final int NUMBER_OF_THREADS = 3;
static final AtomicLong sequence = new AtomicLong(Long.MIN_VALUE);
static volatile long lsequence = Long.MIN_VALUE;
static final SortedSet<Long> values = new ConcurrentSkipListSet<Long>();
// static final SortedSet<Long> values =
Collections.synchronizedSortedSet(new TreeSet<Long>());
static final Lock lock = new ReentrantLock();
@Test
public final void testCreateTimestampLock() throws InterruptedException,
ExecutionException
{
final long initial = lsequence;
testRun(true);
assertEquals(lsequence, initial + NUMBER_OF_ITERATIONS *
NUMBER_OF_THREADS);
}
@Test
public final void testCreateTimestampAtomic() throws
InterruptedException, ExecutionException
{
final long initial = sequence.get();
testRun(false);
assertEquals(sequence.get(), initial + NUMBER_OF_ITERATIONS *
NUMBER_OF_THREADS);
}
private void testRun(final boolean locking) throws InterruptedException,
ExecutionException
{
final ExecutorService es =
Executors.newFixedThreadPool(NUMBER_OF_THREADS);
final List<Callable<Set<Long>>> tasks = new
ArrayList<Callable<Set<Long>>>();
for (int i = 0; i < NUMBER_OF_THREADS; i++)
{
tasks.add(new Callable<Set<Long>>() {
@Override public Set<Long> call() throws Exception
{
final Set<Long> seq = new LinkedHashSet<Long>();
Long value;
for (int j = 0; j < NUMBER_OF_ITERATIONS; j++)
{
value = (locking)? createViaLock() : createViaAtomicLong();
assertTrue(seq.add(value));
assertFalse(values.contains(value));
assertTrue(values.add(value));
assertTrue(values.contains(value));
assertTrue(values.remove(value));
assertFalse(values.contains(value));
}
return seq;
}
});
}
final List<Future<Set<Long>>> futures = es.invokeAll(tasks);
assertEquals(NUMBER_OF_THREADS, futures.size());
final List<Set<Long>> results = new
ArrayList<Set<Long>>(futures.size());
for (final Future<Set<Long>> future : futures)
{
results.add(future.get());
}
final Iterator<Set<Long>> it = results.iterator();
for (int i = 0; i < NUMBER_OF_THREADS && it.hasNext(); i++)
{
final Set<Long> result = it.next();
Long previous = null;
for (final Long l : result)
{
if (previous != null)
{
assertTrue(previous < l);
for (int j = i + 1; j < NUMBER_OF_THREADS; j++)
{
assertFalse(results.get(j).contains(l));
}
}
previous = l;
}
}
}
Long createViaLock()
{
lock.lock();
try
{
return new Long(lsequence++);
}
finally
{
lock.unlock();
}
}
Long createViaAtomicLong()
{
return new Long(sequence.getAndIncrement());
}
}
-------------- next part --------------
A non-text attachment was scrubbed...
Name: JavaTest.java
Type: application/octet-stream
Size: 3597 bytes
Desc: not available
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101203/52a7638c/attachment.obj>

From morganconrad at yahoo.com  Fri Dec  3 18:56:08 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Fri, 3 Dec 2010 15:56:08 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists (not
	just ArrayList)
Message-ID: <541541.49522.qm@web112101.mail.gq1.yahoo.com>

Our project was throwing intermittent ConcurrentModificationExceptions because of the classic bug, one thread iterating over a collection while another was modifying it.  Most of the bugs were solved by changing to a CopyOnWriteArrayList - a wonderful class, thank you!

But, in a few cases, the underlying list behavior we wanted was NOT ArrayList, (there was a sorted list) or, the offending collection was a Map.  Rather than writing multiple classes CopyOnWriteThis, CopyOnWriteThat, I came up with the idea of writing wrapper classes, much like Collections.SynchronizedMap, to provide "copy-on" behavior for the underlying collection.  It took quite a while, and, it turns out we fixed the problems in other ways so the code was never really used.

I did some Googling, and searching of this mailing list, and didn't find anything similar.  Is this "copy-on-wrapper" idea a useful concept?  If so, I'd be happy to provide the code and my blog link where I talk about it.  Comments and feedback would be welcome, as I imagine there could be issues or improvements.


Sincerely,
Morgan Conrad




      

From kasper at kav.dk  Sat Dec  4 07:04:30 2010
From: kasper at kav.dk (Kasper Nielsen)
Date: Sat, 04 Dec 2010 13:04:30 +0100
Subject: [concurrency-interest] Bug in
	ConcurrentSkipListSet/ConcurrentSkipListMap?
In-Reply-To: <21185AD2BA3B49499E28D1953B855CC3@cs.unibas.ch>
References: <21185AD2BA3B49499E28D1953B855CC3@cs.unibas.ch>
Message-ID: <4CFA2E4E.3050801@kav.dk>

That definitely looks like a bug.
I was able to easily reproduce it using latest from gee.cs.oswego.edu. 
on a 64 bit machine.

I used a bit simpler testcase.

final ConcurrentSkipListMap<Integer, Boolean> map = new 
ConcurrentSkipListMap<Integer, Boolean>();
final AtomicInteger al = new AtomicInteger();
ExecutorService es = Executors.newFixedThreadPool(8);
for (int i = 0; i < 8; i++) {
   es.submit(new Runnable() {
     public void run() {
       for (int i = 0; i < 1000000; i++) {
         Integer key = al.incrementAndGet();
         map.put(key, Boolean.TRUE);
         if (!map.containsKey(key)) {
           System.err.println("ohoh " + key);
         }
         map.remove(key);//works fine if you comment out remove
       }
     }
   });
}
es.shutdown();

Also i noticed its only when we combined inserts with removes that the 
problems occur.


Cheers
   Kasper


On 03-12-2010 17:58, Thorsten M?ller wrote:
> Hi all,
>
> I believe I've found a bug in ConcurrentSkipListSet (or in
> ConcurrentSkipListMap because the former is based on the latter). Since
> I'm not 100% sure I thought I write to this list in order to cross check
> and see if somebody here can reproduce the problem or tell me that I'm
> missing something. The JUnit 4 test below (attachment) can be used to
> reproduce the problem. It uses only Java classes. In short, the test
> creates three threads which concurrently insert unique Long values into
> a ConcurrentSkipListSet and check if they are contained in the set after
> the insert. The test fails rarely in about 1 out of 10-15 runs (you
> might need to run it often). If it fails the assertions in line 75 or 77
> do not hold. If you run it often enough then you will also notice that
> both test methods can fail, which means that it is not a matter of how
> the Long values are created.
>
> What I'm not 100% sure is whether the test is really written in a way
> that it cannot create duplicated Long values. If not, then I think there
> must be a bug in ConcurrentSkipListSet. Otherwise, I would like to know
> why it can happen that duplicated Long values can be created. I also
> tried to make sure that no auto(un)boxing is used and that the caching
> implemented by Long is not used (by creating new instances using the
> constructor Long(long)). Finally, since Long is immutable, there should
> be no hashCode related problems.
>
> Also interesting is that if I switch from a ConcurrentSkipListSet to a
> synchronized TreeSet (by switching lines 40,41) the test always passes
> (albeit it is slower which is an obvious result of the locking). This is
> one more indication that there must be a bug in ConcurrentSkipListSet.
>
> I could reproduce the bug using Oracle JDK 1.6.0_22 on both Windows XP
> 32bit and Linux 2.6.32-26 32bit machines.
>
> Can anybody confirm the problem and do you agree that it must be a bug?
>
> Thanks,
> Thorsten
>
>
>
>
>
> /*
> * Created on 02.12.2010
> *
> */
> package ch.unibas.cs;
> import static org.junit.Assert.assertEquals;
> import static org.junit.Assert.assertFalse;
> import static org.junit.Assert.assertTrue;
> import java.util.ArrayList;
> import java.util.Iterator;
> import java.util.LinkedHashSet;
> import java.util.List;
> import java.util.Set;
> import java.util.SortedSet;
> import java.util.concurrent.Callable;
> import java.util.concurrent.ConcurrentSkipListSet;
> import java.util.concurrent.ExecutionException;
> import java.util.concurrent.ExecutorService;
> import java.util.concurrent.Executors;
> import java.util.concurrent.Future;
> import java.util.concurrent.atomic.AtomicLong;
> import java.util.concurrent.locks.Lock;
> import java.util.concurrent.locks.ReentrantLock;
> import org.junit.Test;
> /**
> *
> * @author Thorsten M?ller - Thorsten.Moeller at unibas.ch
> */
> public class JavaTest
> {
> private static final int NUMBER_OF_ITERATIONS = 300000;
> private static final int NUMBER_OF_THREADS = 3;
> static final AtomicLong sequence = new AtomicLong(Long.MIN_VALUE);
> static volatile long lsequence = Long.MIN_VALUE;
> static final SortedSet<Long>  values = new ConcurrentSkipListSet<Long>();
> // static final SortedSet<Long>  values =
> Collections.synchronizedSortedSet(new TreeSet<Long>());
> static final Lock lock = new ReentrantLock();
> @Test
> public final void testCreateTimestampLock() throws InterruptedException,
> ExecutionException
> {
> final long initial = lsequence;
> testRun(true);
> assertEquals(lsequence, initial + NUMBER_OF_ITERATIONS *
> NUMBER_OF_THREADS);
> }
> @Test
> public final void testCreateTimestampAtomic() throws
> InterruptedException, ExecutionException
> {
> final long initial = sequence.get();
> testRun(false);
> assertEquals(sequence.get(), initial + NUMBER_OF_ITERATIONS *
> NUMBER_OF_THREADS);
> }
> private void testRun(final boolean locking) throws InterruptedException,
> ExecutionException
> {
> final ExecutorService es =
> Executors.newFixedThreadPool(NUMBER_OF_THREADS);
> final List<Callable<Set<Long>>>  tasks = new
> ArrayList<Callable<Set<Long>>>();
> for (int i = 0; i<  NUMBER_OF_THREADS; i++)
> {
> tasks.add(new Callable<Set<Long>>() {
> @Override public Set<Long>  call() throws Exception
> {
> final Set<Long>  seq = new LinkedHashSet<Long>();
> Long value;
> for (int j = 0; j<  NUMBER_OF_ITERATIONS; j++)
> {
> value = (locking)? createViaLock() : createViaAtomicLong();
> assertTrue(seq.add(value));
> assertFalse(values.contains(value));
> assertTrue(values.add(value));
> assertTrue(values.contains(value));
> assertTrue(values.remove(value));
> assertFalse(values.contains(value));
> }
> return seq;
> }
> });
> }
> final List<Future<Set<Long>>>  futures = es.invokeAll(tasks);
> assertEquals(NUMBER_OF_THREADS, futures.size());
> final List<Set<Long>>  results = new
> ArrayList<Set<Long>>(futures.size());
> for (final Future<Set<Long>>  future : futures)
> {
> results.add(future.get());
> }
> final Iterator<Set<Long>>  it = results.iterator();
> for (int i = 0; i<  NUMBER_OF_THREADS&&  it.hasNext(); i++)
> {
> final Set<Long>  result = it.next();
> Long previous = null;
> for (final Long l : result)
> {
> if (previous != null)
> {
> assertTrue(previous<  l);
> for (int j = i + 1; j<  NUMBER_OF_THREADS; j++)
> {
> assertFalse(results.get(j).contains(l));
> }
> }
> previous = l;
> }
> }
> }
> Long createViaLock()
> {
> lock.lock();
> try
> {
> return new Long(lsequence++);
> }
> finally
> {
> lock.unlock();
> }
> }
> Long createViaAtomicLong()
> {
> return new Long(sequence.getAndIncrement());
> }
> }
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest


From dl at cs.oswego.edu  Sat Dec  4 12:50:50 2010
From: dl at cs.oswego.edu (Doug Lea)
Date: Sat, 04 Dec 2010 12:50:50 -0500
Subject: [concurrency-interest] Bug
	in	ConcurrentSkipListSet/ConcurrentSkipListMap?
In-Reply-To: <21185AD2BA3B49499E28D1953B855CC3@cs.unibas.ch>
References: <21185AD2BA3B49499E28D1953B855CC3@cs.unibas.ch>
Message-ID: <4CFA7F7A.4040608@cs.oswego.edu>

On 12/03/10 11:58, Thorsten M?ller wrote:
> I believe I've found a bug in ConcurrentSkipListSet

Thanks for reporting this! Sorry about the problem.
In case you are curious, this was due to the lack of a
staleness check in a bypass for contains. Which as it turns
out was not worthwhile in repaired form, so the bypass
is now removed.

This will probably take a while to propagate to releases,
but in the mean time you can get the updated class now (either
standalone or as part of jsr166.jar) and run using -Xbootclass:/p
switches -- see http://gee.cs.oswego.edu/dl/concurrency-interest/index.html

-Doug




From thorsten.moeller at unibas.ch  Sat Dec  4 15:06:43 2010
From: thorsten.moeller at unibas.ch (=?iso-8859-1?Q?Thorsten_M=F6ller?=)
Date: Sat, 4 Dec 2010 21:06:43 +0100
Subject: [concurrency-interest] Bug
	in	ConcurrentSkipListSet/ConcurrentSkipListMap?
In-Reply-To: <4CFA7F7A.4040608@cs.oswego.edu>
References: <21185AD2BA3B49499E28D1953B855CC3@cs.unibas.ch>
	<4CFA7F7A.4040608@cs.oswego.edu>
Message-ID: <AF4D9FC7-DF94-4C41-853F-2F9CDDC92121@unibas.ch>

Am 04.12.2010 um 18:50 schrieb Doug Lea:

> On 12/03/10 11:58, Thorsten M?ller wrote:
>> I believe I've found a bug in ConcurrentSkipListSet
> 
> Thanks for reporting this! Sorry about the problem.
> In case you are curious, this was due to the lack of a
> staleness check in a bypass for contains. Which as it turns
> out was not worthwhile in repaired form, so the bypass
> is now removed.
Well, good to see that I was right and that it is fixed now - it was one of those problems where one starts doubting its own sanity ...


> This will probably take a while to propagate to releases,
Will it be included in the next release?


> but in the mean time you can get the updated class now (either
> standalone or as part of jsr166.jar) and run using -Xbootclass:/p
> switches -- see http://gee.cs.oswego.edu/dl/concurrency-interest/index.html
Ok.

Thanks,
Thorsten

From nader at aeinehchi.com  Mon Dec  6 16:49:05 2010
From: nader at aeinehchi.com (Nader Aeinehchi)
Date: Mon, 06 Dec 2010 22:49:05 +0100
Subject: [concurrency-interest] Fwd: Concurrent Programming in
	Java	ThirdEdition
In-Reply-To: <AANLkTimidn1GB47bjFcsOqkXo4eDSV8BvkWKfrG-nQur@mail.gmail.com>
References: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>	<NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>	<AANLkTi=aGvaY6sOCDfvFMRpCEsw4QUHSZmCbfw9Qty=o@mail.gmail.com>
	<AANLkTimidn1GB47bjFcsOqkXo4eDSV8BvkWKfrG-nQur@mail.gmail.com>
Message-ID: <4CFD5A51.4010509@aeinehchi.com>

Being a humble pupil, I highly appreciate any additional or updated book 
on Java concurrency.  In particular, I wonder if BIG GUYS can guide us 
in other less documented areas like Actors?

Thanks.

Nader Aeinehchi


On 12/02/2010 04:16 PM, Partha Pal wrote:
> David's suggestion is OK  , but that would lead to several volumes of 
> the book I guess :-) let Doug stick to Java/JVM with some hardware 
> trends and we would see few more JSRs.
>
> --Partha
>
> ---------- Forwarded message ----------
> From: *?iktor Klang* <viktor.klang at gmail.com 
> <mailto:viktor.klang at gmail.com>>
> Date: 2 December 2010 15:43
> Subject: Re: [concurrency-interest] Concurrent Programming in Java 
> ThirdEdition
> To: dholmes at ieee.org <mailto:dholmes at ieee.org>
> Cc: concurrency-interest at cs.oswego.edu 
> <mailto:concurrency-interest at cs.oswego.edu>
>
>
>
>
> On Thu, Dec 2, 2010 at 11:04 AM, David Holmes 
> <davidcholmes at aapt.net.au <mailto:davidcholmes at aapt.net.au>> wrote:
>
>     > I belive that it could be also updated by a collective work
>     (i.e. the
>     > same process that Eckel had in TIJ).
>
>     No. "Java Concurrency in Practice" is a collective work. "Concurrent
>     Programming in Java" is pure Doug Lea. ;-)
>
>
> Why not call it "JVM Concurrency" and have a general discussion on 
> concurrency, and even include some other of the JVM languages into the 
> game.
>
>
>     David Holmes
>
>     _______________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.oswego.edu
>     <mailto:Concurrency-interest at cs.oswego.edu>
>     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
>
>
> -- 
> Viktor Klang,
> Code Connoisseur
> Work: Scalable Solutions <http://www.scalablesolutions.se>
> Code: github.com/viktorklang <http://github.com/viktorklang>
> Follow: twitter.com/viktorklang <http://twitter.com/viktorklang>
> Read: klangism.tumblr.com <http://klangism.tumblr.com>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu 
> <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>    
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101206/846f0a7e/attachment.html>

From viktor.klang at gmail.com  Wed Dec  8 07:45:15 2010
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3IgS2xhbmc=?=)
Date: Wed, 8 Dec 2010 13:45:15 +0100
Subject: [concurrency-interest] Fwd: Concurrent Programming in Java
	ThirdEdition
In-Reply-To: <4CFD5A51.4010509@aeinehchi.com>
References: <AANLkTi=tXPTfOSRjzfqWCBbJ_2AeO-ALeHe_y2+y+9_E@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCMEOPIJAA.davidcholmes@aapt.net.au>
	<AANLkTi=aGvaY6sOCDfvFMRpCEsw4QUHSZmCbfw9Qty=o@mail.gmail.com>
	<AANLkTimidn1GB47bjFcsOqkXo4eDSV8BvkWKfrG-nQur@mail.gmail.com>
	<4CFD5A51.4010509@aeinehchi.com>
Message-ID: <AANLkTiktni0PN5KwDQjvv9V3AaF7QhWMOZpto7aLTSLW@mail.gmail.com>

On Mon, Dec 6, 2010 at 10:49 PM, Nader Aeinehchi <nader at aeinehchi.com>wrote:

>  Being a humble pupil, I highly appreciate any additional or updated book
> on Java concurrency.  In particular, I wonder if BIG GUYS can guide us in
> other less documented areas like Actors?
>

If you're into Scala there's this book:
http://www.artima.com/shop/actors_in_scala
I'd recommend having a look at Erlang and OTP in Action as well.




>
> Thanks.
>
> Nader Aeinehchi
>
>
>
> On 12/02/2010 04:16 PM, Partha Pal wrote:
>
> David's suggestion is OK  , but that would lead to several volumes of the
> book I guess :-) let Doug stick to Java/JVM with some hardware trends and we
> would see few more JSRs.
>
>  --Partha
>
> ---------- Forwarded message ----------
> From: ?iktor Klang <viktor.klang at gmail.com>
> Date: 2 December 2010 15:43
> Subject: Re: [concurrency-interest] Concurrent Programming in Java
> ThirdEdition
> To: dholmes at ieee.org
> Cc: concurrency-interest at cs.oswego.edu
>
>
>
>
>  On Thu, Dec 2, 2010 at 11:04 AM, David Holmes <davidcholmes at aapt.net.au>wrote:
>
>> > I belive that it could be also updated by a collective work (i.e. the
>> > same process that Eckel had in TIJ).
>>
>>  No. "Java Concurrency in Practice" is a collective work. "Concurrent
>> Programming in Java" is pure Doug Lea. ;-)
>>
>
> Why not call it "JVM Concurrency" and have a general discussion on
> concurrency, and even include some other of the JVM languages into the game.
>
>
>>
>> David Holmes
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
>
>
> --
> Viktor Klang,
> Code Connoisseur
> Work:   Scalable Solutions <http://www.scalablesolutions.se>
> Code:   github.com/viktorklang
> Follow: twitter.com/viktorklang
> Read:   klangism.tumblr.com
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
>
> _______________________________________________
> Concurrency-interest mailing listConcurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>


-- 
Viktor Klang,
Code Connoisseur
Work:   Scalable Solutions <http://www.scalablesolutions.se>
Code:   github.com/viktorklang
Follow: twitter.com/viktorklang
Read:   klangism.tumblr.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101208/ca49f453/attachment.html>

From chris.burroughs at gmail.com  Wed Dec  8 09:46:00 2010
From: chris.burroughs at gmail.com (Chris Burroughs)
Date: Wed, 08 Dec 2010 09:46:00 -0500
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <541541.49522.qm@web112101.mail.gq1.yahoo.com>
References: <541541.49522.qm@web112101.mail.gq1.yahoo.com>
Message-ID: <4CFF9A28.2020407@gmail.com>

On 12/03/2010 06:56 PM, Morgan Conrad wrote:
> I did some Googling, and searching of this mailing list, and didn't
> find anything similar.  Is this "copy-on-wrapper" idea a useful
> concept?  If so, I'd be happy to provide the code and my blog link
> where I talk about it.  Comments and feedback would be welcome, as I
> imagine there could be issues or improvements.
> 

I think this sounds useful and would be interested in looking at the
code.  While searching I found at least one COW Map in the Apache MINA code.

From morganconrad at yahoo.com  Wed Dec  8 12:30:38 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Wed, 8 Dec 2010 09:30:38 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
	(not just ArrayList)
In-Reply-To: <4CFF9A28.2020407@gmail.com>
Message-ID: <976454.27345.qm@web112117.mail.gq1.yahoo.com>

Thanks for the interest Chris!


A blog post, with links to the code, is at

http://flyingspaniel.blogspot.com/2010/12/copyonwrite-wrappers.html

The Source Code is stored on a wiki at

http://flyingspaniel.wikidot.com/cow   (click on the files link at the bottom)


I took a brief look at the org.apache.mina.util.CopyOnWriteMap.  It uses a HashMap underneath, and really does a copy on write of the underlying HashMap.

As mentioned in the blog post, strictly speaking, I do not "copy on write".  I effectively "copy the iterators on write".  In this way it supports (at least theoretically) any type of underlying List or Map, such as a TreeMap, where the order of iteration is much different than a HashMap, or some user's ReallyWeirdCustomCollection that has unusual rules for null keys or values, a custom Comparator, etc...

I believe the code to be reasonably thread-safe but can easily imagine members of this interest group finding holes or proposing improvements. :-)

I found it ironic/interesting that where java.util.concurrency uses actual classes for, say, CopyOnWriteArray, my code provides wrappers.  And, while standard java.util.Collections provides wrappers for unmodifiable collections, my code, mainly to be different and provide an alternative, has classes.


Thanks for your interest, and I hope the code or idea proves useful to somebody.  As things turned out, we didn't need to use this code, so it would be nice if somebody got some use out of it.



      

From nbronson at cs.stanford.edu  Wed Dec  8 13:12:48 2010
From: nbronson at cs.stanford.edu (Nathan Bronson)
Date: Wed, 08 Dec 2010 10:12:48 -0800
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <976454.27345.qm@web112117.mail.gq1.yahoo.com>
References: <976454.27345.qm@web112117.mail.gq1.yahoo.com>
Message-ID: <1291831968.12185.39.camel@flowertower>

For the specific case of SortedMap you might be interested in SnapTree,
a data structure I wrote that supports consistent iteration without the
need to do a full copy.  It uses a lazy copy-on-write scheme, so it is
fine to take snapshots of large maps:

http://github.com/nbronson/snaptree

There's also some code in that repository for unordered maps (using
mutable hash tries), but it is not very mature.  SnapTreeMap, on the
other hand, implements the entire ConcurrentNavigableMap interface and
passes all of the JSR166 tests.

Cheers,
  Nathan

On Wed, 2010-12-08 at 09:30 -0800, Morgan Conrad wrote:
> Thanks for the interest Chris!
> 
> 
> A blog post, with links to the code, is at
> 
> http://flyingspaniel.blogspot.com/2010/12/copyonwrite-wrappers.html
> 
> The Source Code is stored on a wiki at
> 
> http://flyingspaniel.wikidot.com/cow   (click on the files link at the bottom)
> 
> 
> I took a brief look at the org.apache.mina.util.CopyOnWriteMap.  It uses a HashMap underneath, and really does a copy on write of the underlying HashMap.
> 
> As mentioned in the blog post, strictly speaking, I do not "copy on write".  I effectively "copy the iterators on write".  In this way it supports (at least theoretically) any type of underlying List or Map, such as a TreeMap, where the order of iteration is much different than a HashMap, or some user's ReallyWeirdCustomCollection that has unusual rules for null keys or values, a custom Comparator, etc...
> 
> I believe the code to be reasonably thread-safe but can easily imagine members of this interest group finding holes or proposing improvements. :-)
> 
> I found it ironic/interesting that where java.util.concurrency uses actual classes for, say, CopyOnWriteArray, my code provides wrappers.  And, while standard java.util.Collections provides wrappers for unmodifiable collections, my code, mainly to be different and provide an alternative, has classes.
> 
> 
> Thanks for your interest, and I hope the code or idea proves useful to somebody.  As things turned out, we didn't need to use this code, so it would be nice if somebody got some use out of it.
> 
> 
> 
>       
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest



From kasper at kav.dk  Wed Dec  8 13:33:55 2010
From: kasper at kav.dk (Kasper Nielsen)
Date: Wed, 08 Dec 2010 19:33:55 +0100
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <976454.27345.qm@web112117.mail.gq1.yahoo.com>
References: <976454.27345.qm@web112117.mail.gq1.yahoo.com>
Message-ID: <4CFFCF93.8040904@kav.dk>

On 08-12-2010 18:30, Morgan Conrad wrote:

> I found it ironic/interesting that where java.util.concurrency uses
> actual classes for, say, CopyOnWriteArray, my code provides wrappers.

The purpose of CopyOnWriteArrayList is to allow for fast concurrent 
reads on the expense of fairly slow writes.

Your wrappers synchronizes all access to the underlying Map. Except for 
your iterators with takes a snapshot of the current data. 
CopyOnWriteArrayList does not take a snapshot when iterating. Instead, 
it creates a new array when somebody modifies it. Providing concurrent 
iterators access to the same underlying array.

If you were to implement something like a CopyOnWriteMap in a simple 
way. You would do something like this

class CopyOnWriteMap {
  volatile HashMap map=new HashMap();
  ReentrantLock lock = new ReentrantLock();
  public Object get(Object key) {
    return map.get(key);
  }

  public Object put(Object key, Object value) {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
      HashMap newMap=new HashMap(map);
      Object o = newMap.put(key, value)
      map=newMap;
      return o;
    } finally {
      lock.unlock();
   }
  }
   .....
}

- Kasper

From morganconrad at yahoo.com  Wed Dec  8 13:52:26 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Wed, 8 Dec 2010 10:52:26 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
	(not just ArrayList)
In-Reply-To: <4CFFCF93.8040904@kav.dk>
Message-ID: <392415.60859.qm@web112115.mail.gq1.yahoo.com>



--- On Wed, 12/8/10, Kasper Nielsen <kasper at kav.dk> wrote:

> The purpose of CopyOnWriteArrayList is to allow for fast
> concurrent reads on the expense of fairly slow writes.

I absolutely agree that, if you are happy with ArrayList behavior, which is true most of the time, that CopyOnWriteArrayList  is the way to go.  

> Your wrappers synchronizes all access to the underlying
> Map. Except for your iterators with takes a snapshot of the
> current data. CopyOnWriteArrayList does not take a snapshot
> when iterating. Instead, it creates a new array when
> somebody modifies it. Providing concurrent iterators access
> to the same underlying array.

My goals were decent speed, not ultimate speed.  Synchronizing all the access was, I believe, necessary so that the snapshot taken while iterating is up to date.  (but you guys are more expert than me on that, and see below)  It also provides a "feature" that the underlying implementation need not be synchronized - I guess this should be noted.  Since the purpose is to make the underlying map "more concurrent", this seems to me like a good, at least a reasonable, feature.

Since writes are supposedly rare for a CopyOnWrite collection, my hope is that the synchronizes will not, in practice, be much of a performance hit.  I guess if you do lots of reads they could be a problem.  

Maybe the read methods should not be synchronized???  Now that I think about it, they don't need to be synched because they don't affect the snapshot.  Right?



      

From morganconrad at yahoo.com  Wed Dec  8 13:54:56 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Wed, 8 Dec 2010 10:54:56 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
	(not just ArrayList)
In-Reply-To: <1291831968.12185.39.camel@flowertower>
Message-ID: <272479.63913.qm@web112115.mail.gq1.yahoo.com>


--- On Wed, 12/8/10, Nathan Bronson <nbronson at cs.stanford.edu> wrote:


> SnapTreeMap, on the
> other hand, implements the entire ConcurrentNavigableMap
> interface and
> passes all of the JSR166 tests.

Thanks - I'll take a look.

Could you direct me towards the JSR166 tests?  I guess my code should be tested on them.  :-)



      

From sjlee0 at gmail.com  Wed Dec  8 14:09:28 2010
From: sjlee0 at gmail.com (Sangjin Lee)
Date: Wed, 8 Dec 2010 11:09:28 -0800
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <976454.27345.qm@web112117.mail.gq1.yahoo.com>
References: <4CFF9A28.2020407@gmail.com>
	<976454.27345.qm@web112117.mail.gq1.yahoo.com>
Message-ID: <AANLkTi=TjmKwMF3DYCsANRKEuAR3rP+HnZs1ntuUoyG+@mail.gmail.com>

One of the key value propositions of the copy-on-write idea in the
traditional sense is to optimize for the read performance. If I understand
correctly, the basic idea is to copy and replace the underlying collection
every time write is performed. Thus, all read access would simply (and
concurrently) access the collection without synchronization as the
underlying collection is "read-only" in a sense.

It seems in your case all methods are synchronized (and you state as much in
the javadoc), so all read access is also synchronized and serialized. It
looks like iteration can be done concurrently and safely, but it doesn't
seem to realize the full (and main) benefit of the copy-on-write pattern...

Sangjin


On Wed, Dec 8, 2010 at 9:30 AM, Morgan Conrad <morganconrad at yahoo.com>wrote:

> Thanks for the interest Chris!
>
>
> A blog post, with links to the code, is at
>
> http://flyingspaniel.blogspot.com/2010/12/copyonwrite-wrappers.html
>
> The Source Code is stored on a wiki at
>
> http://flyingspaniel.wikidot.com/cow   (click on the files link at the
> bottom)
>
>
> I took a brief look at the org.apache.mina.util.CopyOnWriteMap.  It uses a
> HashMap underneath, and really does a copy on write of the underlying
> HashMap.
>
> As mentioned in the blog post, strictly speaking, I do not "copy on write".
>  I effectively "copy the iterators on write".  In this way it supports (at
> least theoretically) any type of underlying List or Map, such as a TreeMap,
> where the order of iteration is much different than a HashMap, or some
> user's ReallyWeirdCustomCollection that has unusual rules for null keys or
> values, a custom Comparator, etc...
>
> I believe the code to be reasonably thread-safe but can easily imagine
> members of this interest group finding holes or proposing improvements. :-)
>
> I found it ironic/interesting that where java.util.concurrency uses actual
> classes for, say, CopyOnWriteArray, my code provides wrappers.  And, while
> standard java.util.Collections provides wrappers for unmodifiable
> collections, my code, mainly to be different and provide an alternative, has
> classes.
>
>
> Thanks for your interest, and I hope the code or idea proves useful to
> somebody.  As things turned out, we didn't need to use this code, so it
> would be nice if somebody got some use out of it.
>
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101208/26294126/attachment.html>

From ben_manes at yahoo.com  Wed Dec  8 14:23:58 2010
From: ben_manes at yahoo.com (Ben Manes)
Date: Wed, 8 Dec 2010 11:23:58 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
	(not just ArrayList)
In-Reply-To: <392415.60859.qm@web112115.mail.gq1.yahoo.com>
References: <392415.60859.qm@web112115.mail.gq1.yahoo.com>
Message-ID: <427055.91047.qm@web38804.mail.mud.yahoo.com>

If you don't synchronize on reads and use wrappers then you're relying on the 
caller to be careful when using collections that mutate on access (e.g. 
LinkedHashMap). This is the same problem as Collections#synchronizedMap() and 
friends, whereas the j.u.c. collections provide a safe collection that 
encapsulates the decisions that make it thread safe. If you don't fully 
synchronize your wrapper then you enable error-prone usages, which favors 
adopting concrete implementations instead that are safe and optimized.




________________________________
From: Morgan Conrad <morganconrad at yahoo.com>
To: Concurrency-interest at cs.oswego.edu; Kasper Nielsen <kasper at kav.dk>
Sent: Wed, December 8, 2010 10:52:26 AM
Subject: Re: [concurrency-interest] CopyOnWrite for Maps and other lists (not 
just ArrayList)



--- On Wed, 12/8/10, Kasper Nielsen <kasper at kav.dk> wrote:

> The purpose of CopyOnWriteArrayList is to allow for fast
> concurrent reads on the expense of fairly slow writes.

I absolutely agree that, if you are happy with ArrayList behavior, which is true 
most of the time, that CopyOnWriteArrayList  is the way to go.  


> Your wrappers synchronizes all access to the underlying
> Map. Except for your iterators with takes a snapshot of the
> current data. CopyOnWriteArrayList does not take a snapshot
> when iterating. Instead, it creates a new array when
> somebody modifies it. Providing concurrent iterators access
> to the same underlying array.

My goals were decent speed, not ultimate speed.  Synchronizing all the access 
was, I believe, necessary so that the snapshot taken while iterating is up to 
date.  (but you guys are more expert than me on that, and see below)  It also 
provides a "feature" that the underlying implementation need not be synchronized 
- I guess this should be noted.  Since the purpose is to make the underlying map 
"more concurrent", this seems to me like a good, at least a reasonable, feature.

Since writes are supposedly rare for a CopyOnWrite collection, my hope is that 
the synchronizes will not, in practice, be much of a performance hit.  I guess 
if you do lots of reads they could be a problem.  


Maybe the read methods should not be synchronized???  Now that I think about it, 
they don't need to be synched because they don't affect the snapshot.  Right?



      
_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101208/b24fe423/attachment-0001.html>

From neil at swingler.ch  Wed Dec  8 14:38:18 2010
From: neil at swingler.ch (Neil Swingler)
Date: Wed, 08 Dec 2010 20:38:18 +0100
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <AANLkTi=TjmKwMF3DYCsANRKEuAR3rP+HnZs1ntuUoyG+@mail.gmail.com>
References: <4CFF9A28.2020407@gmail.com>
	<976454.27345.qm@web112117.mail.gq1.yahoo.com>
	<AANLkTi=TjmKwMF3DYCsANRKEuAR3rP+HnZs1ntuUoyG+@mail.gmail.com>
Message-ID: <1291837098.1838.14.camel@thinkpad>

How about using one of the pure functional immutable collections out
there like pCollections or functional-java. If you need to synchronise
concurrent access you can do that using an AtomicObject.

- Neil

On Wed, 2010-12-08 at 11:09 -0800, Sangjin Lee wrote:
> One of the key value propositions of the copy-on-write idea in the
> traditional sense is to optimize for the read performance. If I
> understand correctly, the basic idea is to copy and replace the
> underlying collection every time write is performed. Thus, all read
> access would simply (and concurrently) access the collection without
> synchronization as the underlying collection is "read-only" in a
> sense.
> 
> 
> It seems in your case all methods are synchronized (and you state as
> much in the javadoc), so all read access is also synchronized and
> serialized. It looks like iteration can be done concurrently and
> safely, but it doesn't seem to realize the full (and main) benefit of
> the copy-on-write pattern...
> 
> 
> Sangjin
> 
> 
> On Wed, Dec 8, 2010 at 9:30 AM, Morgan Conrad <morganconrad at yahoo.com>
> wrote:
>         Thanks for the interest Chris!
>         
>         
>         A blog post, with links to the code, is at
>         
>         http://flyingspaniel.blogspot.com/2010/12/copyonwrite-wrappers.html
>         
>         The Source Code is stored on a wiki at
>         
>         http://flyingspaniel.wikidot.com/cow   (click on the files
>         link at the bottom)
>         
>         
>         I took a brief look at the
>         org.apache.mina.util.CopyOnWriteMap.  It uses a HashMap
>         underneath, and really does a copy on write of the underlying
>         HashMap.
>         
>         As mentioned in the blog post, strictly speaking, I do not
>         "copy on write".  I effectively "copy the iterators on
>         write".  In this way it supports (at least theoretically) any
>         type of underlying List or Map, such as a TreeMap, where the
>         order of iteration is much different than a HashMap, or some
>         user's ReallyWeirdCustomCollection that has unusual rules for
>         null keys or values, a custom Comparator, etc...
>         
>         I believe the code to be reasonably thread-safe but can easily
>         imagine members of this interest group finding holes or
>         proposing improvements. :-)
>         
>         I found it ironic/interesting that where java.util.concurrency
>         uses actual classes for, say, CopyOnWriteArray, my code
>         provides wrappers.  And, while standard java.util.Collections
>         provides wrappers for unmodifiable collections, my code,
>         mainly to be different and provide an alternative, has
>         classes.
>         
>         
>         Thanks for your interest, and I hope the code or idea proves
>         useful to somebody.  As things turned out, we didn't need to
>         use this code, so it would be nice if somebody got some use
>         out of it.
>         
>         
>         
>         
>         
>         _______________________________________________
>         Concurrency-interest mailing list
>         Concurrency-interest at cs.oswego.edu
>         http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>         
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest



From kasper at kav.dk  Wed Dec  8 15:45:58 2010
From: kasper at kav.dk (Kasper Nielsen)
Date: Wed, 08 Dec 2010 21:45:58 +0100
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <392415.60859.qm@web112115.mail.gq1.yahoo.com>
References: <392415.60859.qm@web112115.mail.gq1.yahoo.com>
Message-ID: <4CFFEE86.5000604@kav.dk>

On 08-12-2010 19:52, Morgan Conrad wrote:
>
>
> --- On Wed, 12/8/10, Kasper Nielsen<kasper at kav.dk>  wrote:
>
>> The purpose of CopyOnWriteArrayList is to allow for fast
>> concurrent reads on the expense of fairly slow writes.
>
> I absolutely agree that, if you are happy with ArrayList behavior, which is true most of the time, that CopyOnWriteArrayList  is the way to go.
>
>> Your wrappers synchronizes all access to the underlying
>> Map. Except for your iterators with takes a snapshot of the
>> current data. CopyOnWriteArrayList does not take a snapshot
>> when iterating. Instead, it creates a new array when
>> somebody modifies it. Providing concurrent iterators access
>> to the same underlying array.
>
> My goals were decent speed, not ultimate speed.
May I ask you what use case you are trying to solve. I fail to see what 
kind of benefits your implementation provides over either
ConcurrentSkipListMap, ConcurrentHashMap or Collections.synchronizedMap?

> Maybe the read methods should not be synchronized???  Now that I think about it, they don't need to be synched because they don't affect the snapshot.  Right?
It is only your iterators that uses snapshots. So you cannot remove 
synchronized from map.get(), map.contains(), map.size()....

Cheers
   Kasper

From morganconrad at yahoo.com  Wed Dec  8 16:05:06 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Wed, 8 Dec 2010 13:05:06 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
	(not just ArrayList)
In-Reply-To: <4CFFEE86.5000604@kav.dk>
Message-ID: <869978.80388.qm@web112106.mail.gq1.yahoo.com>

BTW, thanks everybody for the feedback!


--- On Wed, 12/8/10, Kasper Nielsen <kasper at kav.dk> wrote:


> > My goals were decent speed, not ultimate speed.
> May I ask you what use case you are trying to solve. I fail
> to see what 
> kind of benefits your implementation provides over either
> ConcurrentSkipListMap, ConcurrentHashMap or
> Collections.synchronizedMap?


We were working with old code written somewhere else and *way* before java.util.concurrent.  Instead of rewriting a lot of code to use (or subclass) ConcurrentSkipListMap, I thought a wrapper would be easier.  Also, I was very familiar with CopyOnWriteArrayList, and our maps fit the "write seldom, iterate often" model.  Since most of the issues showed up as ConcurrentModificationExceptions, part of the effort was really debugging/testing to verify where they were coming from.  In some ways, these classes are a "let's try this, if it fixes the CME we know the issue, and hopefully performance is still adequate".

I'm less familiar with Concurrent maps.  I definitely did not want to be locked during iteration, because in our code that can be time consuming and affects the GUI.




      

From kasper at kav.dk  Wed Dec  8 16:22:29 2010
From: kasper at kav.dk (Kasper Nielsen)
Date: Wed, 08 Dec 2010 22:22:29 +0100
Subject: [concurrency-interest] CopyOnWrite for Maps and other lists
 (not just ArrayList)
In-Reply-To: <869978.80388.qm@web112106.mail.gq1.yahoo.com>
References: <869978.80388.qm@web112106.mail.gq1.yahoo.com>
Message-ID: <4CFFF715.805@kav.dk>

On 08-12-2010 22:05, Morgan Conrad wrote:
> BTW, thanks everybody for the feedback!
>
>
> --- On Wed, 12/8/10, Kasper Nielsen<kasper at kav.dk>  wrote:
>
>
>>> My goals were decent speed, not ultimate speed.
>> May I ask you what use case you are trying to solve. I fail
>> to see what
>> kind of benefits your implementation provides over either
>> ConcurrentSkipListMap, ConcurrentHashMap or
>> Collections.synchronizedMap?
>
>
> We were working with old code written somewhere else and *way* before java.util.concurrent.  Instead of rewriting a lot of code to use (or subclass) ConcurrentSkipListMap, I thought a wrapper would be easier.  Also, I was very familiar with CopyOnWriteArrayList, and our maps fit the "write seldom, iterate often" model.  Since most of the issues showed up as ConcurrentModificationExceptions, part of the effort was really debugging/testing to verify where they were coming from.  In some ways, these classes are a "let's try this, if it fixes the CME we know the issue, and hopefully performance is still adequate".
>
> I'm less familiar with Concurrent maps.  I definitely did not want to be locked during iteration, because in our code that can be time consuming and affects the GUI.

I would definitly go with ConcurrentHashMap then, unless your data needs 
to sorted in which case you would choose ConcurrentSkipListMap.
They both provide fast concurrent iterators and neither throws 
ConcurrentModificationException.

Cheers
   Kasper


From gkorland at gmail.com  Thu Dec  9 07:44:48 2010
From: gkorland at gmail.com (Guy Korland)
Date: Thu, 9 Dec 2010 14:44:48 +0200
Subject: [concurrency-interest] Race condition on singleton
Message-ID: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>

Hi,

We found a very strange pattern that seems like contradicting the Java
Memory Model.
It seems like a class that is maintained as singleton doesn't have its
constructor fully initialized!
See the code example bellow.

public class MyClass{

  private static final MyClass = new MyClass();

  private final HashMap map;

  private MyClass(){
      map = new HashMap();
  }

  public void put(Object k, Object v){
     map.put(k,v);
  }

  static public getMyClass(){
    return myClass;
  }
}


And when we invoke the following:

MyClass.getMyClass().put("a","b");

We get a NullPointerException on the "map.put(k,v);", meaning the map==null
!?!?

Any ideas?

Thanks,
Guy Korland
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101209/96b5eaa7/attachment.html>

From fuad at hazelcast.com  Thu Dec  9 07:58:09 2010
From: fuad at hazelcast.com (Fuad Malikov)
Date: Thu, 9 Dec 2010 14:58:09 +0200
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
References: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
Message-ID: <AANLkTinzVv88285fMNnZMOvhyybheK9JCUNTXdwOb5wP@mail.gmail.com>

The proper usage should be:

public class MyClass{

 private static class MyClassHolder {
    public static MyClass myClass = new MyClass();
}

??private final HashMap map;

??private MyClass(){
?? ???map = new HashMap();
??}

??public void put(Object k, Object v){
?? ? map.put(k,v);
??}

??static public getMyClass(){
?? ?return MyClassHolder.myClass;
??}
}

Fuad

On Thu, Dec 9, 2010 at 2:44 PM, Guy Korland <gkorland at gmail.com> wrote:
> Hi,
> We found a very strange pattern that seems like?contradicting?the Java
> Memory Model.
> It seems like a class that is?maintained?as?singleton?doesn't have its
> constructor fully?initialized!
> See the code example bellow.
> public class MyClass{
> ??private static final?MyClass = new?MyClass();
>
> ??private final HashMap map;
> ??private MyClass(){
> ?? ???map = new HashMap();
> ??}
> ??public void put(Object k, Object v){
> ?? ? map.put(k,v);
> ??}
> ??static public getMyClass(){
> ?? ?return myClass;
> ??}
> }
>
> And when we invoke the following:
> MyClass.getMyClass().put("a","b");
> We get a NullPointerException on the "map.put(k,v);", meaning the map==null
> !?!?
> Any ideas?
> Thanks,
> Guy Korland
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>



-- 

@fuadm


From gkorland at gmail.com  Thu Dec  9 08:40:24 2010
From: gkorland at gmail.com (Guy Korland)
Date: Thu, 9 Dec 2010 15:40:24 +0200
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTinzVv88285fMNnZMOvhyybheK9JCUNTXdwOb5wP@mail.gmail.com>
References: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
	<AANLkTinzVv88285fMNnZMOvhyybheK9JCUNTXdwOb5wP@mail.gmail.com>
Message-ID: <AANLkTi==Xb6yRVUma8zG3N_EMLh_TqUotuUwHJ312uzO@mail.gmail.com>

Faud,

Thanks for the quick answer, but I don't see how it should change.

Regards,
Guy Korland


On Thu, Dec 9, 2010 at 2:58 PM, Fuad Malikov <fuad at hazelcast.com> wrote:

> The proper usage should be:
>
> public class MyClass{
>
>  private static class MyClassHolder {
>    public static MyClass myClass = new MyClass();
> }
>
>   private final HashMap map;
>
>   private MyClass(){
>       map = new HashMap();
>   }
>
>   public void put(Object k, Object v){
>      map.put(k,v);
>   }
>
>   static public getMyClass(){
>     return MyClassHolder.myClass;
>   }
> }
>
> Fuad
>
> On Thu, Dec 9, 2010 at 2:44 PM, Guy Korland <gkorland at gmail.com> wrote:
> > Hi,
> > We found a very strange pattern that seems like contradicting the Java
> > Memory Model.
> > It seems like a class that is maintained as singleton doesn't have its
> > constructor fully initialized!
> > See the code example bellow.
> > public class MyClass{
> >   private static final MyClass = new MyClass();
> >
> >   private final HashMap map;
> >   private MyClass(){
> >       map = new HashMap();
> >   }
> >   public void put(Object k, Object v){
> >      map.put(k,v);
> >   }
> >   static public getMyClass(){
> >     return myClass;
> >   }
> > }
> >
> > And when we invoke the following:
> > MyClass.getMyClass().put("a","b");
> > We get a NullPointerException on the "map.put(k,v);", meaning the
> map==null
> > !?!?
> > Any ideas?
> > Thanks,
> > Guy Korland
> >
> > _______________________________________________
> > Concurrency-interest mailing list
> > Concurrency-interest at cs.oswego.edu
> > http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> >
> >
>
>
>
> --
>
> @fuadm
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101209/67ed9547/attachment-0001.html>

From forax at univ-mlv.fr  Thu Dec  9 08:39:44 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Thu, 09 Dec 2010 14:39:44 +0100
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
References: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
Message-ID: <4D00DC20.6040706@univ-mlv.fr>

Hi guy,
do you have a small Java file that reproduce the bug ?

R?mi


On 12/09/2010 01:44 PM, Guy Korland wrote:
> Hi,
>
> We found a very strange pattern that seems like contradicting the Java 
> Memory Model.
> It seems like a class that is maintained as singleton doesn't have its 
> constructor fully initialized!
> See the code example bellow.
>
> public class MyClass{
>
>   private static final MyClass = new MyClass();
>   private final HashMap map;
>
>   private MyClass(){
>       map = new HashMap();
>   }
>
>   public void put(Object k, Object v){
>      map.put(k,v);
>   }
>
>   static public getMyClass(){
>     return myClass;
>   }
> }
>
>
> And when we invoke the following:
>
> MyClass.getMyClass().put("a","b");
>
> We get a NullPointerException on the "map.put(k,v);", meaning the 
> map==null !?!?
>
> Any ideas?
>
> Thanks,
> Guy Korland
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101209/87ff45c2/attachment.html>

From hallorant at gmail.com  Thu Dec  9 09:44:49 2010
From: hallorant at gmail.com (Tim Halloran)
Date: Thu, 9 Dec 2010 09:44:49 -0500
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <4D00DC20.6040706@univ-mlv.fr>
References: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
	<4D00DC20.6040706@univ-mlv.fr>
Message-ID: <AANLkTin-rajx_gu86dYSX1K59bPbcQnaz0eJm4Swtmb9@mail.gmail.com>

On Thu, Dec 9, 2010 at 8:39 AM, R?mi Forax <forax at univ-mlv.fr> wrote:

>  Hi guy,
> do you have a small Java file that reproduce the bug ?
>

Yes that would be useful, the declaration of the "MyClass" field

private static final MyClass = new MyClass();

appears to be inconsistent with its use as "myClass"

return myClass;

Tim

>
> R?mi
>
>
>
> On 12/09/2010 01:44 PM, Guy Korland wrote:
>
>  Hi,
>
>  We found a very strange pattern that seems like contradicting the Java
> Memory Model.
> It seems like a class that is maintained as singleton doesn't have its
> constructor fully initialized!
> See the code example bellow.
>
>  public class MyClass{
>
>    private static final MyClass = new MyClass();
>
>   private final HashMap map;
>
>    private MyClass(){
>       map = new HashMap();
>   }
>
>    public void put(Object k, Object v){
>      map.put(k,v);
>   }
>
>    static public getMyClass(){
>     return myClass;
>   }
> }
>
>
>  And when we invoke the following:
>
>  MyClass.getMyClass().put("a","b");
>
>  We get a NullPointerException on the "map.put(k,v);", meaning the
> map==null !?!?
>
>  Any ideas?
>
> Thanks,
> Guy Korland
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101209/305843e5/attachment.html>

From morganconrad at yahoo.com  Thu Dec  9 12:56:56 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Thu, 9 Dec 2010 09:56:56 -0800 (PST)
Subject: [concurrency-interest] Thanks for the comments and suggestions re:
	CopyOnWrite wrappers
In-Reply-To: <mailman.3.1291914000.7802.concurrency-interest@cs.oswego.edu>
Message-ID: <998138.91173.qm@web112110.mail.gq1.yahoo.com>

They were very constructive and useful.  Attempting to summarize.

1. Several suggestions to use existing classes, some of which are less familiar, 3rd party, etc.  Good info for the future.  Interestingly, none of these classes were wrappers.  IMO, there are some cases where a wrapper is more practical, so hopefully my code will prove useful if your underlying List or Map has strange behavior, or is difficult to upgrade cause it's tangled, ancient code.

2. A lot of comments to the effect of "these aren't really CopyOnWrite".  While, at a high level, they have many of the advantages and tradeoffs of CopyOnWrite (clean iteration, optimized for write-seldom iterate-often) it is absolutely true that they aren't really CopyOnWrite, and that may confuse (or create bugs for) users who expect that behavior.  I got one comment that these are really "concurrent iteration safe" wrappers.  I like it - it also makes issue #3 (below) more clear.  So I plan to change the name and make it more clear that these aren't true CopyOnWrite.  Besides, I like the "cis" abbreviation.  Just have to invent a companion class, "Totally Reliable Abstract Numeric Synchronizer".  (that's the first, and hopefully the last, organic chemistry joke I'll ever put on the internet)


3.  Many proposals to eliminate the synchronization blocks, especially for the reads, perhaps using atomics.  This is something to look into.  There's a case to be made for what I did:

a) simple, hopefully reliable
b) "Idiot proof" - the underlying Map need not be itself synchronized.  (in my case it wasn't)  If the underlying Map is not synchronized, you'll need a wrapper to make it so, losing the speed you are trying to gain.
c) Frankly, I seldom use atomics so I didn't think of it.

Now, one thing I might do is synchronize on the underlying Collection, not my wrapper.  As I understand, the JVM is pretty smart about synching on the same object twice, so this would enhance speed if the underlying Collection were itself synched.

I'll probably leave the non-synch atomic implementation as an "exercise for the reader".


Again, thanks for the comments.






      

From davidcholmes at aapt.net.au  Thu Dec  9 17:28:04 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Fri, 10 Dec 2010 08:28:04 +1000
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTinzVv88285fMNnZMOvhyybheK9JCUNTXdwOb5wP@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCEECFIKAA.davidcholmes@aapt.net.au>

Fuad Malikov writes:
> The proper usage should be:
>
> public class MyClass{
>
>  private static class MyClassHolder {
>     public static MyClass myClass = new MyClass();
> }

You only need the holder idiom if you want lazy initialization. There's
nothing wrong with eager initialization if you know your class is always
going to be lkoaded anyway.

David Holmes

> ??private final HashMap map;
>
> ??private MyClass(){
> ?? ???map = new HashMap();
> ??}
>
> ??public void put(Object k, Object v){
> ?? ? map.put(k,v);
> ??}
>
> ??static public getMyClass(){
> ?? ?return MyClassHolder.myClass;
> ??}
> }
>
> Fuad
>
> On Thu, Dec 9, 2010 at 2:44 PM, Guy Korland <gkorland at gmail.com> wrote:
> > Hi,
> > We found a very strange pattern that seems like?contradicting?the Java
> > Memory Model.
> > It seems like a class that is?maintained?as?singleton?doesn't have its
> > constructor fully?initialized!
> > See the code example bellow.
> > public class MyClass{
> > ??private static final?MyClass = new?MyClass();
> >
> > ??private final HashMap map;
> > ??private MyClass(){
> > ?? ???map = new HashMap();
> > ??}
> > ??public void put(Object k, Object v){
> > ?? ? map.put(k,v);
> > ??}
> > ??static public getMyClass(){
> > ?? ?return myClass;
> > ??}
> > }
> >
> > And when we invoke the following:
> > MyClass.getMyClass().put("a","b");
> > We get a NullPointerException on the "map.put(k,v);", meaning
> the map==null
> > !?!?
> > Any ideas?
> > Thanks,
> > Guy Korland
> >
> > _______________________________________________
> > Concurrency-interest mailing list
> > Concurrency-interest at cs.oswego.edu
> > http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> >
> >
>
>
>
> --
>
> @fuadm
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>



From davidcholmes at aapt.net.au  Thu Dec  9 17:31:21 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Fri, 10 Dec 2010 08:31:21 +1000
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCOECFIKAA.davidcholmes@aapt.net.au>

Hi Guy,

In addition to compilable/runnable test case can you tell us which platform
and which JDK version please. Also can you test if it happens
with -Xint -client and -server.

Other than the typo in the variable name there's nothing wrong with your
code and static initialization of the class should be ensuring full
visibility.

David Holmes
  -----Original Message-----
  From: concurrency-interest-bounces at cs.oswego.edu
[mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Guy Korland
  Sent: Thursday, 9 December 2010 10:45 PM
  To: concurrency-interest
  Subject: [concurrency-interest] Race condition on singleton


  Hi,


  We found a very strange pattern that seems like contradicting the Java
Memory Model.
  It seems like a class that is maintained as singleton doesn't have its
constructor fully initialized!
  See the code example bellow.


  public class MyClass{


    private static final MyClass = new MyClass();

    private final HashMap map;


    private MyClass(){
        map = new HashMap();
    }


    public void put(Object k, Object v){
       map.put(k,v);
    }


    static public getMyClass(){
      return myClass;
    }
  }




  And when we invoke the following:


  MyClass.getMyClass().put("a","b");


  We get a NullPointerException on the "map.put(k,v);", meaning the
map==null !?!?


  Any ideas?

  Thanks,
  Guy Korland
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101210/74db70e8/attachment.html>

From gkorland at gmail.com  Fri Dec 10 10:31:11 2010
From: gkorland at gmail.com (Guy Korland)
Date: Fri, 10 Dec 2010 15:31:11 +0000
Subject: [concurrency-interest] Race condition on singleton
Message-ID: <4d0247dd.918acc0a.6d67.ffffa084@mx.google.com>

David,

we got it while running jdk6u19.
The problem is that it happened to us only once and in two different places in the code that uses the same pattern. 

Regards,
Guy Korland
-----Original Message-----
From: David Holmes
Sent:  10-12-2010, 00:31 
To: Guy Korland; concurrency-interest
Subject: RE: [concurrency-interest] Race condition on singleton


Hi Guy,

In addition to compilable/runnable test case can you tell us which platform
and which JDK version please. Also can you test if it happens
with -Xint -client and -server.

Other than the typo in the variable name there's nothing wrong with your
code and static initialization of the class should be ensuring full
visibility.

David Holmes
  -----Original Message-----
  From: concurrency-interest-bounces at cs.oswego.edu
[mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Guy Korland
  Sent: Thursday, 9 December 2010 10:45 PM
  To: concurrency-interest
  Subject: [concurrency-interest] Race condition on singleton


  Hi,


  We found a very strange pattern that seems like contradicting the Java
Memory Model.
  It seems like a class that is maintained as singleton doesn't have its
constructor fully initialized!
  See the code example bellow.


  public class MyClass{


    private static final MyClass = new MyClass();

    private final HashMap map;


    private MyClass(){
        map = new HashMap();
    }


    public void put(Object k, Object v){
       map.put(k,v);
    }


    static public getMyClass(){
      return myClass;
    }
  }




  And when we invoke the following:


  MyClass.getMyClass().put("a","b");


  We get a NullPointerException on the "map.put(k,v);", meaning the
map==null !?!?


  Any ideas?

  Thanks,
  Guy Korland



From mvillalobos at kineteque.com  Fri Dec 10 20:30:02 2010
From: mvillalobos at kineteque.com (Marco Villalobos)
Date: Fri, 10 Dec 2010 17:30:02 -0800
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
Message-ID: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>

QUESTION:

Can somebody please give me guidance on how I could possibly create a
suite of test cases that run in TestNG or JUnit that can prove the
thread unsafeness of this bad practice?

BACKGROUND

I'm trying to convince my colleague that starting a thread within a
constructor compromises thread safety.

I understand that, "publishing objects before they are fully
constructed can compromise thread safety."

But I would like an elaboration on how it compromises thread safety?

I understand that publishing the "this" reference would break
encapsulation, allowing other classes and threads to potentially
change the state of my object in an unthread safe manner.

But more specifically, what are the side affects of an object not
being fully constructed, yet published through a thread.start in a
constructor.

Here is an example of how "not to do things".

public class DontDoThis {

  public synchronized void mutateMe() {
      // ... I'm mutating this...
  }

  public final Thread t;

  public DontDoThis() {
      t = new Thread(new Runnable() {
          public void run() {
              mutateMe();
          }
      });
      t.start();   //     BAD BAD BAD Don't do this.
  }
}

Can somebody please give me guidance on how I could possibly create a
suite of test cases that run in TestNG or JUnit that can prove the
thread unsafeness of this bad practice?

I want to make a short presentation on the issue.  If I provide a
compilable and running test case, that would be amazing :)

-Marco

From davidcholmes at aapt.net.au  Fri Dec 10 20:52:22 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Sat, 11 Dec 2010 11:52:22 +1000
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
In-Reply-To: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCIECOIKAA.davidcholmes@aapt.net.au>

Hi Marco,

There are some obviously silly things you can do with this pattern eg:

class DontDoThis {
   Object field1;
   DontDoThis() {
     (new Thread() { public void run() {
          int x = field1.hashcode(); // potential NPE
          ...
      }}).start();
      field1 = new Object();
   }
}

This the classic example of not being thread-safe, or rather of being racy.
The thread can access default initialized object-state.

But if you start the thread at the end of the constructor there is nothing
that can go wrong for this class - there is a happens-before edge between
starting a thread and execution of its run method. So no races and no
visibility issues: all state is fully initialized.

But if you then subclass that "safe" class you could again get racy
behaviour if the run method invokes a virtual method that is overridden in
the subclass and which accesses additional state - which can only be
initialized after the superclass constructor has run.

For the most part though such constructs are not considered good design -
particularly when it comes to threading - because only the simplest of
designs can get away without some form of lifecycle control, for which it is
far better to separate construction of the service from the starting of the
service. There may be additional services that need to be configured before
this service should be started. (Imagine a car that automatically started
the engine as soon as you sat in the drivers seat and closed the door! -
occasionally convenient, but potentially quite hazardous)

Given it is a poor design approach for a service, and it can easily
introduce race conditions, best practice says "don't do this".

HTH

David Holmes

> -----Original Message-----
> From: concurrency-interest-bounces at cs.oswego.edu
> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Marco
> Villalobos
> Sent: Saturday, 11 December 2010 11:30 AM
> To: concurrency-interest at cs.oswego.edu
> Subject: [concurrency-interest] Starting a Thread within a
> constructor,what can go wrong?
>
>
> QUESTION:
>
> Can somebody please give me guidance on how I could possibly create a
> suite of test cases that run in TestNG or JUnit that can prove the
> thread unsafeness of this bad practice?
>
> BACKGROUND
>
> I'm trying to convince my colleague that starting a thread within a
> constructor compromises thread safety.
>
> I understand that, "publishing objects before they are fully
> constructed can compromise thread safety."
>
> But I would like an elaboration on how it compromises thread safety?
>
> I understand that publishing the "this" reference would break
> encapsulation, allowing other classes and threads to potentially
> change the state of my object in an unthread safe manner.
>
> But more specifically, what are the side affects of an object not
> being fully constructed, yet published through a thread.start in a
> constructor.
>
> Here is an example of how "not to do things".
>
> public class DontDoThis {
>
>   public synchronized void mutateMe() {
>       // ... I'm mutating this...
>   }
>
>   public final Thread t;
>
>   public DontDoThis() {
>       t = new Thread(new Runnable() {
>           public void run() {
>               mutateMe();
>           }
>       });
>       t.start();   //     BAD BAD BAD Don't do this.
>   }
> }
>
> Can somebody please give me guidance on how I could possibly create a
> suite of test cases that run in TestNG or JUnit that can prove the
> thread unsafeness of this bad practice?
>
> I want to make a short presentation on the issue.  If I provide a
> compilable and running test case, that would be amazing :)
>
> -Marco
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From mvillalobos at kineteque.com  Fri Dec 10 21:51:37 2010
From: mvillalobos at kineteque.com (Marco Villalobos)
Date: Fri, 10 Dec 2010 18:51:37 -0800
Subject: [concurrency-interest] Starting a Thread within a constructor,
 what can go wrong?
In-Reply-To: <NFBBKALFDCPFIDBNKAPCIECOIKAA.davidcholmes@aapt.net.au>
References: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCIECOIKAA.davidcholmes@aapt.net.au>
Message-ID: <AANLkTi=CKS6-cdTpk3R6ahA-LGdAAvYJo=tJP4Ntkb5P@mail.gmail.com>

I see.  David, thank you for the quick reply.

Goetz said in his excellent book, Concurrency in Practice that,
"publishing objects before they are fully constructed can compromise
thread safety."  That "publishing an object from within its
constructor can publish an incompletely constructed object.  This is
true even if the publication is the last statement in the
constructor."

This language really makes me believe that such an example would break
concurrency.

However, you're stating that if a programmer pays careful attention to
the "happens-before" semantics, then thread safety could be insured
(even though it is not a good practice).

Earlier today, posted the same question to Brian Goetz.  He replied stating:

QUOTE

"The biggest risk is that allowing the 'this' object to escape during
construction voids all the final field visibility guarantees, which
means that immutable objects can be observed to changed their value
after construction, objects can be observed to not respect invariants
set up in constructors, etc.)

Starting a thread from within a constructor can sometimes be harmless,
but most use cases that call for starting a thread from the
constructor also call for the run() method of that thread to access
the state of the object being constructed, and in that case all bets
are off as to the validity of the state it sees.  So starting a thread
from a constructor is a prime vector through which 'this' can escape
construction and all sorts of weird things can ensue."

END QUOTE

I'll try writing test cases to prove that even happens-before
semantics are broken in this situation.  I'll pay attention to the
immutable fields, and even add a thread sleep to see if that show this
practice indeed does break thread-safety.

Hopefully my exercise is not a useless one.

-Marco


- Show quoted text -

On Fri, Dec 10, 2010 at 5:52 PM, David Holmes <davidcholmes at aapt.net.au> wrote:
> Hi Marco,
>
> There are some obviously silly things you can do with this pattern eg:
>
> class DontDoThis {
> ? Object field1;
> ? DontDoThis() {
> ? ? (new Thread() { public void run() {
> ? ? ? ? ?int x = field1.hashcode(); // potential NPE
> ? ? ? ? ?...
> ? ? ?}}).start();
> ? ? ?field1 = new Object();
> ? }
> }
>
> This the classic example of not being thread-safe, or rather of being racy.
> The thread can access default initialized object-state.
>
> But if you start the thread at the end of the constructor there is nothing
> that can go wrong for this class - there is a happens-before edge between
> starting a thread and execution of its run method. So no races and no
> visibility issues: all state is fully initialized.
>
> But if you then subclass that "safe" class you could again get racy
> behaviour if the run method invokes a virtual method that is overridden in
> the subclass and which accesses additional state - which can only be
> initialized after the superclass constructor has run.
>
> For the most part though such constructs are not considered good design -
> particularly when it comes to threading - because only the simplest of
> designs can get away without some form of lifecycle control, for which it is
> far better to separate construction of the service from the starting of the
> service. There may be additional services that need to be configured before
> this service should be started. (Imagine a car that automatically started
> the engine as soon as you sat in the drivers seat and closed the door! -
> occasionally convenient, but potentially quite hazardous)
>
> Given it is a poor design approach for a service, and it can easily
> introduce race conditions, best practice says "don't do this".
>
> HTH
>
> David Holmes
>
>> -----Original Message-----
>> From: concurrency-interest-bounces at cs.oswego.edu
>> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Marco
>> Villalobos
>> Sent: Saturday, 11 December 2010 11:30 AM
>> To: concurrency-interest at cs.oswego.edu
>> Subject: [concurrency-interest] Starting a Thread within a
>> constructor,what can go wrong?
>>
>>
>> QUESTION:
>>
>> Can somebody please give me guidance on how I could possibly create a
>> suite of test cases that run in TestNG or JUnit that can prove the
>> thread unsafeness of this bad practice?
>>
>> BACKGROUND
>>
>> I'm trying to convince my colleague that starting a thread within a
>> constructor compromises thread safety.
>>
>> I understand that, "publishing objects before they are fully
>> constructed can compromise thread safety."
>>
>> But I would like an elaboration on how it compromises thread safety?
>>
>> I understand that publishing the "this" reference would break
>> encapsulation, allowing other classes and threads to potentially
>> change the state of my object in an unthread safe manner.
>>
>> But more specifically, what are the side affects of an object not
>> being fully constructed, yet published through a thread.start in a
>> constructor.
>>
>> Here is an example of how "not to do things".
>>
>> public class DontDoThis {
>>
>> ? public synchronized void mutateMe() {
>> ? ? ? // ... I'm mutating this...
>> ? }
>>
>> ? public final Thread t;
>>
>> ? public DontDoThis() {
>> ? ? ? t = new Thread(new Runnable() {
>> ? ? ? ? ? public void run() {
>> ? ? ? ? ? ? ? mutateMe();
>> ? ? ? ? ? }
>> ? ? ? });
>> ? ? ? t.start(); ? // ? ? BAD BAD BAD Don't do this.
>> ? }
>> }
>>
>> Can somebody please give me guidance on how I could possibly create a
>> suite of test cases that run in TestNG or JUnit that can prove the
>> thread unsafeness of this bad practice?
>>
>> I want to make a short presentation on the issue. ?If I provide a
>> compilable and running test case, that would be amazing :)
>>
>> -Marco
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
>


From davidcholmes at aapt.net.au  Fri Dec 10 22:06:45 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Sat, 11 Dec 2010 13:06:45 +1000
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
In-Reply-To: <AANLkTi=CKS6-cdTpk3R6ahA-LGdAAvYJo=tJP4Ntkb5P@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCKECPIKAA.davidcholmes@aapt.net.au>

Hi Marco,

Brian is speaking in general terms regarding "publishing an object from
within its constructor", and perhaps overlooking the happens-before ordering
that Thread.start provides. Starting a thread in a constructor can be
correct and harmless (in very limited contexts), but it can also be
neither - so unless you want to establish proofs of correctness/safety and
remember to use final classes to avoid the subclass issue then just "don't
do it". It's easier to teach people not to do this than teach them to
understand the exact circumstances when it can be safe.

Cheers,
David Holmes

> -----Original Message-----
> From: Marco Villalobos [mailto:mvillalobos at kineteque.com]
> Sent: Saturday, 11 December 2010 12:52 PM
> To: dholmes at ieee.org
> Cc: concurrency-interest at cs.oswego.edu
> Subject: Re: [concurrency-interest] Starting a Thread within a
> constructor,what can go wrong?
>
>
> I see.  David, thank you for the quick reply.
>
> Goetz said in his excellent book, Concurrency in Practice that,
> "publishing objects before they are fully constructed can compromise
> thread safety."  That "publishing an object from within its
> constructor can publish an incompletely constructed object.  This is
> true even if the publication is the last statement in the
> constructor."
>
> This language really makes me believe that such an example would break
> concurrency.
>
> However, you're stating that if a programmer pays careful attention to
> the "happens-before" semantics, then thread safety could be insured
> (even though it is not a good practice).
>
> Earlier today, posted the same question to Brian Goetz.  He
> replied stating:
>
> QUOTE
>
> "The biggest risk is that allowing the 'this' object to escape during
> construction voids all the final field visibility guarantees, which
> means that immutable objects can be observed to changed their value
> after construction, objects can be observed to not respect invariants
> set up in constructors, etc.)
>
> Starting a thread from within a constructor can sometimes be harmless,
> but most use cases that call for starting a thread from the
> constructor also call for the run() method of that thread to access
> the state of the object being constructed, and in that case all bets
> are off as to the validity of the state it sees.  So starting a thread
> from a constructor is a prime vector through which 'this' can escape
> construction and all sorts of weird things can ensue."
>
> END QUOTE
>
> I'll try writing test cases to prove that even happens-before
> semantics are broken in this situation.  I'll pay attention to the
> immutable fields, and even add a thread sleep to see if that show this
> practice indeed does break thread-safety.
>
> Hopefully my exercise is not a useless one.
>
> -Marco
>
>
> - Show quoted text -
>
> On Fri, Dec 10, 2010 at 5:52 PM, David Holmes
> <davidcholmes at aapt.net.au> wrote:
> > Hi Marco,
> >
> > There are some obviously silly things you can do with this pattern eg:
> >
> > class DontDoThis {
> > ? Object field1;
> > ? DontDoThis() {
> > ? ? (new Thread() { public void run() {
> > ? ? ? ? ?int x = field1.hashcode(); // potential NPE
> > ? ? ? ? ?...
> > ? ? ?}}).start();
> > ? ? ?field1 = new Object();
> > ? }
> > }
> >
> > This the classic example of not being thread-safe, or rather of
> being racy.
> > The thread can access default initialized object-state.
> >
> > But if you start the thread at the end of the constructor there
> is nothing
> > that can go wrong for this class - there is a happens-before
> edge between
> > starting a thread and execution of its run method. So no races and no
> > visibility issues: all state is fully initialized.
> >
> > But if you then subclass that "safe" class you could again get racy
> > behaviour if the run method invokes a virtual method that is
> overridden in
> > the subclass and which accesses additional state - which can only be
> > initialized after the superclass constructor has run.
> >
> > For the most part though such constructs are not considered
> good design -
> > particularly when it comes to threading - because only the simplest of
> > designs can get away without some form of lifecycle control,
> for which it is
> > far better to separate construction of the service from the
> starting of the
> > service. There may be additional services that need to be
> configured before
> > this service should be started. (Imagine a car that
> automatically started
> > the engine as soon as you sat in the drivers seat and closed the door! -
> > occasionally convenient, but potentially quite hazardous)
> >
> > Given it is a poor design approach for a service, and it can easily
> > introduce race conditions, best practice says "don't do this".
> >
> > HTH
> >
> > David Holmes
> >
> >> -----Original Message-----
> >> From: concurrency-interest-bounces at cs.oswego.edu
> >> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Marco
> >> Villalobos
> >> Sent: Saturday, 11 December 2010 11:30 AM
> >> To: concurrency-interest at cs.oswego.edu
> >> Subject: [concurrency-interest] Starting a Thread within a
> >> constructor,what can go wrong?
> >>
> >>
> >> QUESTION:
> >>
> >> Can somebody please give me guidance on how I could possibly create a
> >> suite of test cases that run in TestNG or JUnit that can prove the
> >> thread unsafeness of this bad practice?
> >>
> >> BACKGROUND
> >>
> >> I'm trying to convince my colleague that starting a thread within a
> >> constructor compromises thread safety.
> >>
> >> I understand that, "publishing objects before they are fully
> >> constructed can compromise thread safety."
> >>
> >> But I would like an elaboration on how it compromises thread safety?
> >>
> >> I understand that publishing the "this" reference would break
> >> encapsulation, allowing other classes and threads to potentially
> >> change the state of my object in an unthread safe manner.
> >>
> >> But more specifically, what are the side affects of an object not
> >> being fully constructed, yet published through a thread.start in a
> >> constructor.
> >>
> >> Here is an example of how "not to do things".
> >>
> >> public class DontDoThis {
> >>
> >> ? public synchronized void mutateMe() {
> >> ? ? ? // ... I'm mutating this...
> >> ? }
> >>
> >> ? public final Thread t;
> >>
> >> ? public DontDoThis() {
> >> ? ? ? t = new Thread(new Runnable() {
> >> ? ? ? ? ? public void run() {
> >> ? ? ? ? ? ? ? mutateMe();
> >> ? ? ? ? ? }
> >> ? ? ? });
> >> ? ? ? t.start(); ? // ? ? BAD BAD BAD Don't do this.
> >> ? }
> >> }
> >>
> >> Can somebody please give me guidance on how I could possibly create a
> >> suite of test cases that run in TestNG or JUnit that can prove the
> >> thread unsafeness of this bad practice?
> >>
> >> I want to make a short presentation on the issue. ?If I provide a
> >> compilable and running test case, that would be amazing :)
> >>
> >> -Marco
> >> _______________________________________________
> >> Concurrency-interest mailing list
> >> Concurrency-interest at cs.oswego.edu
> >> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> >>
> >
> >
>



From hallorant at gmail.com  Fri Dec 10 22:12:05 2010
From: hallorant at gmail.com (Tim Halloran)
Date: Fri, 10 Dec 2010 22:12:05 -0500
Subject: [concurrency-interest] Starting a Thread within a constructor,
 what can go wrong?
In-Reply-To: <AANLkTi=CKS6-cdTpk3R6ahA-LGdAAvYJo=tJP4Ntkb5P@mail.gmail.com>
References: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCIECOIKAA.davidcholmes@aapt.net.au>
	<AANLkTi=CKS6-cdTpk3R6ahA-LGdAAvYJo=tJP4Ntkb5P@mail.gmail.com>
Message-ID: <AANLkTinHh0GbvYA+iiTirWyqRwFBDOOkrAbN+F1vvACo@mail.gmail.com>

On Fri, Dec 10, 2010 at 9:51 PM, Marco Villalobos <mvillalobos at kineteque.com
> wrote:

> I see.  David, thank you for the quick reply.
>
> Goetz said in his excellent book, Concurrency in Practice that,
> "publishing objects before they are fully constructed can compromise
> thread safety."  That "publishing an object from within its
> constructor can publish an incompletely constructed object.  This is
> true even if the publication is the last statement in the
> constructor."
>
> This language really makes me believe that such an example would break
> concurrency.
>
> However, you're stating that if a programmer pays careful attention to
> the "happens-before" semantics, then thread safety could be insured
> (even though it is not a good practice).
>

This is true.


>
> Earlier today, posted the same question to Brian Goetz.  He replied
> stating:
>
> QUOTE
>
> "The biggest risk is that allowing the 'this' object to escape during
> construction voids all the final field visibility guarantees, which
> means that immutable objects can be observed to changed their value
> after construction, objects can be observed to not respect invariants
> set up in constructors, etc.)
>
> Starting a thread from within a constructor can sometimes be harmless,
> but most use cases that call for starting a thread from the
> constructor also call for the run() method of that thread to access
> the state of the object being constructed, and in that case all bets
> are off as to the validity of the state it sees.  So starting a thread
> from a constructor is a prime vector through which 'this' can escape
> construction and all sorts of weird things can ensue."
>
> END QUOTE
>
> I'll try writing test cases to prove that even happens-before
> semantics are broken in this situation.  I'll pay attention to the
> immutable fields, and even add a thread sleep to see if that show this
> practice indeed does break thread-safety.
>
> Hopefully my exercise is not a useless one.
>

Testing may not be fruitful in this situation as some VM implementations are
conservative in their implementation of the Java memory model and they mask
some "bad things" from happening. Change the hardware or the VM version and
intermittent failures may begin. As you're quoting Brian, I'll continue,
have a look at
http://concurrency.markmail.org/message/zts4ffuauk7gqq4q?q=running+with+scissors

Is there some reason that your constructors that start threads can't be
refactored into static factory methods that construct the instance then
start the thread?

For example,

class Foo ... {
  public Foo() {
    // init stuff
    // start thread
  }
}

becomes

class Foo ... {
  private Foo() {
    // init stuff
  }

  public static Foo getInstance() {
    final Foo fooInstance = new Foo();
    // start thread
    return fooInstance;
  }
}


> -Marco
>
>
> - Show quoted text -
>
> On Fri, Dec 10, 2010 at 5:52 PM, David Holmes <davidcholmes at aapt.net.au>
> wrote:
> > Hi Marco,
> >
> > There are some obviously silly things you can do with this pattern eg:
> >
> > class DontDoThis {
> >   Object field1;
> >   DontDoThis() {
> >     (new Thread() { public void run() {
> >          int x = field1.hashcode(); // potential NPE
> >          ...
> >      }}).start();
> >      field1 = new Object();
> >   }
> > }
> >
> > This the classic example of not being thread-safe, or rather of being
> racy.
> > The thread can access default initialized object-state.
> >
> > But if you start the thread at the end of the constructor there is
> nothing
> > that can go wrong for this class - there is a happens-before edge between
> > starting a thread and execution of its run method. So no races and no
> > visibility issues: all state is fully initialized.
> >
> > But if you then subclass that "safe" class you could again get racy
> > behaviour if the run method invokes a virtual method that is overridden
> in
> > the subclass and which accesses additional state - which can only be
> > initialized after the superclass constructor has run.
> >
> > For the most part though such constructs are not considered good design -
> > particularly when it comes to threading - because only the simplest of
> > designs can get away without some form of lifecycle control, for which it
> is
> > far better to separate construction of the service from the starting of
> the
> > service. There may be additional services that need to be configured
> before
> > this service should be started. (Imagine a car that automatically started
> > the engine as soon as you sat in the drivers seat and closed the door! -
> > occasionally convenient, but potentially quite hazardous)
> >
> > Given it is a poor design approach for a service, and it can easily
> > introduce race conditions, best practice says "don't do this".
> >
> > HTH
> >
> > David Holmes
> >
> >> -----Original Message-----
> >> From: concurrency-interest-bounces at cs.oswego.edu
> >> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Marco
> >> Villalobos
> >> Sent: Saturday, 11 December 2010 11:30 AM
> >> To: concurrency-interest at cs.oswego.edu
> >> Subject: [concurrency-interest] Starting a Thread within a
> >> constructor,what can go wrong?
> >>
> >>
> >> QUESTION:
> >>
> >> Can somebody please give me guidance on how I could possibly create a
> >> suite of test cases that run in TestNG or JUnit that can prove the
> >> thread unsafeness of this bad practice?
> >>
> >> BACKGROUND
> >>
> >> I'm trying to convince my colleague that starting a thread within a
> >> constructor compromises thread safety.
> >>
> >> I understand that, "publishing objects before they are fully
> >> constructed can compromise thread safety."
> >>
> >> But I would like an elaboration on how it compromises thread safety?
> >>
> >> I understand that publishing the "this" reference would break
> >> encapsulation, allowing other classes and threads to potentially
> >> change the state of my object in an unthread safe manner.
> >>
> >> But more specifically, what are the side affects of an object not
> >> being fully constructed, yet published through a thread.start in a
> >> constructor.
> >>
> >> Here is an example of how "not to do things".
> >>
> >> public class DontDoThis {
> >>
> >>   public synchronized void mutateMe() {
> >>       // ... I'm mutating this...
> >>   }
> >>
> >>   public final Thread t;
> >>
> >>   public DontDoThis() {
> >>       t = new Thread(new Runnable() {
> >>           public void run() {
> >>               mutateMe();
> >>           }
> >>       });
> >>       t.start();   //     BAD BAD BAD Don't do this.
> >>   }
> >> }
> >>
> >> Can somebody please give me guidance on how I could possibly create a
> >> suite of test cases that run in TestNG or JUnit that can prove the
> >> thread unsafeness of this bad practice?
> >>
> >> I want to make a short presentation on the issue.  If I provide a
> >> compilable and running test case, that would be amazing :)
> >>
> >> -Marco
> >> _______________________________________________
> >> Concurrency-interest mailing list
> >> Concurrency-interest at cs.oswego.edu
> >> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> >>
> >
> >
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101210/0787d3dd/attachment-0001.html>

From joe.bowbeer at gmail.com  Fri Dec 10 22:24:20 2010
From: joe.bowbeer at gmail.com (Joe Bowbeer)
Date: Fri, 10 Dec 2010 19:24:20 -0800
Subject: [concurrency-interest] Starting a Thread within a constructor,
 what can go wrong?
In-Reply-To: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
References: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
Message-ID: <AANLkTikeBMzck4SSJiUxBGaDq=qWYCRQWQ0Ga1PLdgNm@mail.gmail.com>

Marco,

In addition to the other excellent replies, I'll add my $0.02

The original SwingWorker, which is a class designed for subclassing, started
its worker thread in its constructor and this led to many problems in
practice.

Another problem with starting a thread in a constructor is that it is not
expected.  My expectation is that a constructor merely creates.  If I want
action, I'll call a method.

In addition, I would ask why you're even creating a thread?  Consider
creating a task instead and using an executor.

On Fri, Dec 10, 2010 at 5:30 PM, Marco Villalobos wrote:

> QUESTION:
>
> Can somebody please give me guidance on how I could possibly create a
> suite of test cases that run in TestNG or JUnit that can prove the
> thread unsafeness of this bad practice?
>
> BACKGROUND
>
> I'm trying to convince my colleague that starting a thread within a
> constructor compromises thread safety.
>
> I understand that, "publishing objects before they are fully
> constructed can compromise thread safety."
>
> But I would like an elaboration on how it compromises thread safety?
>
> I understand that publishing the "this" reference would break
> encapsulation, allowing other classes and threads to potentially
> change the state of my object in an unthread safe manner.
>
> But more specifically, what are the side affects of an object not
> being fully constructed, yet published through a thread.start in a
> constructor.
>
> Here is an example of how "not to do things".
>
> public class DontDoThis {
>
>  public synchronized void mutateMe() {
>      // ... I'm mutating this...
>  }
>
>  public final Thread t;
>
>  public DontDoThis() {
>      t = new Thread(new Runnable() {
>          public void run() {
>              mutateMe();
>          }
>      });
>      t.start();   //     BAD BAD BAD Don't do this.
>  }
> }
>
> Can somebody please give me guidance on how I could possibly create a
> suite of test cases that run in TestNG or JUnit that can prove the
> thread unsafeness of this bad practice?
>
> I want to make a short presentation on the issue.  If I provide a
> compilable and running test case, that would be amazing :)
>
> -Marco
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101210/0bc5d030/attachment.html>

From mvillalobos at kineteque.com  Fri Dec 10 22:29:17 2010
From: mvillalobos at kineteque.com (Marco Villalobos)
Date: Fri, 10 Dec 2010 19:29:17 -0800
Subject: [concurrency-interest] Starting a Thread within a constructor,
 what can go wrong?
In-Reply-To: <AANLkTikeBMzck4SSJiUxBGaDq=qWYCRQWQ0Ga1PLdgNm@mail.gmail.com>
References: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
	<AANLkTikeBMzck4SSJiUxBGaDq=qWYCRQWQ0Ga1PLdgNm@mail.gmail.com>
Message-ID: <AANLkTi=2cYAFU6D3MEUvdNo4r+u1G1O14WjsxW5VnWBg@mail.gmail.com>

I am for the best practice of NOT starting a thread within a constructor.

I also have shown that if I follow a bad practice by starting a thread
within a constructor then it is safe under simple circumstances (as
David Holmes mentioned in his second reply).

However, what I am seeking to do is provide an example that proves
that is NOT safe (even if it is the last statement in a constructor).

I appreciate everybody's help, I'll publish my results and test cases
with an outside link soon.

Again, thank you for all the help.

From mvillalobos at kineteque.com  Fri Dec 10 22:32:08 2010
From: mvillalobos at kineteque.com (Marco Villalobos)
Date: Fri, 10 Dec 2010 19:32:08 -0800
Subject: [concurrency-interest] Starting a Thread within a constructor,
 what can go wrong?
In-Reply-To: <AANLkTi=2cYAFU6D3MEUvdNo4r+u1G1O14WjsxW5VnWBg@mail.gmail.com>
References: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
	<AANLkTikeBMzck4SSJiUxBGaDq=qWYCRQWQ0Ga1PLdgNm@mail.gmail.com>
	<AANLkTi=2cYAFU6D3MEUvdNo4r+u1G1O14WjsxW5VnWBg@mail.gmail.com>
Message-ID: <AANLkTikZrghi84KLsi4g+q-rF5HN9HMHuODquT9OL4R8@mail.gmail.com>

I should also clarify that I'm trying to show the behavior in the most
recent Java Language Specification.

Maybe it doesn't help that my Machine is a 2010 Intel Mac Book Pro though.

From davidcholmes at aapt.net.au  Fri Dec 10 23:05:32 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Sat, 11 Dec 2010 14:05:32 +1000
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
In-Reply-To: <AANLkTi=2cYAFU6D3MEUvdNo4r+u1G1O14WjsxW5VnWBg@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCMEDAIKAA.davidcholmes@aapt.net.au>

> I am for the best practice of NOT starting a thread within a constructor.
>
> I also have shown that if I follow a bad practice by starting a thread
> within a constructor then it is safe under simple circumstances (as
> David Holmes mentioned in his second reply).
>
> However, what I am seeking to do is provide an example that proves
> that is NOT safe (even if it is the last statement in a constructor).

In that context it can only become unsafe (under the assumption that
starting the thread after the constructor would be considered safe) when a
subclass is involved. Else for all other intents and purposes the start()
can be considered to have occurred after the constructor completed.

> I appreciate everybody's help, I'll publish my results and test cases
> with an outside link soon.

Tests to prove the presence of a race condition are notoriously difficult to
write and impossible to write reliably.

Cheers,
David Holmes

> Again, thank you for all the help.
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From alexdmiller at yahoo.com  Sat Dec 11 00:03:52 2010
From: alexdmiller at yahoo.com (Alex Miller)
Date: Fri, 10 Dec 2010 21:03:52 -0800 (PST)
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
In-Reply-To: <mailman.39.1292037128.3240.concurrency-interest@cs.oswego.edu>
References: <mailman.39.1292037128.3240.concurrency-interest@cs.oswego.edu>
Message-ID: <217210.63069.qm@web32507.mail.mud.yahoo.com>

I've got a couple examples of this in this presentation:

http://www.slideshare.net/alexmiller/java-concurrency-gotchas-3666977

on slides 39-40.  The cache background cleaner example on slide 40 is based on 
some actual bad code that I wrote that did sometimes throw NPEs when the 
background thread saw partially constructed class state.  I'm sure with some 
timing nudges or enough reps that you could coax it into regular failure.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101210/bb822993/attachment.html>

From davidcholmes at aapt.net.au  Sat Dec 11 00:43:26 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Sat, 11 Dec 2010 15:43:26 +1000
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
In-Reply-To: <217210.63069.qm@web32507.mail.mud.yahoo.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCIEDBIKAA.davidcholmes@aapt.net.au>

I assume there's some initialization code missing from the Cache class as
the code as shown is safe.

David Holmes
  -----Original Message-----
  From: concurrency-interest-bounces at cs.oswego.edu
[mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Alex Miller
  Sent: Saturday, 11 December 2010 3:04 PM
  To: concurrency-interest at cs.oswego.edu
  Subject: Re: [concurrency-interest] Starting a Thread within a
constructor,what can go wrong?


  I've got a couple examples of this in this presentation:


  http://www.slideshare.net/alexmiller/java-concurrency-gotchas-3666977


  on slides 39-40.  The cache background cleaner example on slide 40 is
based on some actual bad code that I wrote that did sometimes throw NPEs
when the background thread saw partially constructed class state.  I'm sure
with some timing nudges or enough reps that you could coax it into regular
failure.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101211/962fafcb/attachment.html>

From gregg at cytetech.com  Sat Dec 11 15:24:18 2010
From: gregg at cytetech.com (Gregg Wonderly)
Date: Sat, 11 Dec 2010 14:24:18 -0600
Subject: [concurrency-interest] Starting a Thread within a constructor,
 what can go wrong?
In-Reply-To: <AANLkTikeBMzck4SSJiUxBGaDq=qWYCRQWQ0Ga1PLdgNm@mail.gmail.com>
References: <AANLkTikrfe03a_ygang9AvFZLOMh8RkrNFu6MpOpjzWD@mail.gmail.com>
	<AANLkTikeBMzck4SSJiUxBGaDq=qWYCRQWQ0Ga1PLdgNm@mail.gmail.com>
Message-ID: <4D03DDF2.1010903@cytetech.com>

One of the more problematic patterns is doing

public MyClass implements Runnable {
	private final SomeClass val = new SomeClass();
	public MyClass() {
		new Thread(this).start();
	}
	public void run() {
		val.doSomething();
	}
}

The initialized final value will not be visible until the constructor completes 
in my experience, and if you instead do

public MyClass implements Runnable {
	private final SomeClass val;
	public MyClass() {
		val = new SomeClass();
		new Thread(this).start();
	}
	public void run() {
		val.doSomething();
	}
}

Then val is visible when the thread starts because of the happens before that 
was alluded to before.

Gregg Wonderly

On 12/10/2010 9:24 PM, Joe Bowbeer wrote:
> Marco,
>
> In addition to the other excellent replies, I'll add my $0.02
>
> The original SwingWorker, which is a class designed for subclassing, started its
> worker thread in its constructor and this led to many problems in practice.
>
> Another problem with starting a thread in a constructor is that it is not
> expected.  My expectation is that a constructor merely creates.  If I want
> action, I'll call a method.
>
> In addition, I would ask why you're even creating a thread?  Consider creating a
> task instead and using an executor.

Executors are not always the best choice for "forever" threads.   Although there 
are some interesting recovery patterns you can create using single thread executors.

> On Fri, Dec 10, 2010 at 5:30 PM, Marco Villalobos wrote:
>
>     QUESTION:
>
>     Can somebody please give me guidance on how I could possibly create a
>     suite of test cases that run in TestNG or JUnit that can prove the
>     thread unsafeness of this bad practice?
>
>     BACKGROUND
>
>     I'm trying to convince my colleague that starting a thread within a
>     constructor compromises thread safety.
>
>     I understand that, "publishing objects before they are fully
>     constructed can compromise thread safety."
>
>     But I would like an elaboration on how it compromises thread safety?
>
>     I understand that publishing the "this" reference would break
>     encapsulation, allowing other classes and threads to potentially
>     change the state of my object in an unthread safe manner.
>
>     But more specifically, what are the side affects of an object not
>     being fully constructed, yet published through a thread.start in a
>     constructor.
>
>     Here is an example of how "not to do things".
>
>     public class DontDoThis {
>
>       public synchronized void mutateMe() {
>           // ... I'm mutating this...
>       }
>
>       public final Thread t;
>
>       public DontDoThis() {
>           t = new Thread(new Runnable() {
>               public void run() {
>                   mutateMe();
>               }
>           });
>           t.start();   //     BAD BAD BAD Don't do this.
>       }
>     }
>
>     Can somebody please give me guidance on how I could possibly create a
>     suite of test cases that run in TestNG or JUnit that can prove the
>     thread unsafeness of this bad practice?
>
>     I want to make a short presentation on the issue.  If I provide a
>     compilable and running test case, that would be amazing :)
>
>     -Marco
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest


From gkorland at gmail.com  Sun Dec 12 02:52:08 2010
From: gkorland at gmail.com (Guy Korland)
Date: Sun, 12 Dec 2010 09:52:08 +0200
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <4d0247dd.918acc0a.6d67.ffffa084@mx.google.com>
References: <4d0247dd.918acc0a.6d67.ffffa084@mx.google.com>
Message-ID: <AANLkTikOV4DRptcjK4QK3wTRT-3SLHACtkxuZsxWEz-B@mail.gmail.com>

David,

We just noticed that the NPE also accord in external code to our code
And again this NPE is on final field!

java.lang.NullPointerException
    at ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:426)
    at ch.qos.logback.classic.Logger.info(Logger.java:627)

Regards,
Guy Korland


On Fri, Dec 10, 2010 at 5:31 PM, Guy Korland <gkorland at gmail.com> wrote:

> David,
>
> we got it while running jdk6u19.
> The problem is that it happened to us only once and in two different places
> in the code that uses the same pattern.
>
> Regards,
> Guy Korland
> -----Original Message-----
> From: David Holmes
> Sent:  10-12-2010, 00:31
> To: Guy Korland; concurrency-interest
> Subject: RE: [concurrency-interest] Race condition on singleton
>
>
> Hi Guy,
>
> In addition to compilable/runnable test case can you tell us which platform
> and which JDK version please. Also can you test if it happens
> with -Xint -client and -server.
>
> Other than the typo in the variable name there's nothing wrong with your
> code and static initialization of the class should be ensuring full
> visibility.
>
> David Holmes
>  -----Original Message-----
>  From: concurrency-interest-bounces at cs.oswego.edu
> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Guy
> Korland
>  Sent: Thursday, 9 December 2010 10:45 PM
>  To: concurrency-interest
>   Subject: [concurrency-interest] Race condition on singleton
>
>
>  Hi,
>
>
>  We found a very strange pattern that seems like contradicting the Java
> Memory Model.
>  It seems like a class that is maintained as singleton doesn't have its
> constructor fully initialized!
>  See the code example bellow.
>
>
>  public class MyClass{
>
>
>    private static final MyClass = new MyClass();
>
>    private final HashMap map;
>
>
>    private MyClass(){
>        map = new HashMap();
>    }
>
>
>    public void put(Object k, Object v){
>       map.put(k,v);
>    }
>
>
>    static public getMyClass(){
>      return myClass;
>    }
>  }
>
>
>
>
>  And when we invoke the following:
>
>
>  MyClass.getMyClass().put("a","b");
>
>
>  We get a NullPointerException on the "map.put(k,v);", meaning the
> map==null !?!?
>
>
>  Any ideas?
>
>  Thanks,
>  Guy Korland
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101212/82a52676/attachment.html>

From pmclachlan at gmail.com  Sun Dec 12 04:31:23 2010
From: pmclachlan at gmail.com (Paul McLachlan)
Date: Sun, 12 Dec 2010 01:31:23 -0800
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTikOV4DRptcjK4QK3wTRT-3SLHACtkxuZsxWEz-B@mail.gmail.com>
References: <4d0247dd.918acc0a.6d67.ffffa084@mx.google.com>
	<AANLkTikOV4DRptcjK4QK3wTRT-3SLHACtkxuZsxWEz-B@mail.gmail.com>
Message-ID: <AANLkTim1WGOdiTGQriu7xRKNcyyxyZSvFnh+20=Zy75U@mail.gmail.com>

In my experience, problems like this are caused by circular references
between static initializers in different classes, causing one of the classes
to necessarily see the other in a half-constructed state.  If you haven't
already, I'd suggest carefully looking from that angle.

Regards,
Paul


On Sat, Dec 11, 2010 at 11:52 PM, Guy Korland <gkorland at gmail.com> wrote:

> David,
>
> We just noticed that the NPE also accord in external code to our code
> And again this NPE is on final field!
>
> java.lang.NullPointerException
>     at ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:426)
>     at ch.qos.logback.classic.Logger.info(Logger.java:627)
>
> Regards,
> Guy Korland
>
>
>
> On Fri, Dec 10, 2010 at 5:31 PM, Guy Korland <gkorland at gmail.com> wrote:
>
>> David,
>>
>> we got it while running jdk6u19.
>> The problem is that it happened to us only once and in two different
>> places in the code that uses the same pattern.
>>
>> Regards,
>> Guy Korland
>> -----Original Message-----
>> From: David Holmes
>> Sent:  10-12-2010, 00:31
>> To: Guy Korland; concurrency-interest
>> Subject: RE: [concurrency-interest] Race condition on singleton
>>
>>
>> Hi Guy,
>>
>> In addition to compilable/runnable test case can you tell us which
>> platform
>> and which JDK version please. Also can you test if it happens
>> with -Xint -client and -server.
>>
>> Other than the typo in the variable name there's nothing wrong with your
>> code and static initialization of the class should be ensuring full
>> visibility.
>>
>> David Holmes
>>  -----Original Message-----
>>  From: concurrency-interest-bounces at cs.oswego.edu
>> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Guy
>> Korland
>>  Sent: Thursday, 9 December 2010 10:45 PM
>>  To: concurrency-interest
>>   Subject: [concurrency-interest] Race condition on singleton
>>
>>
>>  Hi,
>>
>>
>>  We found a very strange pattern that seems like contradicting the Java
>> Memory Model.
>>  It seems like a class that is maintained as singleton doesn't have its
>> constructor fully initialized!
>>  See the code example bellow.
>>
>>
>>  public class MyClass{
>>
>>
>>    private static final MyClass = new MyClass();
>>
>>    private final HashMap map;
>>
>>
>>    private MyClass(){
>>        map = new HashMap();
>>    }
>>
>>
>>    public void put(Object k, Object v){
>>       map.put(k,v);
>>    }
>>
>>
>>    static public getMyClass(){
>>      return myClass;
>>    }
>>  }
>>
>>
>>
>>
>>  And when we invoke the following:
>>
>>
>>  MyClass.getMyClass().put("a","b");
>>
>>
>>  We get a NullPointerException on the "map.put(k,v);", meaning the
>> map==null !?!?
>>
>>
>>  Any ideas?
>>
>>  Thanks,
>>  Guy Korland
>>
>>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101212/e5b2b5cc/attachment.html>

From forax at univ-mlv.fr  Sun Dec 12 07:41:57 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Sun, 12 Dec 2010 13:41:57 +0100
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTim1WGOdiTGQriu7xRKNcyyxyZSvFnh+20=Zy75U@mail.gmail.com>
References: <4d0247dd.918acc0a.6d67.ffffa084@mx.google.com>	<AANLkTikOV4DRptcjK4QK3wTRT-3SLHACtkxuZsxWEz-B@mail.gmail.com>
	<AANLkTim1WGOdiTGQriu7xRKNcyyxyZSvFnh+20=Zy75U@mail.gmail.com>
Message-ID: <4D04C315.4090804@univ-mlv.fr>

On 12/12/2010 10:31 AM, Paul McLachlan wrote:
> In my experience, problems like this are caused by circular references 
> between static initializers in different classes, causing one of the 
> classes to necessarily see the other in a half-constructed state.  If 
> you haven't already, I'd suggest carefully looking from that angle.

Or a virtual call in a middle of a constructor.

>
> Regards,
> Paul

cheers,
R?mi


From davidcholmes at aapt.net.au  Sun Dec 12 16:14:24 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Mon, 13 Dec 2010 07:14:24 +1000
Subject: [concurrency-interest] Starting a Thread within a constructor,
	what can go wrong?
In-Reply-To: <4D03DDF2.1010903@cytetech.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCMEDFIKAA.davidcholmes@aapt.net.au>

Gregg,

Can you provide an actual test case that demonstrates this as there should
not be any difference between the two forms.

Thanks,
David Holmes

> -----Original Message-----
> From: concurrency-interest-bounces at cs.oswego.edu
> [mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Gregg
> Wonderly
> Sent: Sunday, 12 December 2010 6:24 AM
> To: Joe Bowbeer
> Cc: concurrency-interest at cs.oswego.edu
> Subject: Re: [concurrency-interest] Starting a Thread within a
> constructor, what can go wrong?
>
>
> One of the more problematic patterns is doing
>
> public MyClass implements Runnable {
> 	private final SomeClass val = new SomeClass();
> 	public MyClass() {
> 		new Thread(this).start();
> 	}
> 	public void run() {
> 		val.doSomething();
> 	}
> }
>
> The initialized final value will not be visible until the
> constructor completes
> in my experience, and if you instead do
>
> public MyClass implements Runnable {
> 	private final SomeClass val;
> 	public MyClass() {
> 		val = new SomeClass();
> 		new Thread(this).start();
> 	}
> 	public void run() {
> 		val.doSomething();
> 	}
> }
>
> Then val is visible when the thread starts because of the happens
> before that
> was alluded to before.
>
> Gregg Wonderly
>
> On 12/10/2010 9:24 PM, Joe Bowbeer wrote:
> > Marco,
> >
> > In addition to the other excellent replies, I'll add my $0.02
> >
> > The original SwingWorker, which is a class designed for
> subclassing, started its
> > worker thread in its constructor and this led to many problems
> in practice.
> >
> > Another problem with starting a thread in a constructor is that
> it is not
> > expected.  My expectation is that a constructor merely creates.
>  If I want
> > action, I'll call a method.
> >
> > In addition, I would ask why you're even creating a thread?
> Consider creating a
> > task instead and using an executor.
>
> Executors are not always the best choice for "forever" threads.
> Although there
> are some interesting recovery patterns you can create using
> single thread executors.
>
> > On Fri, Dec 10, 2010 at 5:30 PM, Marco Villalobos wrote:
> >
> >     QUESTION:
> >
> >     Can somebody please give me guidance on how I could
> possibly create a
> >     suite of test cases that run in TestNG or JUnit that can prove the
> >     thread unsafeness of this bad practice?
> >
> >     BACKGROUND
> >
> >     I'm trying to convince my colleague that starting a thread within a
> >     constructor compromises thread safety.
> >
> >     I understand that, "publishing objects before they are fully
> >     constructed can compromise thread safety."
> >
> >     But I would like an elaboration on how it compromises thread safety?
> >
> >     I understand that publishing the "this" reference would break
> >     encapsulation, allowing other classes and threads to potentially
> >     change the state of my object in an unthread safe manner.
> >
> >     But more specifically, what are the side affects of an object not
> >     being fully constructed, yet published through a thread.start in a
> >     constructor.
> >
> >     Here is an example of how "not to do things".
> >
> >     public class DontDoThis {
> >
> >       public synchronized void mutateMe() {
> >           // ... I'm mutating this...
> >       }
> >
> >       public final Thread t;
> >
> >       public DontDoThis() {
> >           t = new Thread(new Runnable() {
> >               public void run() {
> >                   mutateMe();
> >               }
> >           });
> >           t.start();   //     BAD BAD BAD Don't do this.
> >       }
> >     }
> >
> >     Can somebody please give me guidance on how I could
> possibly create a
> >     suite of test cases that run in TestNG or JUnit that can prove the
> >     thread unsafeness of this bad practice?
> >
> >     I want to make a short presentation on the issue.  If I provide a
> >     compilable and running test case, that would be amazing :)
> >
> >     -Marco
> >
> >
> >
> > _______________________________________________
> > Concurrency-interest mailing list
> > Concurrency-interest at cs.oswego.edu
> > http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From justin at krasama.com  Mon Dec 13 00:10:16 2010
From: justin at krasama.com (Justin T. Sampson)
Date: Sun, 12 Dec 2010 21:10:16 -0800
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
References: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
Message-ID: <AANLkTi=zFMe+22pkFcF4mropnPg6rRf+BMu5_wjOmsiT@mail.gmail.com>

I'm surprised with all the replies that no one commented on the lack of
synchronization on accessing the contents of the map. That can easily cause
NPEs from within map.put(k, v), or almost any other arbitrary behavior for
that matter.

Cheers,
Justin

On Thu, Dec 9, 2010 at 4:44 AM, Guy Korland <gkorland at gmail.com> wrote:

> Hi,
>
> We found a very strange pattern that seems like contradicting the Java
> Memory Model.
> It seems like a class that is maintained as singleton doesn't have its
> constructor fully initialized!
> See the code example bellow.
>
> public class MyClass{
>
>   private static final MyClass = new MyClass();
>
>   private final HashMap map;
>
>    private MyClass(){
>       map = new HashMap();
>   }
>
>   public void put(Object k, Object v){
>      map.put(k,v);
>   }
>
>   static public getMyClass(){
>     return myClass;
>   }
> }
>
>
> And when we invoke the following:
>
> MyClass.getMyClass().put("a","b");
>
> We get a NullPointerException on the "map.put(k,v);", meaning the map==null
> !?!?
>
> Any ideas?
>
> Thanks,
> Guy Korland
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101212/ba26c1f6/attachment.html>

From davidcholmes at aapt.net.au  Mon Dec 13 00:18:43 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Mon, 13 Dec 2010 15:18:43 +1000
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTi=zFMe+22pkFcF4mropnPg6rRf+BMu5_wjOmsiT@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCEEDMIKAA.davidcholmes@aapt.net.au>

I'm assuming from the way Guy stated it that it was the map.put that caused
the NPE, not some internal action within the put() code.

Of course stacktraces would make it clearer.

David Holmes
  -----Original Message-----
  From: concurrency-interest-bounces at cs.oswego.edu
[mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Justin T.
Sampson
  Sent: Monday, 13 December 2010 3:10 PM
  To: Guy Korland
  Cc: concurrency-interest
  Subject: Re: [concurrency-interest] Race condition on singleton


  I'm surprised with all the replies that no one commented on the lack of
synchronization on accessing the contents of the map. That can easily cause
NPEs from within map.put(k, v), or almost any other arbitrary behavior for
that matter.


  Cheers,
  Justin


  On Thu, Dec 9, 2010 at 4:44 AM, Guy Korland <gkorland at gmail.com> wrote:

    Hi,


    We found a very strange pattern that seems like contradicting the Java
Memory Model.
    It seems like a class that is maintained as singleton doesn't have its
constructor fully initialized!
    See the code example bellow.


    public class MyClass{


      private static final MyClass = new MyClass();

      private final HashMap map;


      private MyClass(){
          map = new HashMap();
      }


      public void put(Object k, Object v){
         map.put(k,v);
      }


      static public getMyClass(){
        return myClass;
      }
    }




    And when we invoke the following:


    MyClass.getMyClass().put("a","b");


    We get a NullPointerException on the "map.put(k,v);", meaning the
map==null !?!?


    Any ideas?

    Thanks,
    Guy Korland


    _______________________________________________
    Concurrency-interest mailing list
    Concurrency-interest at cs.oswego.edu
    http://cs.oswego.edu/mailman/listinfo/concurrency-interest



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101213/2365c47a/attachment.html>

From mvillalobos at kineteque.com  Mon Dec 13 00:28:18 2010
From: mvillalobos at kineteque.com (Marco Villalobos)
Date: Sun, 12 Dec 2010 21:28:18 -0800
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <AANLkTi=zFMe+22pkFcF4mropnPg6rRf+BMu5_wjOmsiT@mail.gmail.com>
References: <AANLkTin6PJEcTUO_FnU=GZyfpxgPvuTkKt7Yqx_HuH19@mail.gmail.com>
	<AANLkTi=zFMe+22pkFcF4mropnPg6rRf+BMu5_wjOmsiT@mail.gmail.com>
Message-ID: <AANLkTi=2xOkfsYA==VzScL6G=6vVcDwZWJfxd4BL_+JJ@mail.gmail.com>

By simply reading his code, which I assume is an abridged version of
the original, I didn't notice anything that would cause an NPE.

However, if his original code uses static variables, then order of
those declarations will matter.

For example:

public class WillNPE {

    private final static WillNPE instance = new WillNPE();
    private final static Set<Integer> set = new HashSet<Integer>();

    public static WillNPE getInstance() {
        return instance;
    }

    public WillNPE() {
        set.add(1);
    }

    public static void main(String args[]) {
        WillNPE local = WillNPE.getInstance();
    }
}


On Sun, Dec 12, 2010 at 9:10 PM, Justin T. Sampson <justin at krasama.com> wrote:
> I'm surprised with all the replies that no one commented on the lack of
> synchronization on accessing the contents of the map. That can easily cause
> NPEs from within map.put(k, v), or almost any other arbitrary behavior for
> that matter.
> Cheers,
> Justin
>
> On Thu, Dec 9, 2010 at 4:44 AM, Guy Korland <gkorland at gmail.com> wrote:
>>
>> Hi,
>> We found a very strange pattern that seems like?contradicting?the Java
>> Memory Model.
>> It seems like a class that is?maintained?as?singleton?doesn't have its
>> constructor fully?initialized!
>> See the code example bellow.
>> public class MyClass{
>> ??private static final?MyClass = new?MyClass();
>>
>> ??private final HashMap map;
>> ??private MyClass(){
>> ?? ???map = new HashMap();
>> ??}
>> ??public void put(Object k, Object v){
>> ?? ? map.put(k,v);
>> ??}
>> ??static public getMyClass(){
>> ?? ?return myClass;
>> ??}
>> }
>>
>> And when we invoke the following:
>> MyClass.getMyClass().put("a","b");
>> We get a NullPointerException on the "map.put(k,v);", meaning the
>> map==null !?!?
>> Any ideas?
>> Thanks,
>> Guy Korland
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>


From gkorland at gmail.com  Mon Dec 13 00:47:12 2010
From: gkorland at gmail.com (Guy Korland)
Date: Mon, 13 Dec 2010 07:47:12 +0200
Subject: [concurrency-interest] Race condition on singleton
In-Reply-To: <NFBBKALFDCPFIDBNKAPCEEDMIKAA.davidcholmes@aapt.net.au>
References: <AANLkTi=zFMe+22pkFcF4mropnPg6rRf+BMu5_wjOmsiT@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCEEDMIKAA.davidcholmes@aapt.net.au>
Message-ID: <AANLkTinU8dhBcCr2r+tX5t5zLaq3wUkris6f_bfiJP3s@mail.gmail.com>

The NPE for sure is not a problem of unsynchronized map.
I guess the "psdo code" I wrote to mimic the problem creates more issues
than help :(.

Anyway the problem is with the pattern and not with the Map since as I wrote
we saw it on the saw time in three different places (without maps).

Regards,
Guy Korland


On Mon, Dec 13, 2010 at 7:18 AM, David Holmes <davidcholmes at aapt.net.au>wrote:

>  I'm assuming from the way Guy stated it that it was the map.put that
> caused the NPE, not some internal action within the put() code.
>
> Of course stacktraces would make it clearer.
>
> David Holmes
>
> -----Original Message-----
> *From:* concurrency-interest-bounces at cs.oswego.edu [mailto:
> concurrency-interest-bounces at cs.oswego.edu]*On Behalf Of *Justin T.
> Sampson
> *Sent:* Monday, 13 December 2010 3:10 PM
> *To:* Guy Korland
> *Cc:* concurrency-interest
> *Subject:* Re: [concurrency-interest] Race condition on singleton
>
> I'm surprised with all the replies that no one commented on the lack of
> synchronization on accessing the contents of the map. That can easily cause
> NPEs from within map.put(k, v), or almost any other arbitrary behavior for
> that matter.
>
> Cheers,
> Justin
>
> On Thu, Dec 9, 2010 at 4:44 AM, Guy Korland <gkorland at gmail.com> wrote:
>
>>  Hi,
>>
>> We found a very strange pattern that seems like contradicting the Java
>> Memory Model.
>> It seems like a class that is maintained as singleton doesn't have its
>> constructor fully initialized!
>> See the code example bellow.
>>
>> public class MyClass{
>>
>>   private static final MyClass = new MyClass();
>>
>>   private final HashMap map;
>>
>>   private MyClass(){
>>       map = new HashMap();
>>   }
>>
>>   public void put(Object k, Object v){
>>      map.put(k,v);
>>   }
>>
>>   static public getMyClass(){
>>     return myClass;
>>   }
>> }
>>
>>
>> And when we invoke the following:
>>
>> MyClass.getMyClass().put("a","b");
>>
>> We get a NullPointerException on the "map.put(k,v);", meaning the
>> map==null !?!?
>>
>> Any ideas?
>>
>> Thanks,
>> Guy Korland
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101213/100abddb/attachment-0001.html>

From rmcilroy at microsoft.com  Mon Dec 13 08:51:46 2010
From: rmcilroy at microsoft.com (Ross McIlroy)
Date: Mon, 13 Dec 2010 13:51:46 +0000
Subject: [concurrency-interest] [CfP]: Workshop on Systems for Future
 Multi-Core Architectures at EuroSys 2011
Message-ID: <5109AB538DE99B41A5C31A5882E1EE96282136E4@TK5EX14MBXC113.redmond.corp.microsoft.com>

Please consider submitting to and attending the following workshop
we are holding at EuroSys 2011.

=================================================================
                        Call for Papers

Workshop on Systems for Future Multi-Core Architectures (SFMA'11)

               April 10th 2011,  Salzburg, Austria
                   Co-located with EuroSys 2011<http://eurosys2011.cs.uni-salzburg.at/welcome.php>

          http://research.microsoft.com/~rmcilroy/SFMA/index.htm
=================================================================

The current trend towards multi-core computing is of significant
importance to practitioners of systems-level software, such as
operating systems, language runtimes and virtual machines. As the
layer between application software and the underlying hardware,
systems-level software must directly tackle the challenges of
multi-core hardware (e.g., scalability, concurrency control and
data-sharing costs), while providing appropriate abstractions to
higher-level software. Future hardware is likely to increase the
challenges encountered by systems software due to increasing
system diversity, core heterogeneity, complex memory hierarchies,
dynamic core failure, and non-cache coherent shared memory.
However, the abundance of parallelism and potential for core
specialization and inter-core message passing hardware also
provide a number of new opportunities for system software. The
current shift in hardware design provides an exciting opportunity
to radically rethink the design and implementation of systems-
level software.

The workshop on Systems for Future Multi-Core Architectures
(SFMA'11) brings together researchers in the operating systems,
language runtime and virtual machine communities to exchange
ideas and experiences on the challenges and opportunities
presented by future multi-core hardware.

The workshop program will include presentations of peer-reviewed
papers as well as a panel with participants from research /
academia and industry. SFMA topics of interest include, but are
not limited to:


?         novel multi-core operating system designs,

?         runtime systems and programming environments for future

hardware, operating system or runtime support for

heterogeneous processing cores, scheduling on many-core

architectures,

?         energy efficiency, fault tolerance and resource management on

future multi-core architectures,

?         performance evaluation of potential future hardware,

?         architectural support for systems-level software,

?         case studies of system-level software design for current or

future multi-core hardware.

Paper Submission:
-----------------

Authors are invited to submit original and unpublished work that
exposes a new problem, advocates a specific solution, or reports
on actual experience. Papers should be submitted using the
standard double column ACM SIG proceedings format, to
https://eurosys2011.ertos.nicta.com.au/workshops/sfma/hotcrp/.
Papers are limited to 6 pages, including figures and tables.

Final papers will be available to participants electronically at
the meeting, but to facilitate resubmission to more formal venues,
no archival proceedings will be published, and papers will not be
sent to the ACM Digital Library. Authors will have the option of
having their final paper accessible from the workshop website.

Important dates:
----------------
Submissions due: 1st February 2011 (11:59pm PST)
Notification: 1st March 2011
Workshop: 10th April 2011

Program committee:
------------------
Ali-Reza Adl-Tabatabai (Intel)
Mats Brorsson (KTH Royal Institute of Technology, Sweden)
Juan Colmenares (University of California, Berkeley)
Stephan Diestelhorst (AMD)
Tim Harris (Microsoft Research Cambridge)
Hermann H?rtig (TU Dresden)
Ross McIlroy (Microsoft Research Cambridge)
Derek Murray (University of Cambridge)
Timothy Roscoe (ETH Z?rich)
Michael Scott (University of Rochester)
Jeremy Singer (University of Glasgow)
Joe Sventek (University of Glasgow)
Michael Swift (University of Wisconsin)
Ian Watson (University of Manchester)
Nickolai Zeldovich (MIT)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101213/8f01cc29/attachment.html>

From vgrazi at gmail.com  Wed Dec 15 23:42:49 2010
From: vgrazi at gmail.com (Victor Grazi)
Date: Wed, 15 Dec 2010 23:42:49 -0500
Subject: [concurrency-interest] Doug Lea and Tim Peierls depart from JCP
Message-ID: <AANLkTimcnHSP8Pu83aAnpX1dv84c4r7G1buz8K2TWHS_@mail.gmail.com>

Off topic, my apologies in advance. But as an employee of Credit Suisse and
a member of the Credit Suisse JCP Technical Advisory Committee, I share Doug
Lea and Tim Peierls sentiment in resigning from the JCP. Android is the best
thing that ever happened to Java, and Java wouldn't be Java if not for
Apache's contribution!

However as a Java developer since the early days, I would hate to assist in
Java's hari kari!

What will be the future of Java without the key players - I mean is anyone
meaningful working on Java concurrency besides Doug and Tim?

Come on guys - I don't work for Oracle, I am just a simple Java developer
who wants to see Java continue to grow.
Larry Ellison is way too egotistical to be strong-armed - do we really need
to contribute to the death of Java?

Sorry for the off-topic rant, but I am a long time list member so I hope you
will forgive me!

Regards, Victor Grazi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101215/d8064e35/attachment.html>

From davidcholmes at aapt.net.au  Wed Dec 15 23:55:14 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Thu, 16 Dec 2010 14:55:14 +1000
Subject: [concurrency-interest] Doug Lea and Tim Peierls depart from JCP
In-Reply-To: <AANLkTimcnHSP8Pu83aAnpX1dv84c4r7G1buz8K2TWHS_@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCAEELIKAA.davidcholmes@aapt.net.au>

This is not a suitable discussion for this list but I would like to point
out that the JSR-166 EG (including Doug and Tim) continue their work on
evolving Java concurrency irrespective of anyone's involvement in the JCP
Executive Committee.

Cheers,
David Holmes
  -----Original Message-----
  From: concurrency-interest-bounces at cs.oswego.edu
[mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Victor Grazi
  Sent: Thursday, 16 December 2010 2:43 PM
  To: concurrency-interest at cs.oswego.edu
  Subject: [concurrency-interest] Doug Lea and Tim Peierls depart from JCP


  Off topic, my apologies in advance. But as an employee of Credit Suisse
and a member of the Credit Suisse JCP Technical Advisory Committee, I share
Doug Lea and Tim Peierls sentiment in resigning from the JCP. Android is the
best thing that ever happened to Java, and Java wouldn't be Java if not for
Apache's contribution!


  However as a Java developer since the early days, I would hate to assist
in Java's hari kari!


  What will be the future of Java without the key players - I mean is anyone
meaningful working on Java concurrency besides Doug and Tim?


  Come on guys - I don't work for Oracle, I am just a simple Java developer
who wants to see Java continue to grow.
  Larry Ellison is way too egotistical to be strong-armed - do we really
need to contribute to the death of Java?


  Sorry for the off-topic rant, but I am a long time list member so I hope
you will forgive me!


  Regards, Victor Grazi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101216/a42db7d5/attachment.html>

From dl at cs.oswego.edu  Thu Dec 16 10:49:18 2010
From: dl at cs.oswego.edu (Doug Lea)
Date: Thu, 16 Dec 2010 10:49:18 -0500
Subject: [concurrency-interest] Doug Lea and Tim Peierls depart from JCP
In-Reply-To: <AANLkTimcnHSP8Pu83aAnpX1dv84c4r7G1buz8K2TWHS_@mail.gmail.com>
References: <AANLkTimcnHSP8Pu83aAnpX1dv84c4r7G1buz8K2TWHS_@mail.gmail.com>
Message-ID: <4D0A34FE.9090107@cs.oswego.edu>

On 12/15/10 23:42, Victor Grazi wrote:
> Off topic, my apologies in advance.

Here's a shot at briefly addressing only the part of the
current weird Java politics that is barely not off-topic :-)

We continue to develop open source code that is regularly integrated
into OpenJDK, Android, and runtimes for other languages running
on VMs. However, I am not participating in the JCP Executive
Committee because there is no possibility within JCP to develop
open, independently implementable specifications and standards
(as opposed to code). If there were a body supporting open
development of specs related to Java concurrency, I would
probably participate.

-Doug




From morganconrad at yahoo.com  Fri Dec 17 15:43:13 2010
From: morganconrad at yahoo.com (Morgan Conrad)
Date: Fri, 17 Dec 2010 12:43:13 -0800 (PST)
Subject: [concurrency-interest] CopyOnWrite wrappers Part 2 - now renamed
In-Reply-To: <mailman.1.1292518801.2484.concurrency-interest@cs.oswego.edu>
Message-ID: <708762.27952.qm@web112108.mail.gq1.yahoo.com>

Thanks to all of you for the feedback, particularly Jed Wesley-Smith.  I've updated the code to reflect many of the comments and suggestions.  The major change is in the naming, to CISListWrapper and CISMapWrapper, to make it clear that they aren't "true" CopyOnWrite and avoid confusion and surprises.

http://flyingspaniel.blogspot.com/2010/12/copyonwrite-wrappers-part-2-now-cis.html

or

http://flyingspaniel.wikidot.com/cow


I modified the JSR 166 Unit Tests to test my code, and have a couple of suggestions for improvements in them.

1) The code is currently highly specific to the class to be tested.  For example, ConcurrentHashMapTest always refers to a ConcurrentHashMap, when, most of the time, it could refer to a Map or ConcurrentMap.  For example, in testClear(), the first line could be changed

public void testClear() {
   Map map = map5();  // WAS ConcurrentHashMap
   map.clear();
   assertEquals(map.size(), 0);
}

This would make it easier to extend these tests to other implementations (like mine!).

2) I didn't see where the tests did much actual testing of concurrency.  Did I miss something - is this done elsewhere?  I realize that writing such test code is difficult.  My CISWrapperTest makes modest efforts.

Again, thanks to everybody for the feedback and hopefully somebody will find this useful.





      

From forax at univ-mlv.fr  Fri Dec 17 20:02:32 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Sat, 18 Dec 2010 02:02:32 +0100
Subject: [concurrency-interest] Review for CR 6728865 : Improved
	heuristics for Collections.disjoint()
In-Reply-To: <84D9FDBB-E47B-43DC-903B-0FAA506E0D64@oracle.com>
References: <84D9FDBB-E47B-43DC-903B-0FAA506E0D64@oracle.com>
Message-ID: <4D0C0828.2020903@univ-mlv.fr>

On 12/18/2010 01:31 AM, Mike Duigou wrote:
> I've posted a webrev for review at
>
> http://cr.openjdk.java.net/~mduigou/6728865.0/webrev/
>
> which improves the behaviour of Collections.disjoint() when the collection c1 is not a Set and is larger than c2.
>
> http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6728865
>
> I've included some other micro-optimizations suggested by the issue and by common usage.
>
> One optimization, the checks whether either collection is empty using isEmpty(), may slightly degrade performance relative to the current implementation but should be a good tradeoff for cases where either of the collections are empty.
>
> I've also upgraded the javadoc to newer style conventions and included the missing @return.
>
> Any comments or feedback welcome.
>
> Mike

Hi Mike,
I think that comparing size() is not a good idea because
- for some collections, size() is not a constant operation
- you compare size() when c1 and c2 are sets which
   may cause a performance regression because
   disjoint(treeSet, hashSet) has not the same complexity as
   disjoint(hashSet, treeSet).

Otherwise, you declare some local variables final.
Declaring a local variable as final doesn't appear in the generated 
bytecode.
The usual convention for the source of the JDK is to use final
in front of a local variable only when needed (inner class).

R?mi
PS: I have also CC JSR 166 list mailing list because I know that Doug 
Lea also
   maintains patches for package java.util.

From mettafort at gmail.com  Fri Dec 17 21:29:21 2010
From: mettafort at gmail.com (Insane Membrane)
Date: Fri, 17 Dec 2010 20:29:21 -0600
Subject: [concurrency-interest] Concurrent Read/Write without Synchronization
Message-ID: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>

Hi-

Could someone please answer this simple question for me? I have two threads,
A and B, and they share an object P that has an integer property called x.
 The first question is, if A sets x to a value, but B only ever reads x,
will B ALWAYS see the latest value of x?  So A does x = x + 1.  Will B
always see x with the new value? We were under the impression the latest
value could still be sitting in the cache of A, but not visible in B.  This
would be one reason for the volatile or interlocked operations?  Similarly,
if we have an object reference and we set it onto some public/global
reference, all threads would always see whatever had been written to this
global reference IMMEDIATELY, without any needs for synchronization or
interlocked?

This is assuming the int is 32bit on a 32bit machine, and the reference is
the same too.

Thank you,

mf.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101217/a218b810/attachment.html>

From joe.bowbeer at gmail.com  Fri Dec 17 21:46:08 2010
From: joe.bowbeer at gmail.com (Joe Bowbeer)
Date: Fri, 17 Dec 2010 18:46:08 -0800
Subject: [concurrency-interest] Concurrent Read/Write without
	Synchronization
In-Reply-To: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>
References: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>
Message-ID: <AANLkTi=h=Trxc6HQVnxNoqNdAy5tYzPZmWPRNuoQamee@mail.gmail.com>

see below

On Fri, Dec 17, 2010 at 6:29 PM, Insane Membrane wrote:

> Hi-
>
> Could someone please answer this simple question for me? I have two
> threads, A and B, and they share an object P that has an integer property
> called x.  The first question is, if A sets x to a value, but B only ever
> reads x, will B ALWAYS see the latest value of x?  So A does x = x + 1.
>  Will B always see x with the new value? We were under the impression the
> latest value could still be sitting in the cache of A, but not visible in B.
>  This would be one reason for the volatile or interlocked operations?
>

Yes, the JMM says you need volatile (or synchronization) to ensure that B
reads the most recent value written to x.



> Similarly, if we have an object reference and we set it onto some
> public/global reference, all threads would always see whatever had been
> written to this global reference IMMEDIATELY, without any needs for
> synchronization or interlocked?
>

Every value is written by some thread.  It doesn't matter how accessible the
value is.  This is identical to your first example.



> This is assuming the int is 32bit on a 32bit machine, and the reference is
> the same too.
>
> Thank you,
>
> mf.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101217/8a0e93bf/attachment.html>

From mettafort at gmail.com  Fri Dec 17 23:12:54 2010
From: mettafort at gmail.com (Insane Membrane)
Date: Fri, 17 Dec 2010 22:12:54 -0600
Subject: [concurrency-interest] Concurrent Read/Write without
	Synchronization
In-Reply-To: <AANLkTi=h=Trxc6HQVnxNoqNdAy5tYzPZmWPRNuoQamee@mail.gmail.com>
References: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>
	<AANLkTi=h=Trxc6HQVnxNoqNdAy5tYzPZmWPRNuoQamee@mail.gmail.com>
Message-ID: <AANLkTim37DJ9VhW=c046xWT_PyTJkn=hvoDVDV71-pTL@mail.gmail.com>

Thanks Joe. Our understanding seems correct - that you would need some form
of volatile read/write to ensure the visibility of a state change to a word
sized value in one process/core is visible in the other cores accessing the
shared memory reference?

There seems to be confusing descriptions on what volatiles are used for.  I
work in both .Net and Java, and for the most part the differences around
this type of thing have been small.  My understanding was .net had the same
approach - a write is atomic but could be sitting in some cache of a
processor, and a thread running on another core/processor could still be
seeing an old value.  Not sure where MESI etc comes in or resolves (or
complicates this)?

Thans again!

On Fri, Dec 17, 2010 at 8:46 PM, Joe Bowbeer <joe.bowbeer at gmail.com> wrote:

> see below
>
> On Fri, Dec 17, 2010 at 6:29 PM, Insane Membrane wrote:
>
> Hi-
>>
>> Could someone please answer this simple question for me? I have two
>> threads, A and B, and they share an object P that has an integer property
>> called x.  The first question is, if A sets x to a value, but B only ever
>> reads x, will B ALWAYS see the latest value of x?  So A does x = x + 1.
>>  Will B always see x with the new value? We were under the impression the
>> latest value could still be sitting in the cache of A, but not visible in B.
>>  This would be one reason for the volatile or interlocked operations?
>>
>
> Yes, the JMM says you need volatile (or synchronization) to ensure that B
> reads the most recent value written to x.
>
>
>
>> Similarly, if we have an object reference and we set it onto some
>> public/global reference, all threads would always see whatever had been
>> written to this global reference IMMEDIATELY, without any needs for
>> synchronization or interlocked?
>>
>
> Every value is written by some thread.  It doesn't matter how accessible
> the value is.  This is identical to your first example.
>
>
>
>> This is assuming the int is 32bit on a 32bit machine, and the reference is
>> the same too.
>>
>> Thank you,
>>
>> mf.
>>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101217/3c47e099/attachment.html>

From davidcholmes at aapt.net.au  Fri Dec 17 23:20:02 2010
From: davidcholmes at aapt.net.au (David Holmes)
Date: Sat, 18 Dec 2010 14:20:02 +1000
Subject: [concurrency-interest] Concurrent Read/Write without
	Synchronization
In-Reply-To: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>
Message-ID: <NFBBKALFDCPFIDBNKAPCIEFBIKAA.davidcholmes@aapt.net.au>

A thread need only see a write performed by another thread if there is a
happens-before relationship between the read and the write. Without that
various things can happen at the both the VM/JIT level and at the hardware
level.

The JIT can transform code such that a field is not read because its value
is not written in the current code eg:

   class Service {
      boolean stopped = false;
     void stop() { stopped = true};
     void run() {
        while (!stopped) doStuff();
     }
  }

the JIT can transform run() as if it were written:

   if (!stopped)
      while(true) doStuff();

At the hardware level stores/writes can languish in buffers longer than
might be expected and stores and loads (reads and writes) cam be reordered
in surprising ways.

Without the right synchronization actions to enforce the happens-before
ordering, there are no guarantees of the kind your question asks.

David Holmes
  -----Original Message-----
  From: concurrency-interest-bounces at cs.oswego.edu
[mailto:concurrency-interest-bounces at cs.oswego.edu]On Behalf Of Insane
Membrane
  Sent: Saturday, 18 December 2010 12:29 PM
  To: concurrency-interest at cs.oswego.edu
  Subject: [concurrency-interest] Concurrent Read/Write without
Synchronization


  Hi-


  Could someone please answer this simple question for me? I have two
threads, A and B, and they share an object P that has an integer property
called x.  The first question is, if A sets x to a value, but B only ever
reads x, will B ALWAYS see the latest value of x?  So A does x = x + 1.
Will B always see x with the new value? We were under the impression the
latest value could still be sitting in the cache of A, but not visible in B.
This would be one reason for the volatile or interlocked operations?
Similarly, if we have an object reference and we set it onto some
public/global reference, all threads would always see whatever had been
written to this global reference IMMEDIATELY, without any needs for
synchronization or interlocked?


  This is assuming the int is 32bit on a 32bit machine, and the reference is
the same too.


  Thank you,


  mf.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101218/79df7659/attachment-0001.html>

From martinrb at google.com  Sat Dec 18 02:18:44 2010
From: martinrb at google.com (Martin Buchholz)
Date: Fri, 17 Dec 2010 23:18:44 -0800
Subject: [concurrency-interest] CopyOnWrite wrappers Part 2 - now renamed
In-Reply-To: <708762.27952.qm@web112108.mail.gq1.yahoo.com>
References: <mailman.1.1292518801.2484.concurrency-interest@cs.oswego.edu>
	<708762.27952.qm@web112108.mail.gq1.yahoo.com>
Message-ID: <AANLkTinM14-sY5uM8XzOp6=W9bFnyUFcUZWyX-nGv2hd@mail.gmail.com>

On Fri, Dec 17, 2010 at 12:43, Morgan Conrad <morganconrad at yahoo.com> wrote:

> I modified the JSR 166 Unit Tests to test my code, and have a couple of suggestions for improvements in them.
>
> 1) The code is currently highly specific to the class to be tested.  For example, ConcurrentHashMapTest always refers to a ConcurrentHashMap, when, most of the time, it could refer to a Map or ConcurrentMap.  For example, in testClear(), the first line could be changed
>
> public void testClear() {
>   Map map = map5();  // WAS ConcurrentHashMap
>   map.clear();
>   assertEquals(map.size(), 0);
> }
>
> This would make it easier to extend these tests to other implementations (like mine!).

I agree there are a number of improvements - refactorings and changes
such as yours that would make maintenance of the src/test/tck tests
easier.  You can see a start with BlockingQueueTest.java.  But it
would be a big project, and junit 3 is not providing any help.

> 2) I didn't see where the tests did much actual testing of concurrency.  Did I miss something - is this done elsewhere?  I realize that writing such test code is difficult.  My CISWrapperTest makes modest efforts.

There are different types of tests, with different provenance, in
src/test/{tck,jtreg,loops}
Real concurrency tests often involve long-running loops that attempt
to elicit race conditions, and some of those can be found in
src/test/jtreg and src/test/loops.

 $ find -name '*.java' | xargs grep -l ConcurrentHashMap
./jtreg/util/Collection/BiggernYours.java
./jtreg/util/Collection/IteratorAtEnd.java
./jtreg/util/Collection/MOAT.java
./jtreg/util/Collections/RacingCollections.java
./jtreg/util/Hashtable/SelfRef.java
./jtreg/util/Map/LockStep.java
./jtreg/util/Map/Get.java
./jtreg/util/concurrent/ConcurrentHashMap/MapCheck.java
./jtreg/util/concurrent/ConcurrentHashMap/MapLoops.java
./jtreg/util/concurrent/ConcurrentHashMap/toArray.java
./jtreg/util/concurrent/ConcurrentMap/ConcurrentModification.java
./jtreg/util/concurrent/ConcurrentQueues/GCRetention.java
./jtreg/util/concurrent/ConcurrentQueues/RemovePollRace.java
./jtreg/util/concurrent/ThreadPoolExecutor/ThrowingTasks.java
./jtreg/util/concurrent/locks/ReentrantReadWriteLock/MapLoops.java
./loops/ConcurrentHashSet.java
./loops/IntMapCheck.java
./loops/MapCheck.java
./loops/MapLoops.java
./loops/RLJBar.java
./loops/StringMapLoops.java
./tck/ConcurrentHashMapTest.java
./tck/JSR166TestCase.java


From dl at cs.oswego.edu  Sat Dec 18 06:13:55 2010
From: dl at cs.oswego.edu (Doug Lea)
Date: Sat, 18 Dec 2010 06:13:55 -0500
Subject: [concurrency-interest] Review for CR 6728865 :
 Improved	heuristics for Collections.disjoint()
In-Reply-To: <4D0C0828.2020903@univ-mlv.fr>
References: <84D9FDBB-E47B-43DC-903B-0FAA506E0D64@oracle.com>
	<4D0C0828.2020903@univ-mlv.fr>
Message-ID: <4D0C9773.8000901@cs.oswego.edu>

On 12/17/10 20:02, R?mi Forax wrote:
> PS: I have also CC JSR 166 list mailing list because I know that Doug Lea also
> maintains patches for package java.util.

Thanks. For the set of (OpenJDK) classes that JSR166 modified
but did not originate, we are content to periodically resync them.
Now that OpenJDK java.util seems to be regularly maintained again,
we might stop doing even this. For several years, we were the only
ones ever updating them.

-Doug



From jedim at vige.it  Sat Dec 18 06:19:05 2010
From: jedim at vige.it (jedim at vige.it)
Date: Sat, 18 Dec 2010 12:19:05 +0100
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
Message-ID: <201012181119.oBIBJ5FZ008886@vivaldi26.register.it>

Hi.. I'm working for infinispan project. 
I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository. 
To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;

Bundle-SymbolicName: jcip-annotations&#8232;
Bundle-Version: 1.0
&#8232;Export-Package: net.jcip.annotations

I tested it inside Felix and it is works.
What do you think? 


From richardfearn at gmail.com  Sat Dec 18 06:42:10 2010
From: richardfearn at gmail.com (Richard Fearn)
Date: Sat, 18 Dec 2010 11:42:10 +0000
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
In-Reply-To: <201012181119.oBIBJ5FZ008886@vivaldi26.register.it>
References: <201012181119.oBIBJ5FZ008886@vivaldi26.register.it>
Message-ID: <AANLkTikn4iY6-G8rRTmhL_eWENq4Y2xRyb1PUUQL1gs=@mail.gmail.com>

> I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository.
> To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;
>
> Bundle-SymbolicName: jcip-annotations&#8232;
> Bundle-Version: 1.0
> &#8232;Export-Package: net.jcip.annotations

There's an OSGi bundle for the JCIP annotations in the SpringSource
Bundle Repository, which you might be interested in:

http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.net.jcip.annotations&version=1.0.0

Regards,

Richard

From dl at cs.oswego.edu  Sat Dec 18 07:52:23 2010
From: dl at cs.oswego.edu (Doug Lea)
Date: Sat, 18 Dec 2010 07:52:23 -0500
Subject: [concurrency-interest] CopyOnWrite wrappers Part 2 - now renamed
In-Reply-To: <AANLkTinM14-sY5uM8XzOp6=W9bFnyUFcUZWyX-nGv2hd@mail.gmail.com>
References: <mailman.1.1292518801.2484.concurrency-interest@cs.oswego.edu>	<708762.27952.qm@web112108.mail.gq1.yahoo.com>
	<AANLkTinM14-sY5uM8XzOp6=W9bFnyUFcUZWyX-nGv2hd@mail.gmail.com>
Message-ID: <4D0CAE87.5050503@cs.oswego.edu>

On 12/18/10 02:18, Martin Buchholz wrote:
> I agree there are a number of improvements - refactorings and changes
> such as yours that would make maintenance of the src/test/tck tests
> easier.  You can see a start with BlockingQueueTest.java.  But it
> would be a big project, and junit 3 is not providing any help.

All src/test/tck tests were written under a set of
constraints and junit3 limitations that allowed them to be
integrated into the JDK test harness. They are full of resulting
oddities and duplication, but attempts at improving would require
frequent rechecks that they are still usable upstream.

-Doug

From mettafort at gmail.com  Sat Dec 18 09:46:01 2010
From: mettafort at gmail.com (Insane Membrane)
Date: Sat, 18 Dec 2010 08:46:01 -0600
Subject: [concurrency-interest] Concurrent Read/Write without
	Synchronization
In-Reply-To: <NFBBKALFDCPFIDBNKAPCIEFBIKAA.davidcholmes@aapt.net.au>
References: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>
	<NFBBKALFDCPFIDBNKAPCIEFBIKAA.davidcholmes@aapt.net.au>
Message-ID: <AANLkTimtdz_Zzsjp+DNZv1JZ_9RtpntmQhDAr8ry0-hi@mail.gmail.com>

David and Joe,

Thanks for clearing up this for me.  This is what I expected, namely that no
guarantee exists of the question I asked, without some form of
synchronization.  Thank you both.


On Fri, Dec 17, 2010 at 10:20 PM, David Holmes <davidcholmes at aapt.net.au>wrote:

>  A thread need only see a write performed by another thread if there is a
> happens-before relationship between the read and the write. Without that
> various things can happen at the both the VM/JIT level and at the hardware
> level.
>
> The JIT can transform code such that a field is not read because its value
> is not written in the current code eg:
>
>    class Service {
>       boolean stopped = false;
>      void stop() { stopped = true};
>      void run() {
>         while (!stopped) doStuff();
>      }
>   }
>
> the JIT can transform run() as if it were written:
>
>    if (!stopped)
>       while(true) doStuff();
>
> At the hardware level stores/writes can languish in buffers longer than
> might be expected and stores and loads (reads and writes) cam be reordered
> in surprising ways.
>
> Without the right synchronization actions to enforce the happens-before
> ordering, there are no guarantees of the kind your question asks.
>
> David Holmes
>
> -----Original Message-----
> *From:* concurrency-interest-bounces at cs.oswego.edu [mailto:
> concurrency-interest-bounces at cs.oswego.edu]*On Behalf Of *Insane Membrane
> *Sent:* Saturday, 18 December 2010 12:29 PM
> *To:* concurrency-interest at cs.oswego.edu
> *Subject:* [concurrency-interest] Concurrent Read/Write without
> Synchronization
>
> Hi-
>
> Could someone please answer this simple question for me? I have two
> threads, A and B, and they share an object P that has an integer property
> called x.  The first question is, if A sets x to a value, but B only ever
> reads x, will B ALWAYS see the latest value of x?  So A does x = x + 1.
>  Will B always see x with the new value? We were under the impression the
> latest value could still be sitting in the cache of A, but not visible in B.
>  This would be one reason for the volatile or interlocked operations?
>  Similarly, if we have an object reference and we set it onto some
> public/global reference, all threads would always see whatever had been
> written to this global reference IMMEDIATELY, without any needs for
> synchronization or interlocked?
>
> This is assuming the int is 32bit on a 32bit machine, and the reference is
> the same too.
>
> Thank you,
>
> mf.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101218/74a450a1/attachment.html>

From mthornton at optrak.co.uk  Sat Dec 18 12:18:05 2010
From: mthornton at optrak.co.uk (Mark Thornton)
Date: Sat, 18 Dec 2010 17:18:05 +0000
Subject: [concurrency-interest] Concurrent Read/Write
	without	Synchronization
In-Reply-To: <AANLkTim37DJ9VhW=c046xWT_PyTJkn=hvoDVDV71-pTL@mail.gmail.com>
References: <AANLkTinHF36sSxe0zb7MkMukL2qyf7d=EPnUsPxVHk5P@mail.gmail.com>	<AANLkTi=h=Trxc6HQVnxNoqNdAy5tYzPZmWPRNuoQamee@mail.gmail.com>
	<AANLkTim37DJ9VhW=c046xWT_PyTJkn=hvoDVDV71-pTL@mail.gmail.com>
Message-ID: <4D0CECCD.5000508@optrak.co.uk>

On 18/12/2010 04:12, Insane Membrane wrote:
> There seems to be confusing descriptions on what volatiles are used 
> for.  I work in both .Net and Java, and for the most part the 
> differences around this type of thing have been small.  My 
> understanding was .net had the same approach - a write is atomic but
I believe the memory model used in .NET is stronger than required by Java.

http://msdn.microsoft.com/en-us/magazine/cc163715.aspx

"Another memory model was needed, and the result is the .NET Framework 
2.0 runtime memory model. The rules for this model are:

   1. All the rules that are contained in the ECMA model, in particular
      the three fundamental memory model rules as well as the ECMA rules
      for volatile.
   2. Reads and writes cannot be introduced.
   3. A read can only be removed if it is adjacent to another read to
      the same location from the same thread. A write can only be
      removed if it is adjacent to another write to the same location
      from the same thread. Rule 5 can be used to make reads or writes
      adjacent before applying this rule.
   4. Writes cannot move past other writes from the same thread.
   5. Reads can only move earlier in time, but never past a write to the
      same memory location from the same thread."

Another reference:
http://blogs.msdn.com/b/jaredpar/archive/2008/01/17/clr-memory-model.aspx

Mark Thornton



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101218/02be480a/attachment.html>

From jedim at vige.it  Sat Dec 18 21:32:36 2010
From: jedim at vige.it (jedim at vige.it)
Date: Sun, 19 Dec 2010 03:32:36 +0100
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
Message-ID: <201012190232.oBJ2WaJD003804@vivaldi24.register.it>

Thanks it's interesting....I suppose only the MANIFEST is different by the original package

>----- Original Message -----
>From: richardfearn at gmail.com
>To: jedim at vige.it
Cc: concurrency-interest at cs.oswego.edu
>Data: Sat, 18 Dec 2010 11:42:10 +0000
>Subject: Re: [concurrency-interest] jcip-annotations as OSGI bundle

>> I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository.
>> To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;
>>
>> Bundle-SymbolicName: jcip-annotations&#8232;
>> Bundle-Version: 1.0
>> &#8232;Export-Package: net.jcip.annotations
>
>There's an OSGi bundle for the JCIP annotations in the SpringSource
>Bundle Repository, which you might be interested in:
>
>http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.net.jcip.annotations&version=1.0.0
>
>Regards,
>
>Richard
> 


From jedim at vige.it  Sat Dec 18 21:32:57 2010
From: jedim at vige.it (jedim at vige.it)
Date: Sun, 19 Dec 2010 03:32:57 +0100
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
Message-ID: <201012190232.oBJ2Wvb6016006@vivaldi34.register.it>

Thanks it's interesting....I suppose only the MANIFEST is different by the original package

>----- Original Message -----
>From: richardfearn at gmail.com
>To: jedim at vige.it
Cc: concurrency-interest at cs.oswego.edu
>Data: Sat, 18 Dec 2010 11:42:10 +0000
>Subject: Re: [concurrency-interest] jcip-annotations as OSGI bundle

>> I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository.
>> To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;
>>
>> Bundle-SymbolicName: jcip-annotations&#8232;
>> Bundle-Version: 1.0
>> &#8232;Export-Package: net.jcip.annotations
>
>There's an OSGi bundle for the JCIP annotations in the SpringSource
>Bundle Repository, which you might be interested in:
>
>http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.net.jcip.annotations&version=1.0.0
>
>Regards,
>
>Richard
> 


From jedim at vige.it  Sat Dec 18 21:35:46 2010
From: jedim at vige.it (jedim at vige.it)
Date: Sun, 19 Dec 2010 03:35:46 +0100
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
Message-ID: <201012190235.oBJ2Zk42026532@vivaldi02.register.it>

Thanks it's interesting....I suppose only the MANIFEST is different by the original package

>----- Original Message -----
>From: richardfearn at gmail.com
>To: jedim at vige.it
Cc: concurrency-interest at cs.oswego.edu
>Data: Sat, 18 Dec 2010 11:42:10 +0000
>Subject: Re: [concurrency-interest] jcip-annotations as OSGI bundle

>> I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository.
>> To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;
>>
>> Bundle-SymbolicName: jcip-annotations&#8232;
>> Bundle-Version: 1.0
>> &#8232;Export-Package: net.jcip.annotations
>
>There's an OSGi bundle for the JCIP annotations in the SpringSource
>Bundle Repository, which you might be interested in:
>
>http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.net.jcip.annotations&version=1.0.0
>
>Regards,
>
>Richard
> 


From jedim at vige.it  Sat Dec 18 21:36:50 2010
From: jedim at vige.it (jedim at vige.it)
Date: Sun, 19 Dec 2010 03:36:50 +0100
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
Message-ID: <201012190236.oBJ2apD4012586@vivaldi21.register.it>

Thanks it's interesting....I suppose only the MANIFEST is different by the original package

>----- Original Message -----
>From: richardfearn at gmail.com
>To: jedim at vige.it
Cc: concurrency-interest at cs.oswego.edu
>Data: Sat, 18 Dec 2010 11:42:10 +0000
>Subject: Re: [concurrency-interest] jcip-annotations as OSGI bundle

>> I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository.
>> To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;
>>
>> Bundle-SymbolicName: jcip-annotations&#8232;
>> Bundle-Version: 1.0
>> &#8232;Export-Package: net.jcip.annotations
>
>There's an OSGi bundle for the JCIP annotations in the SpringSource
>Bundle Repository, which you might be interested in:
>
>http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.net.jcip.annotations&version=1.0.0
>
>Regards,
>
>Richard
> 


From jedim at vige.it  Sat Dec 18 21:36:50 2010
From: jedim at vige.it (jedim at vige.it)
Date: Sun, 19 Dec 2010 03:36:50 +0100
Subject: [concurrency-interest] jcip-annotations as OSGI bundle
Message-ID: <201012190236.oBJ2apD4012586@vivaldi21.register.it>

Thanks it's interesting....I suppose only the MANIFEST is different by the original package

>----- Original Message -----
>From: richardfearn at gmail.com
>To: jedim at vige.it
Cc: concurrency-interest at cs.oswego.edu
>Data: Sat, 18 Dec 2010 11:42:10 +0000
>Subject: Re: [concurrency-interest] jcip-annotations as OSGI bundle

>> I'm interested to make jcip-annotations OSGI compliant so it can be loaded inside a OSGI repository.
>> To do it it's enough add thee rows in the MANIFEST.MF:&#8232;&#8232;
>>
>> Bundle-SymbolicName: jcip-annotations&#8232;
>> Bundle-Version: 1.0
>> &#8232;Export-Package: net.jcip.annotations
>
>There's an OSGi bundle for the JCIP annotations in the SpringSource
>Bundle Repository, which you might be interested in:
>
>http://ebr.springsource.com/repository/app/bundle/version/detail?name=com.springsource.net.jcip.annotations&version=1.0.0
>
>Regards,
>
>Richard
> 


From chris.hegarty at oracle.com  Tue Dec 21 05:43:47 2010
From: chris.hegarty at oracle.com (Chris Hegarty)
Date: Tue, 21 Dec 2010 10:43:47 +0000
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for Collections.disjoint() [updated]
In-Reply-To: <4D100FF1.6060702@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>
	<4D100FF1.6060702@oracle.com>
Message-ID: <4D1084E3.9050504@oracle.com>

On 12/21/10 02:24 AM, David Holmes wrote:
> Functionality looks okay to me.
>
> I think those spec/doc clarifications may need to go through CCC though.

I agree with David, a CCC request should be filed for the spec changes. 
We should agree the spec changes on this mailing list before proposing them.

I understand where you're coming from with this spec change, but I think 
the additional text may be too restricting.

   "@throws NullPointerException ......... or if one collection
    contains {@code null} and the other collection does not permit
    {@code null} values."

For example, the following would be required to throw NPE ( but I don't 
believe your impl does):

   Set set = new HashSet();
   set.add(null);
   PriorityQueue pq = new PriorityQueue();
   Collections.disjoint(set, pq);

I think we may have to be a little more relaxed here, maybe just a 
cautionary note, "it may happen"???

-Chris.

>
> David
>
> Mike Duigou said the following on 12/21/10 11:48:
>> I've updated the webrev with Ulf's feedback.
>> http://cr.openjdk.java.net/~mduigou/6728865.2/webrev/
>>
>> The old heuristics:
>>
>> 1. If c1 is a Set then iterate over c2.
>>
>> 2. Iterate over the smaller Collection.
>>
>>
>> I believe that the || in the original should have been a &&
>>
>> I've rearranged it as branches in my revision.
>>
>>
>> The new heuristics:
>>
>> 1. If c1 is a Set then iterate over c2.
>>
>> 2. If c2 is a Set then iterate over c1.
>>
>> 3. If either collection is empty then result is always true.
>>
>> 4. Iterate over the smaller Collection.
>>
>> Mike
>>
>>
>>
>> On Dec 19 2010, at 16:42 , David Holmes wrote:
>>
>>> Hi Mike,
>>>
>>> Mike Duigou said the following on 12/20/10 10:29:
>>>> I have updated the webrev for CR 6728865 with R?mi's feedback. The
>>>> new webrev is at:
>>>> http://cr.openjdk.java.net/~mduigou/6728865.1/webrev/
>>>> The size() comparisons are now done only when both c1 and c2 are not
>>>> sets and I have removed the isEmpty() micro-optimization.
>>> So to summarise this change:
>>>
>>> 1. The original code checked for c1 being a set and not c2, but not
>>> vice-versa - this fixes that
>>>
>>> 2. This code adds an optimization when they are both not sets but at
>>> least one is empty
>>>
>>> Did I miss anything?
>>>
>>> Seems functionally sound to me, but I can't attest to any performance
>>> benefits.
>>>
>>> Cheers,
>>> David Holmes
>>

From chris.hegarty at oracle.com  Wed Dec 22 08:45:02 2010
From: chris.hegarty at oracle.com (Chris Hegarty)
Date: Wed, 22 Dec 2010 13:45:02 +0000
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for Collections.disjoint() [updated]
In-Reply-To: <E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>	<4D100FF1.6060702@oracle.com>
	<4D1084E3.9050504@oracle.com>	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>	<4D1118EF.1080300@oracle.com>
	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
Message-ID: <4D1200DE.3040107@oracle.com>

Mike,

On 12/21/10 09:38 PM, Mike Duigou wrote:
> Thanks. That's an important clarification to include. Here's the revised text:
>
>       *
>       *<p>Care must also be exercised when using collections that do not permit
>       * calling the {@code contains} method with a {@code null} value. If either
>       * collection does not permit {@code contains(null)} then both collections
>       * must not contain {@code null} values.
>       *
>
> and the @throws text:
>
>       * @throws NullPointerException if either collection is {@code null}. May
>       * also be thrown if one collection contains a {@code null} value and the
>       * other collection does not permit {@code contains(null)}.

My concern with this revised wording is that you are now specifying that 
the implementation must use contains() ( and not be implemented using a 
different strategy ). I guess an alternative implementation is unlikely, 
but this does appear overly restricting.

I wonder if its really necessary to add text to the NPE. A cautionary 
note may be sufficient. We could also throw ClassCastException, but 
there is no mention of it in the spec.

Sorry for being a pain about this, I'm just concerned with adding overly 
restricting spec.

Have we thought about catching/swallowing these exceptions?

-Chris.


>
> Mike
>
> On Dec 21 2010, at 13:15 , Eamonn McManus wrote:
>
>> I think that is still not quite right. The spec for Collection says that a Collection that does not support adding null values may or may not support looking them up. So in both places where you say "does not permit null values" I think you should probably say "does not permit looking up null values".
>>
>> ?amonn
>>
>> On 21/12/2010 20:35, Mike Duigou wrote:
>>> On Dec 21 2010, at 02:43 , Chris Hegarty wrote:
>>>
>>>> On 12/21/10 02:24 AM, David Holmes wrote:
>>>>> Functionality looks okay to me.
>>>>>
>>>>> I think those spec/doc clarifications may need to go through CCC though.
>>>> I agree with David, a CCC request should be filed for the spec changes. We should agree the spec changes on this mailing list before proposing them.
>>>>
>>>> I understand where you're coming from with this spec change, but I think the additional text may be too restricting.
>>>>
>>>>   "@throws NullPointerException ......... or if one collection
>>>>    contains {@code null} and the other collection does not permit
>>>>    {@code null} values."
>>>>
>>>> For example, the following would be required to throw NPE ( but I don't believe your impl does):
>>>>
>>>>   Set set = new HashSet();
>>>>   set.add(null);
>>>>   PriorityQueue pq = new PriorityQueue();
>>>>   Collections.disjoint(set, pq);
>>>>
>>>> I think we may have to be a little more relaxed here, maybe just a cautionary note, "it may happen"???
>>> You are correct that it's not guaranteed that NPE will be thrown. Here's the amended text for the main javadoc:
>>>
>>>       *<p>Care must also be exercised when using a mix of collections that
>>>       * permit {@code null} values and those that do not. If either
>>>       * collection does not permit {@code null} values then {@code null} must
>>>       * not be a value in either collection.
>>>       *
>>>
>>> and this is the revised @throw NullPointerException:
>>>
>>>       * @throws NullPointerException if either collection is {@code null}. May
>>>       * also be thrown if one collection contains a {@code null} value and the
>>>       * other collection does not permit {@code null} values.
>>>
>>>
>>> Note that the descriptive paragraph says "must not" because we don't commit to which collection is used for contains() and the @throw says "may" because, per your example, if the collection not permitting null is used for iteration then NPE will not be thrown.
>>>
>>> Mike
>>>
>

From forax at univ-mlv.fr  Wed Dec 22 10:07:41 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Wed, 22 Dec 2010 16:07:41 +0100
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D1200DE.3040107@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>	<4D1118EF.1080300@oracle.com>	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
	<4D1200DE.3040107@oracle.com>
Message-ID: <4D12143D.5030702@univ-mlv.fr>

Hi Chris,

On 12/22/2010 02:45 PM, Chris Hegarty wrote:
> Mike,
>
> On 12/21/10 09:38 PM, Mike Duigou wrote:
>> Thanks. That's an important clarification to include. Here's the 
>> revised text:
>>
>>       *
>>       *<p>Care must also be exercised when using collections that do 
>> not permit
>>       * calling the {@code contains} method with a {@code null} 
>> value. If either
>>       * collection does not permit {@code contains(null)} then both 
>> collections
>>       * must not contain {@code null} values.
>>       *
>>
>> and the @throws text:
>>
>>       * @throws NullPointerException if either collection is {@code 
>> null}. May
>>       * also be thrown if one collection contains a {@code null} 
>> value and the
>>       * other collection does not permit {@code contains(null)}.
>
> My concern with this revised wording is that you are now specifying 
> that the implementation must use contains() ( and not be implemented 
> using a different strategy ). I guess an alternative implementation is 
> unlikely, but this does appear overly restricting.
>
> I wonder if its really necessary to add text to the NPE. A cautionary 
> note may be sufficient. We could also throw ClassCastException, but 
> there is no mention of it in the spec.
>
> Sorry for being a pain about this, I'm just concerned with adding 
> overly restricting spec.
>
> Have we thought about catching/swallowing these exceptions?

What do you want to do in the catch block ?

>
> -Chris.


R?mi


From chris.hegarty at oracle.com  Wed Dec 22 10:10:52 2010
From: chris.hegarty at oracle.com (Chris Hegarty)
Date: Wed, 22 Dec 2010 15:10:52 +0000
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D12143D.5030702@univ-mlv.fr>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>	<4D1118EF.1080300@oracle.com>	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>	<4D1200DE.3040107@oracle.com>
	<4D12143D.5030702@univ-mlv.fr>
Message-ID: <4D1214FC.6080909@oracle.com>

On 12/22/10 03:07 PM, R?mi Forax wrote:
> Hi Chris,
>
> On 12/22/2010 02:45 PM, Chris Hegarty wrote:
>> Mike,
>>
>> On 12/21/10 09:38 PM, Mike Duigou wrote:
>>> Thanks. That's an important clarification to include. Here's the
>>> revised text:
>>>
>>> *
>>> *<p>Care must also be exercised when using collections that do not
>>> permit
>>> * calling the {@code contains} method with a {@code null} value. If
>>> either
>>> * collection does not permit {@code contains(null)} then both
>>> collections
>>> * must not contain {@code null} values.
>>> *
>>>
>>> and the @throws text:
>>>
>>> * @throws NullPointerException if either collection is {@code null}. May
>>> * also be thrown if one collection contains a {@code null} value and the
>>> * other collection does not permit {@code contains(null)}.
>>
>> My concern with this revised wording is that you are now specifying
>> that the implementation must use contains() ( and not be implemented
>> using a different strategy ). I guess an alternative implementation is
>> unlikely, but this does appear overly restricting.
>>
>> I wonder if its really necessary to add text to the NPE. A cautionary
>> note may be sufficient. We could also throw ClassCastException, but
>> there is no mention of it in the spec.
>>
>> Sorry for being a pain about this, I'm just concerned with adding
>> overly restricting spec.
>>
>> Have we thought about catching/swallowing these exceptions?
>
> What do you want to do in the catch block ?

Would it make sense to simply swallow the exception ( do nothing ) and 
continue with the next element? Clearly if contains() throws and 
Exception then the collection does not contain the given element?

-Chris.

>
>>
>> -Chris.
>
>
> R?mi
>

From forax at univ-mlv.fr  Wed Dec 22 10:30:59 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Wed, 22 Dec 2010 16:30:59 +0100
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D1214FC.6080909@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>	<4D1118EF.1080300@oracle.com>	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>	<4D1200DE.3040107@oracle.com>
	<4D12143D.5030702@univ-mlv.fr> <4D1214FC.6080909@oracle.com>
Message-ID: <4D1219B3.8010801@univ-mlv.fr>

On 12/22/2010 04:10 PM, Chris Hegarty wrote:
> On 12/22/10 03:07 PM, R?mi Forax wrote:
>> Hi Chris,
>>
>> On 12/22/2010 02:45 PM, Chris Hegarty wrote:
>>> Mike,
>>>
>>> On 12/21/10 09:38 PM, Mike Duigou wrote:
>>>> Thanks. That's an important clarification to include. Here's the
>>>> revised text:
>>>>
>>>> *
>>>> *<p>Care must also be exercised when using collections that do not
>>>> permit
>>>> * calling the {@code contains} method with a {@code null} value. If
>>>> either
>>>> * collection does not permit {@code contains(null)} then both
>>>> collections
>>>> * must not contain {@code null} values.
>>>> *
>>>>
>>>> and the @throws text:
>>>>
>>>> * @throws NullPointerException if either collection is {@code 
>>>> null}. May
>>>> * also be thrown if one collection contains a {@code null} value 
>>>> and the
>>>> * other collection does not permit {@code contains(null)}.
>>>
>>> My concern with this revised wording is that you are now specifying
>>> that the implementation must use contains() ( and not be implemented
>>> using a different strategy ). I guess an alternative implementation is
>>> unlikely, but this does appear overly restricting.
>>>
>>> I wonder if its really necessary to add text to the NPE. A cautionary
>>> note may be sufficient. We could also throw ClassCastException, but
>>> there is no mention of it in the spec.
>>>
>>> Sorry for being a pain about this, I'm just concerned with adding
>>> overly restricting spec.
>>>
>>> Have we thought about catching/swallowing these exceptions?
>>
>> What do you want to do in the catch block ?
>
> Would it make sense to simply swallow the exception ( do nothing ) and 
> continue with the next element? Clearly if contains() throws and 
> Exception then the collection does not contain the given element?

I see,
but the same argument can be applied to contains() i.e why doesn't it 
return false instead of throwing a NPE or a CCE ?

>
> -Chris.

R?mi


From gregg at cytetech.com  Wed Dec 22 10:34:14 2010
From: gregg at cytetech.com (Gregg Wonderly)
Date: Wed, 22 Dec 2010 09:34:14 -0600
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D1214FC.6080909@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>
	<4D0EA65D.5090101@oracle.com>
	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>
	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>
	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>
	<4D1118EF.1080300@oracle.com>
	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
	<4D1200DE.3040107@oracle.com> <4D12143D.5030702@univ-mlv.fr>
	<4D1214FC.6080909@oracle.com>
Message-ID: <4D121A76.4040203@cytetech.com>

On 12/22/2010 9:10 AM, Chris Hegarty wrote:
> On 12/22/10 03:07 PM, R?mi Forax wrote:
>> On 12/22/2010 02:45 PM, Chris Hegarty wrote:
>>> Have we thought about catching/swallowing these exceptions?
>>
>> What do you want to do in the catch block ?
>
> Would it make sense to simply swallow the exception ( do nothing ) and continue
> with the next element? Clearly if contains() throws and Exception then the
> collection does not contain the given element?

It seems that Logger use here might be useful.  A FINE level log of the stack 
trace would allow the user to discover why the failure/success return was not as 
they expected.  From some perspectives, I'd be tempted to log at WARNING for 
myself as this does represent an unexpected, yet non-fatal condition in the 
software.

Gregg Wonderly

From chris.hegarty at oracle.com  Wed Dec 22 10:55:33 2010
From: chris.hegarty at oracle.com (Chris Hegarty)
Date: Wed, 22 Dec 2010 15:55:33 +0000
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D121A76.4040203@cytetech.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>
	<4D0EA65D.5090101@oracle.com>
	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>
	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>
	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>
	<4D1118EF.1080300@oracle.com>
	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
	<4D1200DE.3040107@oracle.com> <4D12143D.5030702@univ-mlv.fr>
	<4D1214FC.6080909@oracle.com> <4D121A76.4040203@cytetech.com>
Message-ID: <4D121F75.2000001@oracle.com>

On 12/22/10 03:34 PM, Gregg Wonderly wrote:
> On 12/22/2010 9:10 AM, Chris Hegarty wrote:
>> On 12/22/10 03:07 PM, R?mi Forax wrote:
>>> On 12/22/2010 02:45 PM, Chris Hegarty wrote:
>>>> Have we thought about catching/swallowing these exceptions?
>>>
>>> What do you want to do in the catch block ?
>>
>> Would it make sense to simply swallow the exception ( do nothing ) and
>> continue
>> with the next element? Clearly if contains() throws and Exception then
>> the
>> collection does not contain the given element?
>
> It seems that Logger use here might be useful. A FINE level log of the
> stack trace would allow the user to discover why the failure/success
> return was not as they expected. From some perspectives, I'd be tempted
> to log at WARNING for myself as this does represent an unexpected, yet
> non-fatal condition in the software.

Yes, this is a good proposal. I guess we need to establish whether we 
consider passing these "incompatible" collections a programmer error or 
not. I was just trying to ensure that we had considered all options.

-Chris.

>
> Gregg Wonderly

From chris.hegarty at oracle.com  Wed Dec 22 10:45:23 2010
From: chris.hegarty at oracle.com (Chris Hegarty)
Date: Wed, 22 Dec 2010 15:45:23 +0000
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D1219B3.8010801@univ-mlv.fr>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>	<4D1118EF.1080300@oracle.com>	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>	<4D1200DE.3040107@oracle.com>
	<4D12143D.5030702@univ-mlv.fr> <4D1214FC.6080909@oracle.com>
	<4D1219B3.8010801@univ-mlv.fr>
Message-ID: <4D121D13.5050002@oracle.com>

On 12/22/10 03:30 PM, R?mi Forax wrote:
> ...
>>
>> Would it make sense to simply swallow the exception ( do nothing ) and
>> continue with the next element? Clearly if contains() throws and
>> Exception then the collection does not contain the given element?
>
> I see,
> but the same argument can be applied to contains() i.e why doesn't it
> return false instead of throwing a NPE or a CCE ?

Good point. I guess it could be seen as programmer error test for null 
in a collection that cannot possibly contain it. Although, these 
exceptions are optional ( in some collections ).

For disjoint we don't have this (optional) constraint, and I'm not sure 
if we should introduce it. Some implementations of disjoint() could 
already be consuming any NPE/CFE.

I'm not saying that this is the right approach, I'm just wondering if we 
considered this option.

-Chris

>
>>
>> -Chris.
>
> R?mi
>

From forax at univ-mlv.fr  Wed Dec 22 11:49:41 2010
From: forax at univ-mlv.fr (=?ISO-8859-1?Q?R=E9mi_Forax?=)
Date: Wed, 22 Dec 2010 17:49:41 +0100
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D121F75.2000001@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>
	<4D0EA65D.5090101@oracle.com>
	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>
	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>
	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>
	<4D1118EF.1080300@oracle.com>
	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
	<4D1200DE.3040107@oracle.com> <4D12143D.5030702@univ-mlv.fr>
	<4D1214FC.6080909@oracle.com> <4D121A76.4040203@cytetech.com>
	<4D121F75.2000001@oracle.com>
Message-ID: <4D122C25.2050805@univ-mlv.fr>

On 12/22/2010 04:55 PM, Chris Hegarty wrote:
> On 12/22/10 03:34 PM, Gregg Wonderly wrote:
>> On 12/22/2010 9:10 AM, Chris Hegarty wrote:
>>> On 12/22/10 03:07 PM, R?mi Forax wrote:
>>>> On 12/22/2010 02:45 PM, Chris Hegarty wrote:
>>>>> Have we thought about catching/swallowing these exceptions?
>>>>
>>>> What do you want to do in the catch block ?
>>>
>>> Would it make sense to simply swallow the exception ( do nothing ) and
>>> continue
>>> with the next element? Clearly if contains() throws and Exception then
>>> the
>>> collection does not contain the given element?
>>
>> It seems that Logger use here might be useful. A FINE level log of the
>> stack trace would allow the user to discover why the failure/success
>> return was not as they expected. From some perspectives, I'd be tempted
>> to log at WARNING for myself as this does represent an unexpected, yet
>> non-fatal condition in the software.
>
> Yes, this is a good proposal. I guess we need to establish whether we 
> consider passing these "incompatible" collections a programmer error 
> or not. I was just trying to ensure that we had considered all options.
>
> -Chris.

The main problem with logging is that you may see a lot of records
if the application compares huge of collections of turtles and nipples 
(i.e collections of incompatible type)
Moreover if a code relies on catching a CCE in that case, if we log or 
silently ignore the CCE,
the performance will drop.

>
>>
>> Gregg Wonderly

R?mi

From chris.hegarty at oracle.com  Thu Dec 23 05:02:19 2010
From: chris.hegarty at oracle.com (Chris Hegarty)
Date: Thu, 23 Dec 2010 10:02:19 +0000
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for Collections.disjoint() [updated]
In-Reply-To: <C7C20C38-2989-4CC8-8F8B-76B21C4C4EAB@oracle.com>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>	<4D0EA65D.5090101@oracle.com>	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>	<4D1118EF.1080300@oracle.com>	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>	<4D1200DE.3040107@oracle.com>
	<C7C20C38-2989-4CC8-8F8B-76B21C4C4EAB@oracle.com>
Message-ID: <4D131E2B.1080702@oracle.com>

Mike,

I'm happy with the latest wording, it looks much better.

-Chris.

On 23/12/2010 01:23, Mike Duigou wrote:
> Here's another try that tries to use similar wording to Collection:
>       *
>       *<p>Care must also be exercised when using collections that have
>       * restrictions on the elements that they may contain. Collection
>       * implementations are allowed to throw exceptions for any operation
>       * involving elements they deem ineligible. For absolute safety the
>       * specified collections should contain only elements which are
>       * eligible elements for both collections.
>
> And for the throws:
>
>       * @throws NullPointerException if either collection is {@code null}.
>       * @throws NullPointerException if one collection contains a {@code null}
>       * element and {@code null} is not an eligible element for the other collection.
>       * (optional)
>       * @throws ClassCastException if one collection contains an element that is
>       * of a type which is ineligible for the other collection. (optional)
>
>
> On Dec 22 2010, at 05:45 , Chris Hegarty wrote:
>
>> My concern with this revised wording is that you are now specifying that the implementation must use contains() ( and not be implemented using a different strategy ). I guess an alternative implementation is unlikely, but this does appear overly restricting.
>
> At least four alternate (though impractical) implementations are possible which don't directly use contains() :
>
> Collection<?>  clone = c1.clone();
> for(Object e : c2) {
>    if(clone.remove(e)) {
>      return false;
>    }
> }
>
> and
>
> Collection<?>  clone = c1.clone();
> clone.retainAll(c2);
> return !clone.isEmpty();
>
> and
>
> Collection<?>  clone = c1.clone();
> clone.removeAll(c2);
> return clone.size() == c1.size();
>
> and
>
> for(Object e : c1) {
>    if(null == e) {
>      for(Object o : c2) {
>        if(null == o) {
>          return false;
>        }
>      }
>    } else {
>      for(Object o : c2) {
>        if((e == o) || ((e.hashCode() == o.hashCode())&&  e.equals(o))) {
>          return false;
>        }
>      }
>    }
> }
> return true;
>
> All but the last use optional operations. The last actually avoids the problem with ineligible elements altogether at a very likely performance cost. I won't suggest we switch to this implementation. ;-) It could also be improved by calculating the hashCodes of all c2 elements, and sorting them into an array to be binary searched for each e. For largish non-Set collections this would actually be faster than the current contains() based impl.
>
>>
>> I wonder if its really necessary to add text to the NPE. A cautionary note may be sufficient. We could also throw ClassCastException, but there is no mention of it in the spec.
>>
>> Sorry for being a pain about this, I'm just concerned with adding overly restricting spec.
>
> I think your concern is correct. Specifying contains() is too restrictive.
>
>> Have we thought about catching/swallowing these exceptions?
>
> I'm uncomfortable turning the NPE into a "false" because there may be unknown circumstances such as concurrent modification which could cause the same effect.
>
> Mike

From gregg at cytetech.com  Sat Dec 25 11:58:10 2010
From: gregg at cytetech.com (Gregg Wonderly)
Date: Sat, 25 Dec 2010 10:58:10 -0600
Subject: [concurrency-interest] Review for CR 6728865 : Improved
 heuristics for	Collections.disjoint() [updated]
In-Reply-To: <4D122C25.2050805@univ-mlv.fr>
References: <F8DB7781-92B9-4D12-83CF-8FAA63FA41A5@oracle.com>
	<4D0EA65D.5090101@oracle.com>
	<46C51E8C-6F3A-4F54-8070-100BFED61D1A@oracle.com>
	<4D100FF1.6060702@oracle.com>	<4D1084E3.9050504@oracle.com>
	<76AFCC5F-E660-4934-9037-E9F0504A04A4@oracle.com>
	<4D1118EF.1080300@oracle.com>
	<E38BB348-4CCC-4645-BCA8-3DB72EF49D71@oracle.com>
	<4D1200DE.3040107@oracle.com> <4D12143D.5030702@univ-mlv.fr>
	<4D1214FC.6080909@oracle.com> <4D121A76.4040203@cytetech.com>
	<4D121F75.2000001@oracle.com> <4D122C25.2050805@univ-mlv.fr>
Message-ID: <4D1622A2.1070906@cytetech.com>

On 12/22/2010 10:49 AM, R?mi Forax wrote:
> On 12/22/2010 04:55 PM, Chris Hegarty wrote:
>> On 12/22/10 03:34 PM, Gregg Wonderly wrote:
>>> On 12/22/2010 9:10 AM, Chris Hegarty wrote:
>>>> On 12/22/10 03:07 PM, R?mi Forax wrote:
>>>>> On 12/22/2010 02:45 PM, Chris Hegarty wrote:
>>>>>> Have we thought about catching/swallowing these exceptions?
>>>>>
>>>>> What do you want to do in the catch block ?
>>>>
>>>> Would it make sense to simply swallow the exception ( do nothing ) and
>>>> continue
>>>> with the next element? Clearly if contains() throws and Exception then
>>>> the
>>>> collection does not contain the given element?
>>>
>>> It seems that Logger use here might be useful. A FINE level log of the
>>> stack trace would allow the user to discover why the failure/success
>>> return was not as they expected. From some perspectives, I'd be tempted
>>> to log at WARNING for myself as this does represent an unexpected, yet
>>> non-fatal condition in the software.
>>
>> Yes, this is a good proposal. I guess we need to establish whether we consider
>> passing these "incompatible" collections a programmer error or not. I was just
>> trying to ensure that we had considered all options.
>>
>> -Chris.
>
> The main problem with logging is that you may see a lot of records
> if the application compares huge of collections of turtles and nipples (i.e
> collections of incompatible type)
> Moreover if a code relies on catching a CCE in that case, if we log or silently
> ignore the CCE,
> the performance will drop.

So the decision about FINE vs WARNING would be part of what to consider.  If the 
program is already misbehaving because the 'null' is not a an acceptable 
situation, then it seems like the logging would be useful to discover this. 
Having the problem at WARNING makes it more visible, but can also be turned off 
by the reconfiguration of that Logger instance's level.

I use a LogManager which is a Jini service instance (http://logman.dev.java.net) 
on my JVMs so that I can connect remotely, watch the logging that I want, and 
adjust levels at runtime to make things come and go as I am watching over long 
running processes.  I believe JMX can also be used to adjust levels.

For me, adjusting logging levels is a regular thing I do.  In the current state 
of affairs in Java, because NPE is a runtime exception, it is something that 
should be caught by a guard catch on any thread whose existence is mandatory in 
a JVM.  So just rethrowing it might be the thing to do if logging seems like 
such a bad thing (TM).

Gregg Wonderly

From alexdmiller at yahoo.com  Wed Dec 29 20:12:42 2010
From: alexdmiller at yahoo.com (Alex Miller)
Date: Wed, 29 Dec 2010 17:12:42 -0800 (PST)
Subject: [concurrency-interest] fork-join usage questions
Message-ID: <276550.52636.qm@web32504.mail.mud.yahoo.com>

I'm looking for some guidance on a processing system where I'm considering the 
use of fork/join.  Processing involves executing a compute-only tree (a DAG) of 
computation over a base set of data that exists at the leaf nodes.  I'd like to 
be able to execute independent nodes in parallel and also use parallelism to 
execute data within individual nodes. I think all of that seems like a good 
match for fork/join.

The kicker is that the base data has been requested and is arriving 
asynchronously.  I don't want to wait until all data is retrieved to begin 
processing; I'd like to process portions of the tree on the data that has 
arrived as much as possible.  Clearly waiting for async I/O is not a good match 
for fork/join.

I've been contemplating a system that would watch for the data to arrive and as 
a usefully large chunk accumulates it would trigger a top-level FJtask, which 
would fork through it's computation tree as necessary.  These tasks would either 
bottom out at data and process it or need more data from a branch and bail out. 
The process would restart when more data arrives.  Eventually, all data would 
arrive, all computation would complete, and the results would be complete.    

I've built something similar to this in the past using an Executor style system 
(this was before java.util.concurrent existed but was very similar in using a 
worker thread pool and an execution queue).  I'm looking to build a 
high-throughput system (more so than low latency) and one that can fully 
leverage many-core systems.

My questions:
1) Is the overhead of restarting the task execution for each and all that so 
high that I will swamp any potential benefits from using FJ over a classic 
worker/queue style system?  Assuming I have many of these in-flight at once, I'm 
assuming the threads are always busy and there is presumably lots of contention 
on a single worker queue.
2) Are there issues with running potentially many such *independent* computation 
trees in a FJ pool?  
3) Is there some way to more cleanly deal with the asynchronous waits in a 
custom FJ task?
4) Is there a much different paradigm I should be looking at?  I've hacked 
around a bit on both continuation and actor style systems for this but it seems 
like they might have too much overhead.  

Any suggestions appreciated....
Alex Miller
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101229/7dbc4e99/attachment.html>

From gdenys at yahoo.com  Thu Dec 30 05:46:22 2010
From: gdenys at yahoo.com (Geert Denys)
Date: Thu, 30 Dec 2010 02:46:22 -0800 (PST)
Subject: [concurrency-interest] fork-join usage questions
In-Reply-To: <276550.52636.qm@web32504.mail.mud.yahoo.com>
References: <276550.52636.qm@web32504.mail.mud.yahoo.com>
Message-ID: <22996.37763.qm@web161209.mail.bf1.yahoo.com>

FJ is quite suited for tasks that need to wait (join) for results of lower level 
tasks. If one of those branch tasks is blocking (waiting for I/O), the FJ 
framework should select other tasks that are runnable instead of blocking to 
join the waiting branch task.

We use FJ to generate and store image tiles and recombine them to higher levels. 
We have had very good experiences with FJ. I notice we join child tasks in the 
reverse order of forking them, because we had issues with that at some point, 
but that may not be needed anymore.

As for running independent computation in a single FJ pool, that should be no 
problem since the recommended practise is to have a single FJ pool execute all 
your different kinds of FJ tasks.

Regards,
Geert.



________________________________
From: Alex Miller <alexdmiller at yahoo.com>
To: concurrency-interest at cs.oswego.edu
Sent: Thu, December 30, 2010 2:12:42 AM
Subject: [concurrency-interest] fork-join usage questions


I'm looking for some guidance on a processing system where I'm considering the 
use of fork/join.  Processing involves executing a compute-only tree (a DAG) of 
computation over a base set of data that exists at the leaf nodes.  I'd like to 
be able to execute independent nodes in parallel and also use parallelism to 
execute data within individual nodes. I think all of that seems like a good 
match for fork/join.

The kicker is that the base data has been requested and is arriving 
asynchronously.  I don't want to wait until all data is retrieved to begin 
processing; I'd like to process portions of the tree on the data that has 
arrived as much as possible.  Clearly waiting for async I/O is not a good match 
for  fork/join.

I've been contemplating a system that would watch for the data to arrive and as 
a usefully large chunk accumulates it would trigger a top-level FJtask, which 
would fork through it's computation tree as necessary.  These tasks would either 
bottom out at data and process it or need more data from a branch and bail out. 
The process would restart when more data arrives.  Eventually, all data would 
arrive, all computation would complete, and the results would be complete.    

I've built something similar to this in the past using an Executor style system 
(this was before java.util.concurrent existed but was very similar in using a 
worker thread pool and an execution queue).  I'm looking to build a 
high-throughput system (more so than low latency) and one that can fully 
leverage many-core systems.

My questions:
1) Is the overhead of  restarting the task execution for each and all that so 
high that I will swamp any potential benefits from using FJ over a classic 
worker/queue style system?  Assuming I have many of these in-flight at once, I'm 
assuming the threads are always busy and there is presumably lots of contention 
on a single worker queue.
2) Are there issues with running potentially many such *independent* computation 
trees in a FJ pool?  
3) Is there some way to more cleanly deal with the asynchronous waits in a 
custom FJ task?
4) Is there a much different paradigm I should be looking at?  I've hacked 
around a bit on both continuation and actor style systems for this but it seems 
like they might have too much overhead.  

Any suggestions appreciated....
Alex Miller



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20101230/17ae378c/attachment.html>

From dmitry.miltsov at oracle.com  Thu Dec 30 12:03:54 2010
From: dmitry.miltsov at oracle.com (dmitry.miltsov at oracle.com)
Date: Thu, 30 Dec 2010 09:03:54 -0800 (PST)
Subject: [concurrency-interest] Auto Reply: Concurrency-interest Digest,
	Vol 71, Issue 26
Message-ID: <f3c0339a-76f2-48c5-b9ac-cd79ea06b8d7@default>

This is an auto-replied message. I'm on vacation from Dec 27, returning to the office on Jan 11th.
My backup persons are:
java.lang - Victor Rudometov;
java.security, javax.security - Paul Rank;
java.text, java.util - Yuri Gaevsky.
Please contact my manager Pavel Klodin regarding other issues.

Thanks,
Dmitry Miltsov


From dvyukov at gmail.com  Thu Dec 30 15:38:38 2010
From: dvyukov at gmail.com (Dmitriy V'jukov)
Date: Thu, 30 Dec 2010 23:38:38 +0300
Subject: [concurrency-interest] [ANN] 1024cores
Message-ID: <AANLkTi=heyxOpGt-6uadoNfjxQ+QV8NVKF=yMQtcrk0y@mail.gmail.com>

Hi,

I want to announce my new site devoted to concurrency, parallel
computations, wait-free/lock-free synchronization algorithms,
multicore, scalable architecture, hardware aspects and related topics:
http://www.1024cores.net

Well, I am a C/C++ developer and thus I write mostly in that context,
and code samples are in C/C++. However, most aspects are actually
language-independent - the same algorithms can be used in both
languages, architectural aspects are the same, hardware aspects
equally affect both.

The site is only a week old, so there are not much materials available
as of now. However I plan to constantly add new materials, so I
agitate you for subscribing to the RSS feed:
http://feeds.feedburner.com/1024cores
and/or following the blog:
http://blog.1024cores.net

Happy Christmas, New Year, Solstice or whatever your winter celebration is! ;)

--
Dmitriy V'jukov

All about lock-free algorithms, multicore, scalability, parallel
computing and related topics
www.1024cores.net

From pramod.mudgal at gmail.com  Fri Dec 31 13:40:16 2010
From: pramod.mudgal at gmail.com (Pramod Mudgal)
Date: Sat, 1 Jan 2011 00:10:16 +0530
Subject: [concurrency-interest] Concurrency-interest Digest, Vol 71,
	Issue 27
In-Reply-To: <mailman.1.1293814801.27016.concurrency-interest@cs.oswego.edu>
References: <mailman.1.1293814801.27016.concurrency-interest@cs.oswego.edu>
Message-ID: <AANLkTink3rTYmEv==EgD_DG1yFrMtOLBLrgss0yim43k@mail.gmail.com>

Happy new year to all of you :)
with regards,
Pramod Mudgal


On Fri, Dec 31, 2010 at 10:30 PM, <
concurrency-interest-request at cs.oswego.edu> wrote:

> Send Concurrency-interest mailing list submissions to
>        concurrency-interest at cs.oswego.edu
>
> To subscribe or unsubscribe via the World Wide Web, visit
>        http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> or, via email, send a message with subject or body 'help' to
>        concurrency-interest-request at cs.oswego.edu
>
> You can reach the person managing the list at
>        concurrency-interest-owner at cs.oswego.edu
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Concurrency-interest digest..."
>
>
> Today's Topics:
>
>   1. Auto Reply: Concurrency-interest Digest,  Vol 71, Issue 26
>      (dmitry.miltsov at oracle.com)
>   2. [ANN] 1024cores (Dmitriy V'jukov)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Thu, 30 Dec 2010 09:03:54 -0800 (PST)
> From: dmitry.miltsov at oracle.com
> Subject: [concurrency-interest] Auto Reply: Concurrency-interest
>        Digest, Vol 71, Issue 26
> To: concurrency-interest at cs.oswego.edu
> Message-ID: <f3c0339a-76f2-48c5-b9ac-cd79ea06b8d7 at default>
> Content-Type: text/plain; charset=utf-8
>
> This is an auto-replied message. I'm on vacation from Dec 27, returning to
> the office on Jan 11th.
> My backup persons are:
> java.lang - Victor Rudometov;
> java.security, javax.security - Paul Rank;
> java.text, java.util - Yuri Gaevsky.
> Please contact my manager Pavel Klodin regarding other issues.
>
> Thanks,
> Dmitry Miltsov
>
>
>
> ------------------------------
>
> Message: 2
> Date: Thu, 30 Dec 2010 23:38:38 +0300
> From: "Dmitriy V'jukov" <dvyukov at gmail.com>
> Subject: [concurrency-interest] [ANN] 1024cores
> To: concurrency-interest at cs.oswego.edu
> Message-ID:
>        <AANLkTi=heyxOpGt-6uadoNfjxQ+QV8NVKF=yMQtcrk0y at mail.gmail.com>
> Content-Type: text/plain; charset=UTF-8
>
> Hi,
>
> I want to announce my new site devoted to concurrency, parallel
> computations, wait-free/lock-free synchronization algorithms,
> multicore, scalable architecture, hardware aspects and related topics:
> http://www.1024cores.net
>
> Well, I am a C/C++ developer and thus I write mostly in that context,
> and code samples are in C/C++. However, most aspects are actually
> language-independent - the same algorithms can be used in both
> languages, architectural aspects are the same, hardware aspects
> equally affect both.
>
> The site is only a week old, so there are not much materials available
> as of now. However I plan to constantly add new materials, so I
> agitate you for subscribing to the RSS feed:
> http://feeds.feedburner.com/1024cores
> and/or following the blog:
> http://blog.1024cores.net
>
> Happy Christmas, New Year, Solstice or whatever your winter celebration is!
> ;)
>
> --
> Dmitriy V'jukov
>
> All about lock-free algorithms, multicore, scalability, parallel
> computing and related topics
> www.1024cores.net
>
>
> ------------------------------
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
> End of Concurrency-interest Digest, Vol 71, Issue 27
> ****************************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20110101/47dab82f/attachment.html>

