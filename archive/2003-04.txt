From ken.horn@db.com  Wed Apr  9 09:42:17 2003
From: ken.horn@db.com (Ken Horn)
Date: Wed, 9 Apr 2003 09:42:17 +0100
Subject: [concurrency-interest] Recursion -> FJTasks question
Message-ID: <OF68C4880D.646731B4-ON80256D03.002DCC03@db.com>

Appologies for not getting back to you before. The ONLY locking code in my implementation (unless the XML lib, dom4j is blocking, which the stack trace doesn't imply) is the synchronized method java.util.Vector.add(object) which is called on a single instance passed to all the tasks. I thought that would be OK.

Since shortly after sending the email I haven't been able to get it to hang again, should it hang once more, I'll try to investigate further.

Sorry for bringing up FJTasks on the list again. In JSR166 -- is FutureTask intended to serve a similar purpose, in terms of pooled threads, and async processing?

Thanks for the info.

Ken.



                                                                                                                                                                                   
                      Doug Lea <dl@cs.oswego.edu>                                                                                                                                  
                      Sent by:                             To:       Ken Horn/DMGIT/DMG UK/DeuBa@DMG UK                                                                            
                      concurrency-interest-admin@cs        cc:       Concurrency-interest@altair.cs.oswego.edu                                                                     
                      .oswego.edu                          Subject:  Re: [concurrency-interest] Recursion -> FJTasks question                                                      
                                                                                                                                                                                   
                                                                                                                                                                                   
                      29/03/2003 16:34                                                                                                                                             
                                                                                                                                                                                   
                                                                                                                                                                                   





Hi Ken;

First, the dl.u.c Fork/Join framework won't be part of JSR-166. This
was just a decision about generality -- FJTasks are too nichy to put
into JDK. I'll continue to make them available separately though. But
anyway...

> However this sometimes never completes --
>       my taskGroup.invoke()  (on thread main), never returns, wait()ing in awaitingTermination(),
> ...

It looks like at least one of your tasks are blocking waiting for
others outside of a FJTask.join or yield, which this framework
explicitly doesn't handle.  In general, all code in the run methods of
FJTasks must be lock-free and IO-free (See my CPJ book sec 4.3 for
some discussion).  While you can in many cases get away with using
locks or IO, they require case-by-case analysis, and might not work
out in your case. (The whole idea of FJTasks is to impose non-blocking
constraitns in exchange for very fast execution on MPs). Also, make
sure that all variables viasible across tasks are declared as
volatile.  From what you wrote, I don't have a more specific
diagnosis, but hopefully this will steer you in the right direction.

-Doug
_______________________________________________
Concurrency-interest mailing list
Concurrency-interest@altair.cs.oswego.edu
http://altair.cs.oswego.edu/mailman/listinfo/concurrency-interest





--

This e-mail may contain confidential and/or privileged information. If you are not the intended recipient (or have received this e-mail in error) please notify the sender immediately and destroy this e-mail. Any unauthorized copying, disclosure or distribution of the material in this e-mail is strictly forbidden.



From Joerg.Thoennes@macd.com  Wed Apr  9 10:07:55 2003
From: Joerg.Thoennes@macd.com (Joerg Thoennes)
Date: Wed, 09 Apr 2003 11:07:55 +0200
Subject: [concurrency-interest] Extending Executors
In-Reply-To: <15934.25478.899930.572362@altair.cs.oswego.edu>
References: <15934.25478.899930.572362@altair.cs.oswego.edu>
Message-ID: <3E93E2EB.9050808@macd.com>

> Thanks to those posting examples and issues about executors!  We are
> going to go back into hiding now to rework a few things. But
> additional comments and concerns are still welcome.

On the webpage I read:

Coming attractions

     * The next major release will be preliminary implementation of JSR 166.

Since we want to switch to util.concurrent instead of using our own threading stuff,
I wonder when this will approximately be. Shall we wait some days, weeks, month or
just use util.concurrent in the meantime.

Cheers, Jörg

-- 
Joerg Thoennes
                                http://macd.com
Tel.: +49 (0)241 44597-24      Macdonald Associates GmbH
Fax : +49 (0)241 44597-10      Lothringer Str. 52, D-52070 Aachen


From dl@cs.oswego.edu  Wed Apr  9 12:03:26 2003
From: dl@cs.oswego.edu (Doug Lea)
Date: Wed, 9 Apr 2003 07:03:26 -0400
Subject: [concurrency-interest] Extending Executors
In-Reply-To: <3E93E2EB.9050808@macd.com>
References: <15934.25478.899930.572362@altair.cs.oswego.edu>
 <3E93E2EB.9050808@macd.com>
Message-ID: <16019.65022.257917.933509@altair.cs.oswego.edu>

> The next major release will be preliminary implementation of JSR 166.
> 
> Since we want to switch to util.concurrent instead of using our own threading stuff,
> I wonder when this will approximately be. Shall we wait some days, weeks, month or
> just use util.concurrent in the meantime.


Hopefully about a month. Maybe 2 months. I was aiming for a
preliminary release around now, but spent a lot longer than planned to
investigate some new locking algorithms, some of which will be used in
some of the lock and synchronizer (semaphores etc) classes.

-Doug

From wms@igoweb.org  Sun Apr 13 01:51:09 2003
From: wms@igoweb.org (William M. Shubert)
Date: 12 Apr 2003 17:51:09 -0700
Subject: [concurrency-interest] Enforced lock ordering
Message-ID: <1050195071.3087.16.camel@desktop.igoweb.org>

Hi. I just joined the list, and see that last month there was a post
related to enforced lock ordering. Before all threaded applications I've
used had a lock order to prevent deadlock, and in some cases a C library
that forces all locks to be strictly ordered and aborts the program when
you try to acquire locks out of order was used. With the right tool set,
checking your lock ordering can be done pretty painlessly, and it helps
avoid disasterous "about once a month the damn program just locks up"
type bugs. I see that the concurrency API is geared more towards using
timeouts, but that seems to really be asking for major problems on
systems where reliability is important - if you get halfway through a
procedure, then timeout on a lock indicating possible deadlock, you must
be able to safely undo all work so far. This would be a process that is
tricky, happens rarely, and is hard to test, a great way to make sure
there are bugs in your code.

I made a cut at a library to force lock ordering for the current java
monitor operations. You can see javadoc at
http://www.igoweb.org/~wms/org/igoweb/util/LockOrder.html - it just
requires an extra function call before each "synchronized" or "wait"
block. These extra function calls throw runtime exceptions if the
operation you are about to perform would break lock ordering. The
implementation was quite simple (under 300 lines). Any thoughts on
providing such a system to go with the semaphores, etc., of the
concurrency API?



From tim@peierls.net  Sun Apr 13 03:03:23 2003
From: tim@peierls.net (Tim Peierls)
Date: Sat, 12 Apr 2003 22:03:23 -0400
Subject: [concurrency-interest] Enforced lock ordering
References: <1050195071.3087.16.camel@desktop.igoweb.org>
Message-ID: <3E98C56B.C2FC3BCF@peierls.net>

William M. Shubert wrote:
> I made a cut at a library to force lock ordering for the current java
> monitor operations. You can see javadoc at
> http://www.igoweb.org/~wms/org/igoweb/util/LockOrder.html 

I get a 404 response for this link.

--tim


From mwh@cs.umd.edu  Wed Apr 30 02:13:18 2003
From: mwh@cs.umd.edu (Michael Hicks)
Date: Tue, 29 Apr 2003 21:13:18 -0400
Subject: [concurrency-interest] applications of futures?
Message-ID: <001101c30eb5$af494570$6501a8c0@hicks>

Hi all.
I've recently become interested in the idea of using futures +
asynchronous methods as a means of concurrent programming, and I'm
curious: how many of you on this list use futures in your applications
(or know of applications that use them)?  For those that do, what are
applications and/or their characteristics?  What do you see as the
benefits and limitations of futures?

Thanks in advance,
Mike



