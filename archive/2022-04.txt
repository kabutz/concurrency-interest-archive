Subject: Re: [concurrency-interest] ForkJoin updates
From: Doug Lea via Concurrency-interest <concurrency-interest@cs.oswego.edu>
Date: 2022-04-04, 18:13
To: concurrency-interest@cs.oswego.edu
Reply-To: Doug Lea <dl@cs.oswego.edu>

On 3/25/22 11:07, Doug Lea via Concurrency-interest wrote:
> Upcoming updates for ForkJoin{Pool,Task} are mainly designed to make things better for loom (faster initialization, improved handling of async tasks, less memory and signal contention, a few nichy methods).
Thanks to those who tried these out helped improve them! You can find updates that work with jdk17+ by grabbing a jsr166.jar (https://cs.oswego.edu/dl/jsr166/dist/jsr166.jar) and using: java --patch-module java.base="$DIR/jsr166.jar". Or build from github local branch of current openjdk: https://github.com/DougLea/jdk/tree/JDK-8277090

-Doug


_______________________________________________
Concurrency-interest mailing list
Concurrency-interest@cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest


-------------------------

Subject: [concurrency-interest] "liveness" requirements for acquire/release
From: Govind Jajoo via Concurrency-interest <concurrency-interest@cs.oswego.edu>
Date: 2022-04-17, 19:57
To: concurrency-interest@cs.oswego.edu
Reply-To: Govind Jajoo <gjajoo+java@gmail.com>

Hello Concurrency-Interest!

Given a class like the following

/*******************/
class ContrivedAcquireReleaseExample {
  static class Wrapper {
    Object value;
  }

  AtomicReference<Wrapper> holder = new AtomicReference<>(new Wrapper());

  public void setValue(Object newVal) {
    var wrapper = holder.getAcquire();
    wrapper.value = newVal;
    holder.setRelease(wrapper);
  }

  public Object getValue() {
    return holder.getAcquire().value;
  }
}
/*******************/

Is there anything that prohibits a confirming JVM from optimizing the setValue above to effectively the following?

public void setValue(Object newVal) {
    wrapper.value = newVal;
}

(I imagine a reader that keeps reading a "stale" value can always be considered to have had its acquire execute at some previously set holder value.) 

What are the "liveness" requirements if any, around how stale can the acquire be?

Thanks for reading.

Govind

_______________________________________________
Concurrency-interest mailing list
Concurrency-interest@cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest



-------------------------

Subject: Re: [concurrency-interest] "liveness" requirements for acquire/release
From: Alex Otenko via Concurrency-interest <concurrency-interest@cs.oswego.edu>
Date: 2022-04-17, 20:12
To: Govind Jajoo <gjajoo+java@gmail.com>
CC: concurrency-interest <concurrency-interest@cs.oswego.edu>
Reply-To: Alex Otenko <oleksandr.otenko@gmail.com>

"Staleness" has no definition.

The actual guarantee is: if release is before acquire in the total order of operations on that variable, the read is going to see the write. "Not stale", in other words. The trick is in ordering the releases and acquires.

Ale 

On Sun, 17 Apr 2022, 18:00 Govind Jajoo via Concurrency-interest, <concurrency-interest@cs.oswego.edu> wrote:

    Hello Concurrency-Interest!

    Given a class like the following

    /*******************/
    class ContrivedAcquireReleaseExample {
      static class Wrapper {
        Object value;
      }

      AtomicReference<Wrapper> holder = new AtomicReference<>(new Wrapper());

      public void setValue(Object newVal) {
        var wrapper = holder.getAcquire();
        wrapper.value = newVal;
        holder.setRelease(wrapper);
      }

      public Object getValue() {
        return holder.getAcquire().value;
      }
    }
    /*******************/

    Is there anything that prohibits a confirming JVM from optimizing the setValue above to effectively the following?

    public void setValue(Object newVal) {
        wrapper.value = newVal;
    }

    (I imagine a reader that keeps reading a "stale" value can always be considered to have had its acquire execute at some previously set holder value.) 

    What are the "liveness" requirements if any, around how stale can the acquire be?

    Thanks for reading.

    Govind
    _______________________________________________
    Concurrency-interest mailing list
    Concurrency-interest@cs.oswego.edu
    http://cs.oswego.edu/mailman/listinfo/concurrency-interest


_______________________________________________
Concurrency-interest mailing list
Concurrency-interest@cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest
