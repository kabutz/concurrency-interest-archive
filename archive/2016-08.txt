From idontcareifigethacked at gmail.com  Mon Aug  1 15:30:47 2016
From: idontcareifigethacked at gmail.com (i hack)
Date: Mon, 1 Aug 2016 13:30:47 -0600
Subject: [concurrency-interest] Java ConcurrentWeakHashMap
Message-ID: <CAERogxaG_OoT78Rk2x1aR2otq1Y-sXXG1ZvXjONkkz+uv1q3Ng@mail.gmail.com>

I can't find one in the JDK.
Guava has one similar but it uses identity, I need it with equality.

http://stackoverflow.com/questions/2255950/is-there-java-concurrent-util-or-equivalent-for-weakhashmap
http://stackoverflow.com/questions/31875264/is-there-a-non-jdk-implementation-for-a-concurrent-weak-hash-map

I came across these on the mailing list (from 3 1/2 yrs ago...):
http://concurrency.markmail.org/search/?q=weakconcurrenthashmap#query:weakconcurrenthashmap%20order%3Arelevance+page:1+mid:swesuutrmb44jt2y+state:results
http://gee.cs.oswego.edu/dl/jsr166/dist/extra166ydocs/

But don't know what is the best option, if there is one, as of today, to
use a ConcurrentWeakHashMap, without rolling my own.

Thanks,
IDC
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20160801/81edd9b6/attachment.html>

From shevek at anarres.org  Mon Aug  1 15:53:58 2016
From: shevek at anarres.org (Shevek)
Date: Mon, 1 Aug 2016 12:53:58 -0700
Subject: [concurrency-interest] Java ConcurrentWeakHashMap
In-Reply-To: <CAERogxaG_OoT78Rk2x1aR2otq1Y-sXXG1ZvXjONkkz+uv1q3Ng@mail.gmail.com>
References: <CAERogxaG_OoT78Rk2x1aR2otq1Y-sXXG1ZvXjONkkz+uv1q3Ng@mail.gmail.com>
Message-ID: <0f0d5bf7-84ad-2d4a-a925-fbdb6ab1c203@anarres.org>

It may be a bit heavier than you require, but CacheBuilder can use 
weakKeys and is concurrent.

S.

On 08/01/2016 12:30 PM, i hack wrote:
> I can't find one in the JDK.
> Guava has one similar but it uses identity, I need it with equality.
>
> http://stackoverflow.com/questions/2255950/is-there-java-concurrent-util-or-equivalent-for-weakhashmap
> http://stackoverflow.com/questions/31875264/is-there-a-non-jdk-implementation-for-a-concurrent-weak-hash-map
>
> I came across these on the mailing list (from 3 1/2 yrs ago...):
> http://concurrency.markmail.org/search/?q=weakconcurrenthashmap#query:weakconcurrenthashmap%20order%3Arelevance+page:1+mid:swesuutrmb44jt2y+state:results
> http://gee.cs.oswego.edu/dl/jsr166/dist/extra166ydocs/
>
> But don't know what is the best option, if there is one, as of today, to
> use a ConcurrentWeakHashMap, without rolling my own.
>
> Thanks,
> IDC
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>

From ben.manes at gmail.com  Mon Aug  1 16:50:10 2016
From: ben.manes at gmail.com (Benjamin Manes)
Date: Mon, 1 Aug 2016 13:50:10 -0700
Subject: [concurrency-interest] Java ConcurrentWeakHashMap
In-Reply-To: <CAERogxaG_OoT78Rk2x1aR2otq1Y-sXXG1ZvXjONkkz+uv1q3Ng@mail.gmail.com>
References: <CAERogxaG_OoT78Rk2x1aR2otq1Y-sXXG1ZvXjONkkz+uv1q3Ng@mail.gmail.com>
Message-ID: <CAGu0=MPuB8bTADuihgUuYCwbxWMQOw374JUu7Uo+sy4Re=qMPw@mail.gmail.com>

Guava's internally has a pluggable equality mechanism, but only exposes
identity as the most applicable in the observed use-cases. See
Interners#newWeakInterner() where equality is leveraged. It was difficult
to find other use-cases where equality was the correct choice, so to reduce
maintenance burden and user error the capability wasn't externalized.

There are a lot of other implementations though, e.g. search for
ConcurrentReferenceHashMap.

On Mon, Aug 1, 2016 at 12:30 PM, i hack <idontcareifigethacked at gmail.com>
wrote:

> I can't find one in the JDK.
> Guava has one similar but it uses identity, I need it with equality.
>
>
> http://stackoverflow.com/questions/2255950/is-there-java-concurrent-util-or-equivalent-for-weakhashmap
>
> http://stackoverflow.com/questions/31875264/is-there-a-non-jdk-implementation-for-a-concurrent-weak-hash-map
>
> I came across these on the mailing list (from 3 1/2 yrs ago...):
>
> http://concurrency.markmail.org/search/?q=weakconcurrenthashmap#query:weakconcurrenthashmap%20order%3Arelevance+page:1+mid:swesuutrmb44jt2y+state:results
> http://gee.cs.oswego.edu/dl/jsr166/dist/extra166ydocs/
>
> But don't know what is the best option, if there is one, as of today, to
> use a ConcurrentWeakHashMap, without rolling my own.
>
> Thanks,
> IDC
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20160801/60dba0bd/attachment.html>

From jini at zeus.net.au  Tue Aug  2 09:18:33 2016
From: jini at zeus.net.au (Peter)
Date: Tue, 2 Aug 2016 23:18:33 +1000 (AEST)
Subject: [concurrency-interest] Java ConcurrentWeakHashMap
Message-ID: <24af1a3bc94458989ee9f1a2b6ffe105@org.tizen.email>

 
Hmm,

Would a non blocking concurrent decorator, that lets you choose identity or equality, with any ConcurrentMap implementation of your choice suffice?

Separation of concerns.

You can also choose weak, soft, timed or strong references for keys, values or entry's in any Java Collections implementation.

It can be dependency injected so your object thinks it's using a ConcurrentMap, or any other Java Collections interface for that matter.  And you can change the decorated underlying implementation to which ever one works best for you.

Regards,

Peter.

Sent from my Samsung device.
 
  Include original message
---- Original message ----
From: Shevek <shevek at anarres.org>
Sent: 02/08/2016 05:53:58 am
To: concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] Java ConcurrentWeakHashMap

It may be a bit heavier than you require, but CacheBuilder can use 
weakKeys and is concurrent.

S.

On 08/01/2016 12:30 PM, i hack wrote:
> I can't find one in the JDK.
> Guava has one similar but it uses identity, I need it with equality.
>
> http://stackoverflow.com/questions/2255950/is-there-java-concurrent-util-or-equivalent-for-weakhashmap
> http://stackoverflow.com/questions/31875264/is-there-a-non-jdk-implementation-for-a-concurrent-weak-hash-map
>
> I came across these on the mailing list (from 3 1/2 yrs ago...):
> http://concurrency.markmail.org/search/?q=weakconcurrenthashmap#query:weakconcurrenthashmap%20order%3Arelevance+page:1+mid:swesuutrmb44jt2y+state:results
> http://gee.cs.oswego.edu/dl/jsr166/dist/extra166ydocs/
>
> But don't know what is the best option, if there is one, as of today, to
> use a ConcurrentWeakHashMap, without rolling my own.
>
> Thanks,
> IDC
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20160802/8d57a3a4/attachment.html>

From perm at sics.se  Mon Aug  8 08:58:28 2016
From: perm at sics.se (Per Mildner)
Date: Mon, 8 Aug 2016 14:58:28 +0200
Subject: [concurrency-interest] How to implement task-local variables
	(like thread local variables but for Fork/Join tasks)
In-Reply-To: <ECB57D43-8964-42C8-99C9-81AA9E45930A@sics.se>
References: <ECB57D43-8964-42C8-99C9-81AA9E45930A@sics.se>
Message-ID: <2E76D76E-8A22-4906-B49D-9534555A5130@sics.se>

Ping?

> On 09 Jun 2016, at 22:56, Per Mildner <perm at sics.se> wrote:
> 
> I need something that should behave like a thread-local variable but for a tree of RecursiveAction tasks.
> 
> That is, a task inherits the task-local variables from the task that created it. Looking up a task-local variable is done by traversing the chain of parent tasks, looking for special task instances that holds task local values.
> 
> I currently implement this by letting all tasks know their parent (the “current task”) which is passed to their constructor. This way I can traverse the chain of parents towards the root of the task tree.
> 
> Keeping track of the current task is done by making all tasks set and restore themselves as the “current task” in a thread-local variable in their RecursiveAction.compute() but that seems wasteful since it is done also when the the task is running in the same thread as its parent task.
> 
> So, any ideas how to implement this efficiently?
> 
> Even better, is there a way to make something like this work with the default pool?
> 
> Regards,
> 
> 
> Per Mildner
> Per.Mildner at sics.se
> 
> (I sent this earlier but it never seemed to arrive at the list. Sorry if it gets duplicated.)
> 
> 

Per Mildner                                     Per.Mildner at sics.se
Swedish Institute of Computer Science (SICS Swedish ICT)


From heinz at javaspecialists.eu  Mon Aug  8 09:19:13 2016
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Mon, 8 Aug 2016 16:19:13 +0300
Subject: [concurrency-interest] How to implement task-local variables
 (like thread local variables but for Fork/Join tasks)
In-Reply-To: <2E76D76E-8A22-4906-B49D-9534555A5130@sics.se>
References: <ECB57D43-8964-42C8-99C9-81AA9E45930A@sics.se>
 <2E76D76E-8A22-4906-B49D-9534555A5130@sics.se>
Message-ID: <CACLL95qSk9AXKLOBf7Ujh8u0k1JTP9UgCRabe5_5hnT7xcx=Og@mail.gmail.com>

Could you perhaps post some code demonstrating what you are trying to
achieve?

On Monday, 8 August 2016, Per Mildner <perm at sics.se> wrote:

> Ping?
>
> > On 09 Jun 2016, at 22:56, Per Mildner <perm at sics.se <javascript:;>>
> wrote:
> >
> > I need something that should behave like a thread-local variable but for
> a tree of RecursiveAction tasks.
> >
> > That is, a task inherits the task-local variables from the task that
> created it. Looking up a task-local variable is done by traversing the
> chain of parent tasks, looking for special task instances that holds task
> local values.
> >
> > I currently implement this by letting all tasks know their parent (the
> “current task”) which is passed to their constructor. This way I can
> traverse the chain of parents towards the root of the task tree.
> >
> > Keeping track of the current task is done by making all tasks set and
> restore themselves as the “current task” in a thread-local variable in
> their RecursiveAction.compute() but that seems wasteful since it is done
> also when the the task is running in the same thread as its parent task.
> >
> > So, any ideas how to implement this efficiently?
> >
> > Even better, is there a way to make something like this work with the
> default pool?
> >
> > Regards,
> >
> >
> > Per Mildner
> > Per.Mildner at sics.se <javascript:;>
> >
> > (I sent this earlier but it never seemed to arrive at the list. Sorry if
> it gets duplicated.)
> >
> >
>
> Per Mildner                                     Per.Mildner at sics.se
> <javascript:;>
> Swedish Institute of Computer Science (SICS Swedish ICT)
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <javascript:;>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


-- 
Dr Heinz M. Kabutz (PhD CompSci)
Author of "The Java(tm) Specialists' Newsletter"
Sun/Oracle Java Champion
JavaOne Rockstar Speaker
http://www.javaspecialists.eu
Tel: +30 69 75 595 262
Skype: kabutz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20160808/f334dcf9/attachment.html>

From perm at sics.se  Tue Aug  9 09:01:38 2016
From: perm at sics.se (Per Mildner)
Date: Tue, 9 Aug 2016 15:01:38 +0200
Subject: [concurrency-interest] How to implement task-local variables
	(like thread local variables but for Fork/Join tasks)
In-Reply-To: <CACLL95qSk9AXKLOBf7Ujh8u0k1JTP9UgCRabe5_5hnT7xcx=Og@mail.gmail.com>
References: <ECB57D43-8964-42C8-99C9-81AA9E45930A@sics.se>
 <2E76D76E-8A22-4906-B49D-9534555A5130@sics.se>
 <CACLL95qSk9AXKLOBf7Ujh8u0k1JTP9UgCRabe5_5hnT7xcx=Og@mail.gmail.com>
Message-ID: <5C9DA522-7D93-41F1-A6DD-55D2A1E54510@sics.se>


> On 08 Aug 2016, at 15:19, Dr Heinz M. Kabutz <heinz at javaspecialists.eu> wrote:
> 
> Could you perhaps post some code demonstrating what you are trying to achieve?


The following is a simplified version of the real code.

1. Each (RecursiveAction task knows its parent, and
2. it is possible for a static method to access the “current task”, implemented by letting each compute() method set a thread-local variable.
3. Once you have the “current task” you can follow the parent chain and find the ancestor KeyValuePair tasks that hold key/value pairs for the current task-sub-tree.

This works (at least the real implementation in our code does) but I am a little worried about the overhead of try+getCurrentTask()+setCurrentTask() in each compute() method, especially since it must me done by all our compute() methods, also those that never (indirectly) calls getTaskLocalValue().

However, what I really would like to be able to do is to access these ancestor KeyValuePair tasks also when I have no control over the ForkJoinTask sub-class, e.g. when using the new Java 8 Collection.parallelStream et al.

I guess that ForkJoinPool already has  the necessary information but I see no way to access it.

Note that the callers of getTaskLocalValue() are typically far away from the code that creates and calls the ForkJoinTask sub-classes, and often called via code we can not modify, so we can not easily pass the key/value pairs as extra arguments.

The example Main sets task local variables when processing some of the arguments but does not demonstrate that the key/value pair can be seen from all tasks in a task sub-tree.

package tlv;

import java.util.Arrays;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.function.IntConsumer;

@SuppressWarnings("WeakerAccess")
public class Main
{
    private static final int THRESHOLD = 2;
    /**
     * The {@link IntRangeTask} currently running its {@link IntRangeTask#compute()} in this thread (or its ancestor {@link TaskNode}). May be null.
     */
    private static final ThreadLocal<TaskNode> cCurrentTask = new ThreadLocal<>();
    private static final TaskNode NO_PARENT = null;


    /**
     * The task currently running in the thread, or null if none or unknown.
     */
    static TaskNode getCurrentTask()
    {
        return cCurrentTask.get();
    }

    static void setCurrentTask(TaskNode task)
    {
        cCurrentTask.set(task);
    }

    /**
     * Return the value associated with key in the task tree, closest ancestor first, or defaultValue if none.
     *
     * @param key          the key whose associated value is to be returned
     * @param defaultValue returned if key is not present
     * @return the value (possibly null) associated with key, or defaultValue if none
     * @see #withTaskLocal(Object, Object, Runnable)
     */
    // This is called fairly often.
    static Object getTaskLocalValue(Object key, Object defaultValue)
    {
        TaskNode task = getCurrentTask();

        // Go towards the task-tree root, looking for a value for key.
        while (task != null)
        {
            if (task instanceof KeyValuePair)
            {
                if (((KeyValuePair) task).getKey().equals(key))
                {
                    return ((KeyValuePair) task).getValue();
                }
            }
            task = task.getParent();
        }
        return defaultValue;
    }


    /**
     * @param key      the (non-null) value to bind.
     * @param value    the value.
     * @param runnable the runnable to run with the binding in effect.
     */
    // This is rarely called so it is not speed-critical.
    static void withTaskLocal(Object key, Object value, Runnable runnable)
    {
        KeyValuePair task = new KeyValuePair(key, value, getCurrentTask());
        TaskNode outerTask = getCurrentTask();
        try
        {
            setCurrentTask(task);
            runnable.run();
        }
        finally
        {
            setCurrentTask(outerTask);
        }
    }

    /**
     * Represents a node in the task-tree. Some nodes have associated key/value pairs.
     */
    interface TaskNode
    {
        /**
         * The parent of this task-tree node, or null if none.
         */
        TaskNode getParent();
    }

    // Similar to IncrementTask in RecursiveAction JavaDocs.
    static class IntRangeTask extends RecursiveAction implements TaskNode
    {
        private final TaskNode iParent;
        private final IntConsumer iOperation;
        private final int iLowInclusive;
        private final int iHighExclusive;

        IntRangeTask(IntConsumer operation, int lowInclusive, int highExclusive, TaskNode parent)
        {
            super();
            iParent = parent;
            iOperation = operation;
            iLowInclusive = lowInclusive;
            iHighExclusive = highExclusive;
        }

        @Override
        public TaskNode getParent()
        {
            return iParent;
        }

        // Called often, so I worry about the try+getCurrentTask()+setCurrentTask() overhead here.
        @Override
        protected void compute()
        {
            if (iHighExclusive - iLowInclusive < THRESHOLD)
            {
                TaskNode outerTask = getCurrentTask();

                try
                {
                    setCurrentTask(this);
                    for (int i = iLowInclusive; i < iHighExclusive; ++i)
                    {
                        iOperation.accept(i);
                    }
                }
                finally
                {
                    setCurrentTask(outerTask);
                }
            }
            else
            {
                int mid = iLowInclusive + ((iHighExclusive - iLowInclusive) >>> 1);
                TaskNode parent = getParent(); // could use 'this' here, instead.

                invokeAll(new IntRangeTask(iOperation, iLowInclusive, mid, parent),
                          new IntRangeTask(iOperation, mid, iHighExclusive, parent));
            }
        }
    }

    static class KeyValuePair implements TaskNode
    {
        private final Object iKey;
        private final Object iValue;
        private final TaskNode iParent;

        KeyValuePair(Object key, Object value, TaskNode parent)
        {
            assert key != null;
            iKey = key;
            iValue = value;
            iParent = parent;
        }

        @Override
        public TaskNode getParent()
        {
            return iParent;
        }

        Object getKey()
        {
            return iKey;
        }

        Object getValue()
        {
            return iValue;
        }
    }

    /* java tlv.Main a b c d e f g h i j k l m n o p q r s t u v a
    Round 0
    ...
    Round 1
    a-->a at Thread[main,5,main] Task local value for a
    b-->b at Thread[main,5,main] DefaultResult
    c-->c at Thread[main,5,main] DefaultResult
    d-->d at Thread[main,5,main] DefaultResult
    e-->e at Thread[main,5,main] DefaultResult
    f-->f at Thread[ForkJoinPool.commonPool-worker-6,5,main] DefaultResult
    g-->g at Thread[ForkJoinPool.commonPool-worker-2,5,main] DefaultResult
    h-->h at Thread[ForkJoinPool.commonPool-worker-6,5,main] DefaultResult
    i-->i at Thread[ForkJoinPool.commonPool-worker-7,5,main] DefaultResult
    j-->j at Thread[ForkJoinPool.commonPool-worker-1,5,main] DefaultResult
    k-->k at Thread[ForkJoinPool.commonPool-worker-7,5,main] DefaultResult
    l-->l at Thread[ForkJoinPool.commonPool-worker-1,5,main] Task local value for l
    m-->m at Thread[ForkJoinPool.commonPool-worker-1,5,main] DefaultResult
    n-->n at Thread[ForkJoinPool.commonPool-worker-1,5,main] DefaultResult
    o-->o at Thread[ForkJoinPool.commonPool-worker-6,5,main] DefaultResult
    p-->p at Thread[ForkJoinPool.commonPool-worker-6,5,main] DefaultResult
    q-->q at Thread[ForkJoinPool.commonPool-worker-6,5,main] DefaultResult
    r-->r at Thread[ForkJoinPool.commonPool-worker-2,5,main] DefaultResult
    s-->s at Thread[ForkJoinPool.commonPool-worker-2,5,main] DefaultResult
    t-->t at Thread[ForkJoinPool.commonPool-worker-2,5,main] Task local value for t
    u-->u at Thread[ForkJoinPool.commonPool-worker-7,5,main] DefaultResult
    v-->v at Thread[ForkJoinPool.commonPool-worker-7,5,main] DefaultResult
    a-->a at Thread[ForkJoinPool.commonPool-worker-7,5,main] Task local value for a
    Round 2
    ...
    */
    public static void main(String[] args)
    {
        // These arguments will run with task local values.
        final String[] keys = {"a", "t", "l"};

        final String[] results = new String[args.length];

        final ForkJoinPool pool = ForkJoinPool.commonPool();

        for (int j = 0; j < 5; j++)
        {
            System.out.println("Round " + j);

            pool.invoke(new IntRangeTask((i) ->
                                         {
                                             final String arg = args[i];

                                             if (Arrays.asList(keys).contains(arg))
                                             {
                                                 withTaskLocal(arg, "Task local value for " + arg, () -> results[i] = doSomething(arg));
                                             }
                                             else
                                             {
                                                 results[i] = doSomething(arg);
                                             }
                                         },
                                         0, args.length, NO_PARENT));

            for (int i = 0; i < results.length; i++)
            {
                System.out.println(args[i] + "-->" + results[i]);
            }
        }
    }

    private static String doSomething(final String arg)
    {
        return arg + "@" + Thread.currentThread() + " " + getTaskLocalValue(arg, "DefaultResult");
    }
}


> 
> On Monday, 8 August 2016, Per Mildner <perm at sics.se> wrote:
> Ping?
> 
> > On 09 Jun 2016, at 22:56, Per Mildner <perm at sics.se> wrote:
> >
> > I need something that should behave like a thread-local variable but for a tree of RecursiveAction tasks.
> >
> > That is, a task inherits the task-local variables from the task that created it. Looking up a task-local variable is done by traversing the chain of parent tasks, looking for special task instances that holds task local values.
> >
> > I currently implement this by letting all tasks know their parent (the “current task”) which is passed to their constructor. This way I can traverse the chain of parents towards the root of the task tree.
> >
> > Keeping track of the current task is done by making all tasks set and restore themselves as the “current task” in a thread-local variable in their RecursiveAction.compute() but that seems wasteful since it is done also when the the task is running in the same thread as its parent task.
> >
> > So, any ideas how to implement this efficiently?
> >
> > Even better, is there a way to make something like this work with the default pool?
> >
> > Regards,
...
> 
> 
> -- 
> Dr Heinz M. Kabutz (PhD CompSci)
> Author of "The Java(tm) Specialists' Newsletter"
> Sun/Oracle Java Champion
> JavaOne Rockstar Speaker
> http://www.javaspecialists.eu
> Tel: +30 69 75 595 262
> Skype: kabutz
> 



Per Mildner
Per.Mildner at sics.se



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20160809/c9dcd34d/attachment-0001.html>

From pavel.rappo at gmail.com  Wed Aug 31 08:55:13 2016
From: pavel.rappo at gmail.com (Pavel Rappo)
Date: Wed, 31 Aug 2016 13:55:13 +0100
Subject: [concurrency-interest] CompletionStage defensive copy
Message-ID: <CAChcVukb5+6drVJXsu1xR=17US2QUMNaA+HWACMX9fgNeBpg4Q@mail.gmail.com>

Hi,

I would appreciate if you could provide some feedback on the the following
convenience (yet paranoid?) method I would like to use for defensive copying of
CompletionStage.

Thanks,
-Pavel

/**
 * Creates a defensive copy of the given {@code CompletionStage}.
 *
 * <p> Might be useful both for producers and consumers of {@code
 * CompletionStage}s.
 *
 * <p> Producers are protected from possible uncontrolled modifications
 * (cancellation, completion, obtrusion, etc.) as well as from executing
 * unknown potentially lengthy or faulty dependants in the given {@code
 * CompletionStage}'s default execution facility or synchronously.
 *
 * <p> Consumers are protected from some of the aspects of misbehaving
 * implementations (e.g. accepting results, applying functions, running
 * tasks, etc. more than once) as well as from escaping of a reference
 * to their private executor by providing a reliable proxy they use instead.
 *
 * @param src
 *         the {@code CompletionStage} to make a copy from
 * @param executor
 *         the executor used to propagate the completion
 * @param <T>
 *         the type of the {@code CompletionStage}'s result
 *
 * @return a copy of the given stage
 */
public static <T> CompletableFuture<T> copy(CompletionStage<T> src,
                                            Executor executor) {
    CompletableFuture<T> copy = new CompletableFuture<>();
    BiConsumer<T, Throwable> relay =
            (result, error) -> {
                if (error != null) {
                    copy.completeExceptionally(error);
                } else {
                    copy.complete(result);
                }
            };
    if (src.getClass() == CompletableFuture.class) {
        // No subclasses! Strictly genuine CompletableFuture.
        src.whenCompleteAsync(relay, executor);
        return copy;
    } else {
        // Don't give our executor away to an unknown CS!
        src.whenComplete(relay);
        return copy.thenApplyAsync(Function.identity(), executor);
    }
}

From viktor.klang at gmail.com  Wed Aug 31 10:20:25 2016
From: viktor.klang at gmail.com (Viktor Klang)
Date: Wed, 31 Aug 2016 16:20:25 +0200
Subject: [concurrency-interest] CompletionStage defensive copy
In-Reply-To: <CAChcVukb5+6drVJXsu1xR=17US2QUMNaA+HWACMX9fgNeBpg4Q@mail.gmail.com>
References: <CAChcVukb5+6drVJXsu1xR=17US2QUMNaA+HWACMX9fgNeBpg4Q@mail.gmail.com>
Message-ID: <CANPzfU-OvAhcdE8Gf6F6C-zSy9Z00M5oECPa1iTzGAkR7R_u7A@mail.gmail.com>

I'm not sure I understand, CompletionStage does not have any mutators?
How about changing toCompletableFuture to return a new CompletableFuture
instead?

On Wed, Aug 31, 2016 at 2:55 PM, Pavel Rappo <pavel.rappo at gmail.com> wrote:

> Hi,
>
> I would appreciate if you could provide some feedback on the the following
> convenience (yet paranoid?) method I would like to use for defensive
> copying of
> CompletionStage.
>
> Thanks,
> -Pavel
>
> /**
>  * Creates a defensive copy of the given {@code CompletionStage}.
>  *
>  * <p> Might be useful both for producers and consumers of {@code
>  * CompletionStage}s.
>  *
>  * <p> Producers are protected from possible uncontrolled modifications
>  * (cancellation, completion, obtrusion, etc.) as well as from executing
>  * unknown potentially lengthy or faulty dependants in the given {@code
>  * CompletionStage}'s default execution facility or synchronously.
>  *
>  * <p> Consumers are protected from some of the aspects of misbehaving
>  * implementations (e.g. accepting results, applying functions, running
>  * tasks, etc. more than once) as well as from escaping of a reference
>  * to their private executor by providing a reliable proxy they use
> instead.
>  *
>  * @param src
>  *         the {@code CompletionStage} to make a copy from
>  * @param executor
>  *         the executor used to propagate the completion
>  * @param <T>
>  *         the type of the {@code CompletionStage}'s result
>  *
>  * @return a copy of the given stage
>  */
> public static <T> CompletableFuture<T> copy(CompletionStage<T> src,
>                                             Executor executor) {
>     CompletableFuture<T> copy = new CompletableFuture<>();
>     BiConsumer<T, Throwable> relay =
>             (result, error) -> {
>                 if (error != null) {
>                     copy.completeExceptionally(error);
>                 } else {
>                     copy.complete(result);
>                 }
>             };
>     if (src.getClass() == CompletableFuture.class) {
>         // No subclasses! Strictly genuine CompletableFuture.
>         src.whenCompleteAsync(relay, executor);
>         return copy;
>     } else {
>         // Don't give our executor away to an unknown CS!
>         src.whenComplete(relay);
>         return copy.thenApplyAsync(Function.identity(), executor);
>     }
> }
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>



-- 
Cheers,
√
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20160831/292523d5/attachment.html>

