Subject: [concurrency-interest] about the ConcurrentHashMap red-black tree
From: 码哥 via Concurrency-interest <concurrency-interest@cs.oswego.edu>
Date: 2022-08-10, 17:13
To: "Concurrency-interest" <concurrency-interest@cs.oswego.edu>
Reply-To: 码哥 <184480602@qq.com>

hello concurrency-interest:

       here the method “balanceInsertion” in ConcurrentHashMap（jdk8）

      //////////////////////////////////////////////////////////////////////

       static <K,V> TreeNode<K,V> balanceInsertion(TreeNode<K,V> root,
                                                    TreeNode<K,V> x) {
            x.red = true;
            for (TreeNode<K,V> xp, xpp, xppl, xppr;;) {
                if ((xp = x.parent) == null) {
                    x.red = false;
                    return x;
                }
                else if (!xp.red || (xpp = xp.parent) == null)
                    return root;

                。。。。。。
            }
            。。。。。
     }

////////////////////////////////////////////////////////////////////////////

   my question is :

        else if (!xp.red || (xpp = xp.parent) == null)

                    return root;

      if the first condition "!xp.red" is FALSE, xp.red is TRUE,then the second condition we can get "xp" is root，this is contradictory，because root should be black。so the second condition can not take effect ？ ？


_______________________________________________
Concurrency-interest mailing list
Concurrency-interest@cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest



-------------------------

