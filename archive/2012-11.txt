From william.louth at jinspired.com  Tue Nov  6 10:33:41 2012
From: william.louth at jinspired.com (william.louth at jinspired.com)
Date: Tue, 06 Nov 2012 15:33:41 +0000
Subject: [concurrency-interest] Feedback? Signals a new approach to
 observability and adaptiveness in the JVM and Java Class library
Message-ID: <W1528817367270691352216021@webmail113>

Hi All,

I have published an article on a technology I've designed and developed to help understand variance in the performance for extremely low latency workflows (trades, messaging, gaming,...). It has evolved into something much bigger which I believe could drive development of new adaptive techniques and technologies above the JVM (which is a highly adaptive system itself) which is the area I am currently involved in (http://www.jinspired.com/research/adaptive-control-in-execution).

Introducing Signals ? The Next Big Thing in Application Management
http://www.jinspired.com/site/introducing-signals-the-next-big-thing-in-application-management

We've already had a limited beta release of the API and the results look very promising based on some initial customer feedback but the impact would be far greater if this was supported directly in the JVM and many of the libraries including java.util.concurrent.*.

What are your thoughts on the idea and concepts? What JVM implementation issues do you foresee ignoring the obvious package naming and distinct Open API style ;-).

William




From heinz at javaspecialists.eu  Wed Nov  7 17:00:06 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Wed, 07 Nov 2012 23:00:06 +0100
Subject: [concurrency-interest] _interrupted field visibility bug in OpenJDK
	7+
In-Reply-To: <W1528817367270691352216021@webmail113>
References: <W1528817367270691352216021@webmail113>
Message-ID: <509AD9E6.3040000@javaspecialists.eu>

During a hands-on session today of my new Concurrency Specialist Course, 
one of my students discovered what we think might be an interesting and 
potentially serious bug in the JVM.  It seems that the Server HotSpot in 
OpenJDK 7 may sometimes hoist the value of the _interrupted field.  This 
is interesting, since the value is not stored in Java, but rather in the 
OSThread.hpp file in the jint _interrupted field.  It is also pretty 
serious, because it means we cannot rely on the interrupted status in 
order to shut down threads.  This will affect Future.cancel(), 
ExecutorService.shutdownNow() and a whole bunch of other mechanisms that 
use interruptions to cooperatively cancel tasks.  (Obviously the 
exercise was more involved than the code presented in this email, after 
all the course is aimed at intermediate to advanced Java developers.  So 
please don't expect that this won't happen in your code - I've just 
taken away unnecessary code until we can see the bug without any of the 
paraphernalia that might distract.)

First off, some code that works as expected.  As soon as you interrupt 
the thread, it breaks out of the while() loop and exits:

    public void think() {
        while (true) {
            if (Thread.currentThread().isInterrupted()) break;
        }
        System.out.println("We're done thinking");
    }

However, if you extract the "Thread.currentThread().isInterrupted()" 
into a separate method, then that might be optimized by HotSpot to 
always return false and the code then never ends:

    public void think() {
        while (true) {
            if (checkInterruptedStatus()) break;
        }
        System.out.println("We're done thinking");
    }

    private boolean checkInterruptedStatus() {
        return Thread.currentThread().isInterrupted();
    }

My assumption is that the checkInterruptedStatus() method is 
aggressively optimized and then the actual status is not read again.  
This does not happen with the client hotspot and also not with Java 
1.6.0_37.  It does happen with the 1.8 EA that I've got on my MacBook 
Pro.  The student was using a Windows machine, so this not just a Mac 
problem. 

Here is the complete code:

public class InterruptedVisibilityTest {
    public void think() {
        while (true) {
            if (checkInterruptedStatus()) break;
        }
        System.out.println("We're done thinking");
    }

    private boolean checkInterruptedStatus() {
        return Thread.currentThread().isInterrupted();
    }

    public static void main(String[] args) throws InterruptedException {
        final InterruptedVisibilityTest test =
                new InterruptedVisibilityTest();
        Thread thinkerThread = new Thread("Thinker") {
            public void run() {
                test.think();
            }
        };
        thinkerThread.start();
        Thread.sleep(500);
        thinkerThread.interrupt();
        long timeOfInterruption = System.currentTimeMillis();
        thinkerThread.join(500);
        if (thinkerThread.isAlive()) {
            System.err.println("Thinker did not shut down within 500ms");
            System.err.println("Error in Java Virtual Machine!");
            System.err.println("Interrupted: " + 
thinkerThread.isInterrupted());
            System.err.println();
            System.err.println("(Let's see if the thread ever dies and 
how long it takes)");
            while (thinkerThread.isAlive()) {
                thinkerThread.join(1000);
                if (thinkerThread.isAlive()) {
                    System.err.println("  ... still waiting");
                }
            }
        }
        System.err.println("Finally, the thread has died - that took " +
                (System.currentTimeMillis() - timeOfInterruption) + "ms");
    }
}

As I said, the original code was more involved, but this demonstrates 
the essentials.  I hope some of you might be able to take a look at 
what's going on.

Regards

Heinz
-- 
Dr Heinz M. Kabutz (PhD CompSci)
Author of "The Java(tm) Specialists' Newsletter"
Sun Java Champion
IEEE Certified Software Development Professional
http://www.javaspecialists.eu
Tel: +30 69 75 595 262
Skype: kabutz



From heinz at javaspecialists.eu  Wed Nov  7 17:21:05 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Wed, 07 Nov 2012 23:21:05 +0100
Subject: [concurrency-interest] Java Concurrency torture tests: need
 your help
In-Reply-To: <5081100F.30602@oracle.com>
References: <5081100F.30602@oracle.com>
Message-ID: <509ADED1.8060002@javaspecialists.eu>

Here's another one you can add to your test :-)

import org.junit.*;

import static org.junit.Assert.*;

public class InterruptedVisibilityTest {
    public void think() {
        while (true) {
            if (checkInterruptedStatus()) break;
        }
        System.out.println("We're done thinking");
    }

    private boolean checkInterruptedStatus() {
        return Thread.currentThread().isInterrupted();
    }

    @Test
    public void testInterruptedVisibility() throws InterruptedException {
        final InterruptedVisibilityTest test =
                new InterruptedVisibilityTest();
        Thread thinkerThread = new Thread("Thinker") {
            public void run() {
                test.think();
            }
        };
        thinkerThread.start();
        Thread.sleep(500);
        thinkerThread.interrupt();
        thinkerThread.join(500);
        if (thinkerThread.isAlive()) {
            System.err.println("Thinker did not shut down within 500ms");
            System.err.println("Error in Java Virtual Machine!");
            assertTrue(thinkerThread.isInterrupted());
            System.err.println("Interrupted: " + 
thinkerThread.isInterrupted());
            System.err.println();
            System.err.println("(Let's see if the thread ever dies and 
how long it takes)");
            fail("Thread did not respond to interruption");
        }
    }
}

Regards

Heinz
-- 
Dr Heinz M. Kabutz (PhD CompSci)
Author of "The Java(tm) Specialists' Newsletter"
Sun Java Champion
IEEE Certified Software Development Professional
http://www.javaspecialists.eu
Tel: +30 69 75 595 262
Skype: kabutz 



On 10/19/12 10:32 AM, Aleksey Shipilev wrote:
> Hi guys,
>
> Following up on May discussion on volatile bug [1], I had started the
> project to collect the suite of concurrency tests which are to expose
> concurrency bugs [2], hopefully much more thoroughly than JCK and other
> targeted tests do.
>
> It had been going for a while, and so far it tests only the basic things
> about primitives, arrays, making the infamous singleton tests, etc. etc.
> My plan is hook up this suite for OpenJDK nightly testing, so don't
> forget make a pull requests for your changes ;)
>
> Here's the call for action! I would appreciate your contributions,
> including but not limited to:
>
>   a) reviewing the test correctness. Doug had been lightly supervising
> this before, but "given enough eyeballs all bugs are shallow". Please
> reference the exact github revision when referencing the test.
>
>   b) running the suite on interesting hardware. Even though the tests
> are scarce, I would be happy to see the results from J9/PPC and various
> ARM implementations. There are couple of negative tests against legal
> races (i.e. UnsafeDCLSingletonTest), it will be comforting to see they
> fail expectedly on non-x86 hardware. If you do run the tests, please zip
> up the results/ folder and post it somewhere.
>
>   c) brainstorming the coverage area: what areas are missing (there are
> lots!), and what should be covered in the first place.
>
>   d) proposing basic testcases and/or pointing out known regression
> tests assorted over the Internet which should be included into the suite.
>
>   e) raising the general suggestions about usability, reliability,
> methodology, etc.
>
> Will appreciate your help!
>
> Thanks,
> Aleksey.
>
> [1] http://cs.oswego.edu/pipermail/concurrency-interest/2012-May/009440.html
> [2] https://github.com/shipilev/java-concurrency-torture
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>   

From ariel at weisberg.ws  Wed Nov  7 17:44:14 2012
From: ariel at weisberg.ws (Ariel Weisberg)
Date: Wed, 07 Nov 2012 17:44:14 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AD9E6.3040000@javaspecialists.eu>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu>
Message-ID: <1352328254.14863.140661150836145.0D1D30AE@webmail.messagingengine.com>

Hi,

I have no feedback other then than that it reproduced for me with with
SunJDK 1.6.0_31, Ubuntu 10.04, Intel i7-920.

With -Xint it worked.

I update to 1.6.0_37 and it still reproduced.

Regards,
Ariel



On Wed, Nov 7, 2012, at 05:00 PM, Dr Heinz M. Kabutz wrote:
> During a hands-on session today of my new Concurrency Specialist Course, 
> one of my students discovered what we think might be an interesting and 
> potentially serious bug in the JVM.  It seems that the Server HotSpot in 
> OpenJDK 7 may sometimes hoist the value of the _interrupted field.  This 
> is interesting, since the value is not stored in Java, but rather in the 
> OSThread.hpp file in the jint _interrupted field.  It is also pretty 
> serious, because it means we cannot rely on the interrupted status in 
> order to shut down threads.  This will affect Future.cancel(), 
> ExecutorService.shutdownNow() and a whole bunch of other mechanisms that 
> use interruptions to cooperatively cancel tasks.  (Obviously the 
> exercise was more involved than the code presented in this email, after 
> all the course is aimed at intermediate to advanced Java developers.  So 
> please don't expect that this won't happen in your code - I've just 
> taken away unnecessary code until we can see the bug without any of the 
> paraphernalia that might distract.)
> 
> First off, some code that works as expected.  As soon as you interrupt 
> the thread, it breaks out of the while() loop and exits:
> 
>     public void think() {
>         while (true) {
>             if (Thread.currentThread().isInterrupted()) break;
>         }
>         System.out.println("We're done thinking");
>     }
> 
> However, if you extract the "Thread.currentThread().isInterrupted()" 
> into a separate method, then that might be optimized by HotSpot to 
> always return false and the code then never ends:
> 
>     public void think() {
>         while (true) {
>             if (checkInterruptedStatus()) break;
>         }
>         System.out.println("We're done thinking");
>     }
> 
>     private boolean checkInterruptedStatus() {
>         return Thread.currentThread().isInterrupted();
>     }
> 
> My assumption is that the checkInterruptedStatus() method is 
> aggressively optimized and then the actual status is not read again.  
> This does not happen with the client hotspot and also not with Java 
> 1.6.0_37.  It does happen with the 1.8 EA that I've got on my MacBook 
> Pro.  The student was using a Windows machine, so this not just a Mac 
> problem. 
> 
> Here is the complete code:
> 
> public class InterruptedVisibilityTest {
>     public void think() {
>         while (true) {
>             if (checkInterruptedStatus()) break;
>         }
>         System.out.println("We're done thinking");
>     }
> 
>     private boolean checkInterruptedStatus() {
>         return Thread.currentThread().isInterrupted();
>     }
> 
>     public static void main(String[] args) throws InterruptedException {
>         final InterruptedVisibilityTest test =
>                 new InterruptedVisibilityTest();
>         Thread thinkerThread = new Thread("Thinker") {
>             public void run() {
>                 test.think();
>             }
>         };
>         thinkerThread.start();
>         Thread.sleep(500);
>         thinkerThread.interrupt();
>         long timeOfInterruption = System.currentTimeMillis();
>         thinkerThread.join(500);
>         if (thinkerThread.isAlive()) {
>             System.err.println("Thinker did not shut down within 500ms");
>             System.err.println("Error in Java Virtual Machine!");
>             System.err.println("Interrupted: " + 
> thinkerThread.isInterrupted());
>             System.err.println();
>             System.err.println("(Let's see if the thread ever dies and 
> how long it takes)");
>             while (thinkerThread.isAlive()) {
>                 thinkerThread.join(1000);
>                 if (thinkerThread.isAlive()) {
>                     System.err.println("  ... still waiting");
>                 }
>             }
>         }
>         System.err.println("Finally, the thread has died - that took " +
>                 (System.currentTimeMillis() - timeOfInterruption) +
>                 "ms");
>     }
> }
> 
> As I said, the original code was more involved, but this demonstrates 
> the essentials.  I hope some of you might be able to take a look at 
> what's going on.
> 
> Regards
> 
> Heinz
> -- 
> Dr Heinz M. Kabutz (PhD CompSci)
> Author of "The Java(tm) Specialists' Newsletter"
> Sun Java Champion
> IEEE Certified Software Development Professional
> http://www.javaspecialists.eu
> Tel: +30 69 75 595 262
> Skype: kabutz
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

From aleksey.shipilev at oracle.com  Wed Nov  7 18:19:21 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 07 Nov 2012 18:19:21 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AD9E6.3040000@javaspecialists.eu>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu>
Message-ID: <509AEC79.1060300@oracle.com>

On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
> As I said, the original code was more involved, but this demonstrates
> the essentials.  I hope some of you might be able to take a look at
> what's going on.

Successfully reproduced the failure on JDK 7u7, Linux x86_64:
  java version "1.7.0_07"
  Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
  Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)

Tests passes with -XX:-Inline. Will look at more detail shortly.

-Aleksey.


From vitalyd at gmail.com  Wed Nov  7 18:24:22 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Wed, 7 Nov 2012 18:24:22 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AD9E6.3040000@javaspecialists.eu>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu>
Message-ID: <CAHjP37GumPkPw_au80u8dJQ0-AfYHgABp01gdC0sPAuCArEHCQ@mail.gmail.com>

Interesting.  There's intrinsic code in library_ call.cpp for this method.
It looks like that code may be missing some flavor of MemBarNode that kills
enregistering/hoisting of the interrupted field.  This should probably be
sent to the compiler folks.

Sent from my phone
On Nov 7, 2012 5:14 PM, "Dr Heinz M. Kabutz" <heinz at javaspecialists.eu>
wrote:

> During a hands-on session today of my new Concurrency Specialist Course,
> one of my students discovered what we think might be an interesting and
> potentially serious bug in the JVM.  It seems that the Server HotSpot in
> OpenJDK 7 may sometimes hoist the value of the _interrupted field.  This is
> interesting, since the value is not stored in Java, but rather in the
> OSThread.hpp file in the jint _interrupted field.  It is also pretty
> serious, because it means we cannot rely on the interrupted status in order
> to shut down threads.  This will affect Future.cancel(),
> ExecutorService.shutdownNow() and a whole bunch of other mechanisms that
> use interruptions to cooperatively cancel tasks.  (Obviously the exercise
> was more involved than the code presented in this email, after all the
> course is aimed at intermediate to advanced Java developers.  So please
> don't expect that this won't happen in your code - I've just taken away
> unnecessary code until we can see the bug without any of the paraphernalia
> that might distract.)
>
> First off, some code that works as expected.  As soon as you interrupt the
> thread, it breaks out of the while() loop and exits:
>
>    public void think() {
>        while (true) {
>            if (Thread.currentThread().**isInterrupted()) break;
>        }
>        System.out.println("We're done thinking");
>    }
>
> However, if you extract the "Thread.currentThread().**isInterrupted()"
> into a separate method, then that might be optimized by HotSpot to always
> return false and the code then never ends:
>
>    public void think() {
>        while (true) {
>            if (checkInterruptedStatus()) break;
>        }
>        System.out.println("We're done thinking");
>    }
>
>    private boolean checkInterruptedStatus() {
>        return Thread.currentThread().**isInterrupted();
>    }
>
> My assumption is that the checkInterruptedStatus() method is aggressively
> optimized and then the actual status is not read again.  This does not
> happen with the client hotspot and also not with Java 1.6.0_37.  It does
> happen with the 1.8 EA that I've got on my MacBook Pro.  The student was
> using a Windows machine, so this not just a Mac problem.
> Here is the complete code:
>
> public class InterruptedVisibilityTest {
>    public void think() {
>        while (true) {
>            if (checkInterruptedStatus()) break;
>        }
>        System.out.println("We're done thinking");
>    }
>
>    private boolean checkInterruptedStatus() {
>        return Thread.currentThread().**isInterrupted();
>    }
>
>    public static void main(String[] args) throws InterruptedException {
>        final InterruptedVisibilityTest test =
>                new InterruptedVisibilityTest();
>        Thread thinkerThread = new Thread("Thinker") {
>            public void run() {
>                test.think();
>            }
>        };
>        thinkerThread.start();
>        Thread.sleep(500);
>        thinkerThread.interrupt();
>        long timeOfInterruption = System.currentTimeMillis();
>        thinkerThread.join(500);
>        if (thinkerThread.isAlive()) {
>            System.err.println("Thinker did not shut down within 500ms");
>            System.err.println("Error in Java Virtual Machine!");
>            System.err.println("**Interrupted: " +
> thinkerThread.isInterrupted())**;
>            System.err.println();
>            System.err.println("(Let's see if the thread ever dies and how
> long it takes)");
>            while (thinkerThread.isAlive()) {
>                thinkerThread.join(1000);
>                if (thinkerThread.isAlive()) {
>                    System.err.println("  ... still waiting");
>                }
>            }
>        }
>        System.err.println("Finally, the thread has died - that took " +
>                (System.currentTimeMillis() - timeOfInterruption) + "ms");
>    }
> }
>
> As I said, the original code was more involved, but this demonstrates the
> essentials.  I hope some of you might be able to take a look at what's
> going on.
>
> Regards
>
> Heinz
> --
> Dr Heinz M. Kabutz (PhD CompSci)
> Author of "The Java(tm) Specialists' Newsletter"
> Sun Java Champion
> IEEE Certified Software Development Professional
> http://www.javaspecialists.eu
> Tel: +30 69 75 595 262
> Skype: kabutz
>
>
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121107/6e512928/attachment-0001.html>

From aleksey.shipilev at oracle.com  Wed Nov  7 18:27:40 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 07 Nov 2012 18:27:40 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AEC79.1060300@oracle.com>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu> <509AEC79.1060300@oracle.com>
Message-ID: <509AEE6C.8080104@oracle.com>

On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
> On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
>> As I said, the original code was more involved, but this demonstrates
>> the essentials.  I hope some of you might be able to take a look at
>> what's going on.
> 
> Successfully reproduced the failure on JDK 7u7, Linux x86_64:
>   java version "1.7.0_07"
>   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
>   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
> 
> Tests passes with -XX:-Inline. Will look at more detail shortly.

This seems to be the miscompilation indeed:

# {method} 'think' '()V' in 'InterruptedVisibilityTest'
  ...
  0x00007f31890601a3: mov    0x14(%r10),%r11d      // read $interrupted
  0x00007f31890601a7: test   %r11d,%r11d           // test $interrupted
  0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
  0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
  0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
  0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END

Will raise the appropriate issue against OpenJDK once I finish with a
quick errand here. Thanks for the test case!

-Aleksey.


From vitalyd at gmail.com  Wed Nov  7 18:44:58 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Wed, 7 Nov 2012 18:44:58 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AEE6C.8080104@oracle.com>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu> <509AEC79.1060300@oracle.com>
	<509AEE6C.8080104@oracle.com>
Message-ID: <CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com>

So looks like nothing to do with hoisting, eh? It simply enters a busy loop
checking for safe points?

Sent from my phone
On Nov 7, 2012 6:30 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com>
wrote:

> On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
> > On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
> >> As I said, the original code was more involved, but this demonstrates
> >> the essentials.  I hope some of you might be able to take a look at
> >> what's going on.
> >
> > Successfully reproduced the failure on JDK 7u7, Linux x86_64:
> >   java version "1.7.0_07"
> >   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
> >   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
> >
> > Tests passes with -XX:-Inline. Will look at more detail shortly.
>
> This seems to be the miscompilation indeed:
>
> # {method} 'think' '()V' in 'InterruptedVisibilityTest'
>   ...
>   0x00007f31890601a3: mov    0x14(%r10),%r11d      // read $interrupted
>   0x00007f31890601a7: test   %r11d,%r11d           // test $interrupted
>   0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
>   0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
>   0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
>   0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END
>
> Will raise the appropriate issue against OpenJDK once I finish with a
> quick errand here. Thanks for the test case!
>
> -Aleksey.
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121107/f2bfe5bb/attachment.html>

From aleksey.shipilev at oracle.com  Wed Nov  7 19:33:05 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 07 Nov 2012 19:33:05 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu>
	<509AEC79.1060300@oracle.com> <509AEE6C.8080104@oracle.com>
	<CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com>
Message-ID: <509AFDC1.4010001@oracle.com>

This is still a bug; the checking for safepoint guarantees this thread
is responding to VM stop events, but not particularly to interrupt
events. The dissasembly for the plain
Thread.currentThread().isInterrupted()-checking loop rechecks the
interrupt flag as fine.

-Aleksey.

On 11/07/2012 06:44 PM, Vitaly Davidovich wrote:
> So looks like nothing to do with hoisting, eh? It simply enters a busy
> loop checking for safe points?
> 
> Sent from my phone
> 
> On Nov 7, 2012 6:30 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com
> <mailto:aleksey.shipilev at oracle.com>> wrote:
> 
>     On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
>     > On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
>     >> As I said, the original code was more involved, but this demonstrates
>     >> the essentials.  I hope some of you might be able to take a look at
>     >> what's going on.
>     >
>     > Successfully reproduced the failure on JDK 7u7, Linux x86_64:
>     >   java version "1.7.0_07"
>     >   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
>     >   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
>     >
>     > Tests passes with -XX:-Inline. Will look at more detail shortly.
> 
>     This seems to be the miscompilation indeed:
> 
>     # {method} 'think' '()V' in 'InterruptedVisibilityTest'
>       ...
>       0x00007f31890601a3: mov    0x14(%r10),%r11d      // read $interrupted
>       0x00007f31890601a7: test   %r11d,%r11d           // test $interrupted
>       0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
>       0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
>       0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
>       0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END
> 
>     Will raise the appropriate issue against OpenJDK once I finish with a
>     quick errand here. Thanks for the test case!
> 
>     -Aleksey.
> 
>     _______________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.oswego.edu
>     <mailto:Concurrency-interest at cs.oswego.edu>
>     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> 


From aleksey.shipilev at oracle.com  Wed Nov  7 19:35:18 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 07 Nov 2012 19:35:18 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AEE6C.8080104@oracle.com>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu>
	<509AEC79.1060300@oracle.com> <509AEE6C.8080104@oracle.com>
Message-ID: <509AFE46.3080202@oracle.com>

On 11/07/2012 06:27 PM, Aleksey Shipilev wrote:
> On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
>> On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
>>> As I said, the original code was more involved, but this demonstrates
>>> the essentials.  I hope some of you might be able to take a look at
>>> what's going on.
>>
>> Successfully reproduced the failure on JDK 7u7, Linux x86_64:
>>   java version "1.7.0_07"
>>   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
>>   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
>>
>> Tests passes with -XX:-Inline. Will look at more detail shortly.
> 
> This seems to be the miscompilation indeed:
> 
> # {method} 'think' '()V' in 'InterruptedVisibilityTest'
>   ...
>   0x00007f31890601a3: mov    0x14(%r10),%r11d      // read $interrupted
>   0x00007f31890601a7: test   %r11d,%r11d           // test $interrupted
>   0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
>   0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
>   0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
>   0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END
> 
> Will raise the appropriate issue against OpenJDK once I finish with a
> quick errand here. Thanks for the test case!

This is submitted as
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8003135

It would take a while for this bug to appear in public.

-Aleksey.

From vitalyd at gmail.com  Wed Nov  7 21:01:40 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Wed, 7 Nov 2012 21:01:40 -0500
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509AFDC1.4010001@oracle.com>
References: <W1528817367270691352216021@webmail113>
	<509AD9E6.3040000@javaspecialists.eu> <509AEC79.1060300@oracle.com>
	<509AEE6C.8080104@oracle.com>
	<CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com>
	<509AFDC1.4010001@oracle.com>
Message-ID: <CAHjP37H_yA_fOp+EhgNnr_XCKsLtHRLbHeGMrQa5deiZyvyx+w@mail.gmail.com>

I understand, I was just surprised that this is not an enregistering
problem - this code isn't rereading the value from a register, it's not
re-reading it at all from the assembly you pasted.

Sent from my phone
On Nov 7, 2012 7:33 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com>
wrote:

> This is still a bug; the checking for safepoint guarantees this thread
> is responding to VM stop events, but not particularly to interrupt
> events. The dissasembly for the plain
> Thread.currentThread().isInterrupted()-checking loop rechecks the
> interrupt flag as fine.
>
> -Aleksey.
>
> On 11/07/2012 06:44 PM, Vitaly Davidovich wrote:
> > So looks like nothing to do with hoisting, eh? It simply enters a busy
> > loop checking for safe points?
> >
> > Sent from my phone
> >
> > On Nov 7, 2012 6:30 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com
> > <mailto:aleksey.shipilev at oracle.com>> wrote:
> >
> >     On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
> >     > On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
> >     >> As I said, the original code was more involved, but this
> demonstrates
> >     >> the essentials.  I hope some of you might be able to take a look
> at
> >     >> what's going on.
> >     >
> >     > Successfully reproduced the failure on JDK 7u7, Linux x86_64:
> >     >   java version "1.7.0_07"
> >     >   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
> >     >   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
> >     >
> >     > Tests passes with -XX:-Inline. Will look at more detail shortly.
> >
> >     This seems to be the miscompilation indeed:
> >
> >     # {method} 'think' '()V' in 'InterruptedVisibilityTest'
> >       ...
> >       0x00007f31890601a3: mov    0x14(%r10),%r11d      // read
> $interrupted
> >       0x00007f31890601a7: test   %r11d,%r11d           // test
> $interrupted
> >       0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
> >       0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
> >       0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
> >       0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END
> >
> >     Will raise the appropriate issue against OpenJDK once I finish with a
> >     quick errand here. Thanks for the test case!
> >
> >     -Aleksey.
> >
> >     _______________________________________________
> >     Concurrency-interest mailing list
> >     Concurrency-interest at cs.oswego.edu
> >     <mailto:Concurrency-interest at cs.oswego.edu>
> >     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121107/5c288b8f/attachment.html>

From heinz at javaspecialists.eu  Thu Nov  8 01:10:39 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Thu, 08 Nov 2012 07:10:39 +0100
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <CAHjP37H_yA_fOp+EhgNnr_XCKsLtHRLbHeGMrQa5deiZyvyx+w@mail.gmail.com>
References: <W1528817367270691352216021@webmail113>	<509AD9E6.3040000@javaspecialists.eu>	<509AEC79.1060300@oracle.com>	<509AEE6C.8080104@oracle.com>	<CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com>	<509AFDC1.4010001@oracle.com>
	<CAHjP37H_yA_fOp+EhgNnr_XCKsLtHRLbHeGMrQa5deiZyvyx+w@mail.gmail.com>
Message-ID: <509B4CDF.8010501@javaspecialists.eu>

An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121108/dc44ba72/attachment-0001.html>

From Joe.Kearney at gsacapital.com  Thu Nov  8 05:07:09 2012
From: Joe.Kearney at gsacapital.com (Kearney, Joe)
Date: Thu, 8 Nov 2012 10:07:09 +0000
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <509B4CDF.8010501@javaspecialists.eu>
References: <W1528817367270691352216021@webmail113><509AD9E6.3040000@javaspecialists.eu>
	<509AEC79.1060300@oracle.com><509AEE6C.8080104@oracle.com><CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com><509AFDC1.4010001@oracle.com><CAHjP37H_yA_fOp+EhgNnr_XCKsLtHRLbHeGMrQa5deiZyvyx+w@mail.gmail.com>
	<509B4CDF.8010501@javaspecialists.eu>
Message-ID: <9319F360221C65428EA819A4E8DC34ED03F4B5B100@OPMBOX21UK.options-it.com>

Heinz,

I tried replacing Thread.currentThread().isInterrupted() in the checkInterruptedStatus() method in your test case with the following, and the test passed - the interruption was seen. This seems to be different to your result below using interrupted(). This is using 7u9, both 32- and 64-bit.

    private boolean checkInterruptedStatus() {
        return Thread.interrupted();
    }

I can reproduce the original version of your test case on 7u9 64-bit *but not 32-bit*.

Thanks,
Joe

From: concurrency-interest-bounces at cs.oswego.edu [mailto:concurrency-interest-bounces at cs.oswego.edu] On Behalf Of Dr Heinz M. Kabutz
Sent: 08 November 2012 06:11
To: Vitaly Davidovich
Cc: concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] _interrupted field visibility bug in OpenJDK 7+

Thanks for picking it up, Aleksey.

One more point - originally the short test method looked like this:

private void interrupted() throws InterruptedException {
    if (Thread.interrupted()) throw new InterruptedException();
}

That also did not throw the exception.

Heinz

On 11/8/12 3:01 AM, Vitaly Davidovich wrote:

I understand, I was just surprised that this is not an enregistering problem - this code isn't rereading the value from a register, it's not re-reading it at all from the assembly you pasted.

Sent from my phone
On Nov 7, 2012 7:33 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com<mailto:aleksey.shipilev at oracle.com>> wrote:
This is still a bug; the checking for safepoint guarantees this thread
is responding to VM stop events, but not particularly to interrupt
events. The dissasembly for the plain
Thread.currentThread().isInterrupted()-checking loop rechecks the
interrupt flag as fine.

-Aleksey.

On 11/07/2012 06:44 PM, Vitaly Davidovich wrote:
> So looks like nothing to do with hoisting, eh? It simply enters a busy
> loop checking for safe points?
>
> Sent from my phone
>
> On Nov 7, 2012 6:30 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com<mailto:aleksey.shipilev at oracle.com>
> <mailto:aleksey.shipilev at oracle.com<mailto:aleksey.shipilev at oracle.com>>> wrote:
>
>     On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
>     > On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
>     >> As I said, the original code was more involved, but this demonstrates
>     >> the essentials.  I hope some of you might be able to take a look at
>     >> what's going on.
>     >
>     > Successfully reproduced the failure on JDK 7u7, Linux x86_64:
>     >   java version "1.7.0_07"
>     >   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
>     >   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
>     >
>     > Tests passes with -XX:-Inline. Will look at more detail shortly.
>
>     This seems to be the miscompilation indeed:
>
>     # {method} 'think' '()V' in 'InterruptedVisibilityTest'
>       ...
>       0x00007f31890601a3: mov    0x14(%r10),%r11d      // read $interrupted
>       0x00007f31890601a7: test   %r11d,%r11d           // test $interrupted
>       0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
>       0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
>       0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
>       0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END
>
>     Will raise the appropriate issue against OpenJDK once I finish with a
>     quick errand here. Thanks for the test case!
>
>     -Aleksey.
>
>     _______________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>
>     <mailto:Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>>
>     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>

This email and any files transmitted with it contain confidential and proprietary information and is solely for the use of the intended recipient.  If you are not the intended recipient please return the email to the sender and delete it from your computer and you must not use, disclose, distribute, copy, print or rely on this email or its contents.  This communication is for informational purposes only.  It is not intended as an offer or solicitation for the purchase or sale of any financial instrument or as an official confirmation of any transaction.   Any comments or statements made herein do not necessarily reflect those of GSA Capital. GSA Capital Partners LLP is authorised and regulated by the Financial Services Authority and is registered in England and Wales at Stratton House, 5 Stratton Street, London W1J 8LA, number OC309261. GSA Capital Services Limited is registered in England and Wales at the same address, number 5320529.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121108/2fdf9a13/attachment.html>

From Joe.Kearney at gsacapital.com  Thu Nov  8 05:23:44 2012
From: Joe.Kearney at gsacapital.com (Kearney, Joe)
Date: Thu, 8 Nov 2012 10:23:44 +0000
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <9319F360221C65428EA819A4E8DC34ED03F4B5B100@OPMBOX21UK.options-it.com>
References: <W1528817367270691352216021@webmail113><509AD9E6.3040000@javaspecialists.eu>
	<509AEC79.1060300@oracle.com><509AEE6C.8080104@oracle.com><CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com><509AFDC1.4010001@oracle.com><CAHjP37H_yA_fOp+EhgNnr_XCKsLtHRLbHeGMrQa5deiZyvyx+w@mail.gmail.com>
	<509B4CDF.8010501@javaspecialists.eu>
	<9319F360221C65428EA819A4E8DC34ED03F4B5B100@OPMBOX21UK.options-it.com>
Message-ID: <9319F360221C65428EA819A4E8DC34ED03F4B5B102@OPMBOX21UK.options-it.com>

Correction - 7u9 32-bit does exhibit this behaviour when you explicitly specify -server. This is all on Windows.

From: concurrency-interest-bounces at cs.oswego.edu [mailto:concurrency-interest-bounces at cs.oswego.edu] On Behalf Of Kearney, Joe
Sent: 08 November 2012 10:07
To: 'Dr Heinz M. Kabutz'; Vitaly Davidovich
Cc: concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] _interrupted field visibility bug in OpenJDK 7+

Heinz,

I tried replacing Thread.currentThread().isInterrupted() in the checkInterruptedStatus() method in your test case with the following, and the test passed - the interruption was seen. This seems to be different to your result below using interrupted(). This is using 7u9, both 32- and 64-bit.

    private boolean checkInterruptedStatus() {
        return Thread.interrupted();
    }

I can reproduce the original version of your test case on 7u9 64-bit *but not 32-bit*.

Thanks,
Joe

From: concurrency-interest-bounces at cs.oswego.edu<mailto:concurrency-interest-bounces at cs.oswego.edu> [mailto:concurrency-interest-bounces at cs.oswego.edu] On Behalf Of Dr Heinz M. Kabutz
Sent: 08 November 2012 06:11
To: Vitaly Davidovich
Cc: concurrency-interest at cs.oswego.edu<mailto:concurrency-interest at cs.oswego.edu>
Subject: Re: [concurrency-interest] _interrupted field visibility bug in OpenJDK 7+

Thanks for picking it up, Aleksey.

One more point - originally the short test method looked like this:

private void interrupted() throws InterruptedException {
    if (Thread.interrupted()) throw new InterruptedException();
}

That also did not throw the exception.

Heinz

On 11/8/12 3:01 AM, Vitaly Davidovich wrote:

I understand, I was just surprised that this is not an enregistering problem - this code isn't rereading the value from a register, it's not re-reading it at all from the assembly you pasted.

Sent from my phone
On Nov 7, 2012 7:33 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com<mailto:aleksey.shipilev at oracle.com>> wrote:
This is still a bug; the checking for safepoint guarantees this thread
is responding to VM stop events, but not particularly to interrupt
events. The dissasembly for the plain
Thread.currentThread().isInterrupted()-checking loop rechecks the
interrupt flag as fine.

-Aleksey.

On 11/07/2012 06:44 PM, Vitaly Davidovich wrote:
> So looks like nothing to do with hoisting, eh? It simply enters a busy
> loop checking for safe points?
>
> Sent from my phone
>
> On Nov 7, 2012 6:30 PM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com<mailto:aleksey.shipilev at oracle.com>
> <mailto:aleksey.shipilev at oracle.com<mailto:aleksey.shipilev at oracle.com>>> wrote:
>
>     On 11/07/2012 06:19 PM, Aleksey Shipilev wrote:
>     > On 11/07/2012 05:00 PM, Dr Heinz M. Kabutz wrote:
>     >> As I said, the original code was more involved, but this demonstrates
>     >> the essentials.  I hope some of you might be able to take a look at
>     >> what's going on.
>     >
>     > Successfully reproduced the failure on JDK 7u7, Linux x86_64:
>     >   java version "1.7.0_07"
>     >   Java(TM) SE Runtime Environment (build 1.7.0_07-b10)
>     >   Java HotSpot(TM) 64-Bit Server VM (build 23.3-b01, mixed mode)
>     >
>     > Tests passes with -XX:-Inline. Will look at more detail shortly.
>
>     This seems to be the miscompilation indeed:
>
>     # {method} 'think' '()V' in 'InterruptedVisibilityTest'
>       ...
>       0x00007f31890601a3: mov    0x14(%r10),%r11d      // read $interrupted
>       0x00007f31890601a7: test   %r11d,%r11d           // test $interrupted
>       0x00007f31890601aa: jne    0x00007f31890601c9    // exit branch
>       0x00007f31890601ac: mov    %rbp,%r10             // LOOP START
>       0x00007f31890601af: test   %eax,0xb15ee4b(%rip)  // safepoint
>       0x00007f31890601b5: jmp    0x00007f31890601ac    // LOOP END
>
>     Will raise the appropriate issue against OpenJDK once I finish with a
>     quick errand here. Thanks for the test case!
>
>     -Aleksey.
>
>     _______________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>
>     <mailto:Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>>
>     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>

This email and any files transmitted with it contain confidential and proprietary information and is solely for the use of the intended recipient.  If you are not the intended recipient please return the email to the sender and delete it from your computer and you must not use, disclose, distribute, copy, print or rely on this email or its contents.  This communication is for informational purposes only.  It is not intended as an offer or solicitation for the purchase or sale of any financial instrument or as an official confirmation of any transaction.   Any comments or statements made herein do not necessarily reflect those of GSA Capital. GSA Capital Partners LLP is authorised and regulated by the Financial Services Authority and is registered in England and Wales at Stratton House, 5 Stratton Street, London W1J 8LA, number OC309261. GSA Capital Services Limited is registered in England and Wales at the same address, number 5320529.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121108/1c684d56/attachment-0001.html>

From heinz at javaspecialists.eu  Thu Nov  8 05:53:58 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Thu, 08 Nov 2012 11:53:58 +0100
Subject: [concurrency-interest] _interrupted field visibility bug in
 OpenJDK 7+
In-Reply-To: <9319F360221C65428EA819A4E8DC34ED03F4B5B102@OPMBOX21UK.options-it.com>
References: <W1528817367270691352216021@webmail113><509AD9E6.3040000@javaspecialists.eu>	<509AEC79.1060300@oracle.com><509AEE6C.8080104@oracle.com><CAHjP37HZx68zO2uxZTv9hZ1NOFLzgpK=ORwVtU6kXC55-jSaGQ@mail.gmail.com><509AFDC1.4010001@oracle.com><CAHjP37H_yA_fOp+EhgNnr_XCKsLtHRLbHeGMrQa5deiZyvyx+w@mail.gmail.com>	<509B4CDF.8010501@javaspecialists.eu>
	<9319F360221C65428EA819A4E8DC34ED03F4B5B100@OPMBOX21UK.options-it.com>
	<9319F360221C65428EA819A4E8DC34ED03F4B5B102@OPMBOX21UK.options-it.com>
Message-ID: <509B8F46.2000107@javaspecialists.eu>

An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121108/96646d38/attachment.html>

From djg at cs.washington.edu  Sat Nov 10 18:45:28 2012
From: djg at cs.washington.edu (Dan Grossman)
Date: Sat, 10 Nov 2012 15:45:28 -0800
Subject: [concurrency-interest] Introducing ForkJoinPool.commonPool
In-Reply-To: <508FEB0E.2080809@cs.oswego.edu>
References: <508FEB0E.2080809@cs.oswego.edu>
Message-ID: <CADruQ+iyKXM6HaQhNQ9E3LS-yerCU4OwLKV+Oy7WbAtM184AQw@mail.gmail.com>

Just to chime in from my special-purpose prospective of using the ForkJoin
Framework to give second-year undergraduates a first, quick exposure to
parallelism, this is a very, very welcome addition.  Thanks!  (That said,
we're so happy that ForkJoin now works "out of the box" for vanilla Java 7
installations, that I plan to wait to take advantage of the common pool
until Java 8 releases.)

--Dan

On Tue, Oct 30, 2012 at 7:58 AM, Doug Lea <dl at cs.oswego.edu> wrote:

>
> Several converging considerations led to the introduction
> of a (static) commonPool available in ForkJoinPool.
> The common pool always exists (but takes up only around 100bytes
> if never used), and is now the default target for any
> invocation of ForkJoinTask.{fork, invoke} if the caller is
> not itself executing in a given pool. In other words,
> ForkJoinTask methods that before threw exceptions because
> the caller was not operating in a pool now succeed, using
> the commonPool. (This is a spec change, but an innocuous
> and desirable one -- a previously illegal use is now legal.)
>
> Among other niceties, this means you can use ForkJoinTasks
> without even knowing about class ForkJoinPool. But you
> can still of course always create your own pools and
> explicitly submit to them if you need isolation or custom
> parameters.
>
> As indicated in the javadocs, you can set construction
> parameters for the commonPool using Properties.
>
> In addition to simplifying usage, introducing a commonPool
> allows some internal optimizations (as well as a few
> new support methods, for example CountedCompleter.helpComplete)
> that could not be supported as well from outside of
> the ForkJoinPool class.
>
> It seems likely that bulk parallel operation support in
> JDK8, Scala, etc., will change to use the commonPool.
> The updated ConcurrentHashMap (JDK8 or V8) class already does so.
>
> The updates are now in all packagings (jsr166y, jsr166e,
> and JDK8 java.util.concurrent). See the usual links:
>
> JDK8 java.util.concurrent:
>     API specs: http://gee.cs.oswego.edu/dl/**jsr166/dist/docs/<http://gee.cs.oswego.edu/dl/jsr166/dist/docs/>
>     jar file: http://gee.cs.oswego.edu/dl/**jsr166/dist/jsr166.jar<http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166.jar>
>     Browsable CVS sources: http://gee.cs.oswego.edu/cgi-**
> bin/viewcvs.cgi/jsr166/src/**main/java/util/<http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/>
>
> jsr166e:
>     API specs: http://gee.cs.oswego.edu/dl/**jsr166/dist/jsr166edocs/<http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/>
>     jar file: http://gee.cs.oswego.edu/dl/**jsr166/dist/jsr166e.jar<http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166e.jar>(compiled using Java7 javac).
>     Browsable CVS sources: http://gee.cs.oswego.edu/cgi-**
> bin/viewcvs.cgi/jsr166/src/**jsr166e/<http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/>
>
> jsr166y:
>     API specs: http://gee.cs.oswego.edu/dl/**jsr166/dist/jsr166ydocs/<http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166ydocs/>
>     jar file: http://gee.cs.oswego.edu/dl/**jsr166/dist/jsr166y.jar<http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166y.jar>(compiled using Java6 javac).
>     Browsable CVS sources: http://gee.cs.oswego.edu/cgi-**
> bin/viewcvs.cgi/jsr166/src/**jsr166y/<http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166y/>
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121110/f91f6f2d/attachment.html>

From heinz at javaspecialists.eu  Sat Nov 17 12:34:34 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Sat, 17 Nov 2012 19:34:34 +0200
Subject: [concurrency-interest] Class striped/ordered Thread Pool
In-Reply-To: <4FB3991C.3060905@cytetech.com>
References: <4FAC9B5A.10005@8950aaa.com>	<4FAD66F3.1030006@intelerad.com>
	<CAHzJPErxhC++_XjUoR6g3qJ+hoUvvg-3dpSNp29p-xM1jc3DCg@mail.gmail.com>
	<4FB36254.4020104@javaspecialists.eu>
	<4FB3991C.3060905@cytetech.com>
Message-ID: <50A7CAAA.1060301@javaspecialists.eu>

For those of you who might be interested, here is a writeup of the 
StripedExecutorService that we discussed in May.  I've also added an 
explanation of how the SerialExecutor works, which took a few brain 
cycles on my side to figure out.

http://www.javaspecialists.eu/archive/Issue206.html

Surprisingly, the newsletter produced a fair amount of good feedback.  
It seems that others have also encountered a need for this type of 
synchronization construct.

I did some cursory performance testing last week to see how it compares 
against, for example, a fixed thread pool.  As I expected, it is not 
very fast.  I've had some ideas of how to fix this, for example, by 
introducing a "poison pill" approach to shutting down.  Writing a faster 
StripedExecutorService would be trivial if it weren't for lifecycle 
management.  We need to ensure that no job remains in the queues after 
shutdownNow() has been invoked, for example.  If any of you are keen to 
cooperate on writing a non-blocking version of this class and to then 
donate that to the greater good of mankind, please contact me off-list.

Regards

Heinz
-- 
Dr Heinz M. Kabutz (PhD CompSci)
Author of "The Java(tm) Specialists' Newsletter"
Sun Java Champion
IEEE Certified Software Development Professional
http://www.javaspecialists.eu
Tel: +30 69 75 595 262
Skype: kabutz 



On 5/16/12 3:10 PM, Gregg Wonderly wrote:
> On 5/16/2012 3:16 AM, Dr Heinz M. Kabutz wrote:
>> I've spent yesterday and part of today looking at various approaches 
>> to solve
>> this problem.
>>
>> 1. My idea of a striped queue would not work, because tasks are not 
>> always
>> enqueued before they are handed off to workers.
>>
>> 2. I've got a nice solution utilizing the SerialExecutor approach, 
>> however, as
>> Joe mentioned, shutdown is particularly challenging. I'm still trying 
>> to solve
>> that, but it is not easy.
>>
>> 3. Another challenge, also mentioned already in this thread, is that 
>> we need to
>> carefully manage the map so that we do not get a memory leak. The 
>> solution I'm
>> trying now is to delete the SerialExecutor from the map whenever it 
>> is empty.
>> This might create a lot of objects, but at least we don't have to 
>> worry about a
>> memory leak.
>
> This is precisely the type of place where I use a counter to manage 
> lifecycle beginning and end.  Code needs to be completely correct, 
> before it is "completely efficient".  I've rarely ever had to decide 
> to start optimizing these kinds of places once I have things up and 
> running and do some instrumentation.  Rarely, are these the hot spots 
> for latency injection.
>
> Gregg
>

From jcchittoda at gmail.com  Sun Nov 18 11:42:34 2012
From: jcchittoda at gmail.com (Jitendra Chittoda)
Date: Sun, 18 Nov 2012 22:12:34 +0530
Subject: [concurrency-interest] Class striped/ordered Thread Pool
In-Reply-To: <50A7CAAA.1060301@javaspecialists.eu>
References: <4FAC9B5A.10005@8950aaa.com> <4FAD66F3.1030006@intelerad.com>
	<CAHzJPErxhC++_XjUoR6g3qJ+hoUvvg-3dpSNp29p-xM1jc3DCg@mail.gmail.com>
	<4FB36254.4020104@javaspecialists.eu>
	<4FB3991C.3060905@cytetech.com>
	<50A7CAAA.1060301@javaspecialists.eu>
Message-ID: <CAPPZNmb8dc5RQKfsDy1Bqj09sFZAHMcp0_UyxP4HwGYqQq7e=A@mail.gmail.com>

Hi Dr Heinz,

I had been developing same concept since last year and still in
development. Meanwhile I am also writing a paper on the same with
the various implementation modes.

You can see my blog on this and an open source project.
http://chittoda.blogspot.in/2011/11/fsm-threadpool-could-this-be-new-design.html
https://code.google.com/p/koncurrent/

Though the "koncurrent" project code might not be in running state as it is
under R&D state. But I would make it in workable mode asap.

I am having plans to complete this along with the non-blocking version so
that we can put a new JSR request to have it included in java concurrency.

We can have some discussions off-list, and I would be interested in sharing
my stuff with you.

Thanks & Regards,
Jitendra Chittoda


On Sat, Nov 17, 2012 at 11:04 PM, Dr Heinz M. Kabutz <
heinz at javaspecialists.eu> wrote:

> For those of you who might be interested, here is a writeup of the
> StripedExecutorService that we discussed in May.  I've also added an
> explanation of how the SerialExecutor works, which took a few brain cycles
> on my side to figure out.
>
> http://www.javaspecialists.eu/**archive/Issue206.html<http://www.javaspecialists.eu/archive/Issue206.html>
>
> Surprisingly, the newsletter produced a fair amount of good feedback.  It
> seems that others have also encountered a need for this type of
> synchronization construct.
>
> I did some cursory performance testing last week to see how it compares
> against, for example, a fixed thread pool.  As I expected, it is not very
> fast.  I've had some ideas of how to fix this, for example, by introducing
> a "poison pill" approach to shutting down.  Writing a faster
> StripedExecutorService would be trivial if it weren't for lifecycle
> management.  We need to ensure that no job remains in the queues after
> shutdownNow() has been invoked, for example.  If any of you are keen to
> cooperate on writing a non-blocking version of this class and to then
> donate that to the greater good of mankind, please contact me off-list.
>
> Regards
>
> Heinz
> --
> Dr Heinz M. Kabutz (PhD CompSci)
> Author of "The Java(tm) Specialists' Newsletter"
> Sun Java Champion
> IEEE Certified Software Development Professional
> http://www.javaspecialists.eu
> Tel: +30 69 75 595 262
> Skype: kabutz
>
>
> On 5/16/12 3:10 PM, Gregg Wonderly wrote:
>
>> On 5/16/2012 3:16 AM, Dr Heinz M. Kabutz wrote:
>>
>>> I've spent yesterday and part of today looking at various approaches to
>>> solve
>>> this problem.
>>>
>>> 1. My idea of a striped queue would not work, because tasks are not
>>> always
>>> enqueued before they are handed off to workers.
>>>
>>> 2. I've got a nice solution utilizing the SerialExecutor approach,
>>> however, as
>>> Joe mentioned, shutdown is particularly challenging. I'm still trying to
>>> solve
>>> that, but it is not easy.
>>>
>>> 3. Another challenge, also mentioned already in this thread, is that we
>>> need to
>>> carefully manage the map so that we do not get a memory leak. The
>>> solution I'm
>>> trying now is to delete the SerialExecutor from the map whenever it is
>>> empty.
>>> This might create a lot of objects, but at least we don't have to worry
>>> about a
>>> memory leak.
>>>
>>
>> This is precisely the type of place where I use a counter to manage
>> lifecycle beginning and end.  Code needs to be completely correct, before
>> it is "completely efficient".  I've rarely ever had to decide to start
>> optimizing these kinds of places once I have things up and running and do
>> some instrumentation.  Rarely, are these the hot spots for latency
>> injection.
>>
>> Gregg
>>
>>  ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>



-- 
Thanks & Regards,
Jitendra Chittoda
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121118/a75d33bb/attachment.html>

From heinz at javaspecialists.eu  Mon Nov 19 01:27:59 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Mon, 19 Nov 2012 07:27:59 +0100
Subject: [concurrency-interest] StampedLock
In-Reply-To: <5083C890.3040500@univ-mlv.fr>
References: <507826FE.7010107@cs.oswego.edu>	<CA+kOe09=kSJfEwAKCwFADmt+V9-t2Lsp-RFBUKGoYiwhB-+Jog@mail.gmail.com>
	<5083C890.3040500@univ-mlv.fr>
Message-ID: <50A9D16F.50803@javaspecialists.eu>

Is StampedLock going to make it into Java 8 or will we have to wait 
until Java 9 for this new synchronizer?

From aleksey.shipilev at oracle.com  Mon Nov 19 04:13:36 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Mon, 19 Nov 2012 13:13:36 +0400
Subject: [concurrency-interest] StampedLock
In-Reply-To: <50A9D16F.50803@javaspecialists.eu>
References: <507826FE.7010107@cs.oswego.edu>	<CA+kOe09=kSJfEwAKCwFADmt+V9-t2Lsp-RFBUKGoYiwhB-+Jog@mail.gmail.com>
	<5083C890.3040500@univ-mlv.fr> <50A9D16F.50803@javaspecialists.eu>
Message-ID: <50A9F840.30408@oracle.com>

To the best of my knowledge jsr166e updates are scheduled to be included
in Java 8, as per http://openjdk.java.net/jeps/155.

-Aleksey.

On 11/19/2012 10:27 AM, Dr Heinz M. Kabutz wrote:
> Is StampedLock going to make it into Java 8 or will we have to wait
> until Java 9 for this new synchronizer?
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest


From aleksey.shipilev at oracle.com  Fri Nov 23 02:18:20 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 23 Nov 2012 11:18:20 +0400
Subject: [concurrency-interest] Fwd: RFR (S): JEP-142: Reduce Cache
	Contention on Specified Fields
In-Reply-To: <50AE9A34.4020001@oracle.com>
References: <50AE9A34.4020001@oracle.com>
Message-ID: <50AF233C.9040605@oracle.com>

FYI. Although the implementation is Hotspot-specific, the API is not.
Would like to hear the opinions :)

-Aleksey.

-------- Original Message --------
Subject: RFR (S): JEP-142: Reduce Cache Contention on Specified Fields
Date: Fri, 23 Nov 2012 01:33:40 +0400
From: Aleksey Shipilev <aleksey.shipilev at oracle.com>
To: hotspot-dev at openjdk.java.net

Hi,

After some internal discussions with Doug Lea, Dave Dice and others, I
would like to solicit the initial feedback on the implementation of
JEP-142, aka @Contended [1]:
  http://openjdk.java.net/jeps/142

The webrev for the initial version is here:
  http://shipilev.net/pub/jdk/hotspot/contended/webrev-2/

Implementation overview. Hotspot code is currently laying out the fields
to optimize the memory footprint, rearranging fields freely to both
satisfy alignment requirements for fields and making the less gaps
possible. We leverage the same infrastructure to exempt specific fields
from the packing, and pushing them outside the dense packed block at
sparse offsets, naturally making up the appropriate padding.

In order to demarcate the specific classes and/or fields eligible for
such the padding, we use new @Contended annotation. Runtime discovery of
annotations reuses the code John (?) laid out for some of
JSR292-specific annotations.

The behavior of this annotation is as follows:

A. Marking the class as contended:

    @Contended
    public static class ContendedTest2 {
        private Object plainField1;
        private Object plainField2;
        private Object plainField3;
        private Object plainField4;
    }

...makes the entire field block to be padded from the both sides:
(below is the output of new tracing -XX:+PrintFieldLayout)

  TestContended$ContendedTest2: field layout
    Entire class is marked contended
     @140 --- instance fields start ---
     @140 "plainField1" Ljava.lang.Object;
     @144 "plainField2" Ljava.lang.Object;
     @148 "plainField3" Ljava.lang.Object;
     @152 "plainField4" Ljava.lang.Object;
     @288 --- instance fields end ---
     @288 --- instance ends ---

Note that we use 128 bytes, twice the cache line size on most hardware
to adjust for adjacent sector prefetchers extending the false sharing
collisions to two cache lines.

B. Marking the field as contended:

    public static class ContendedTest1 {
        @Contended
        private Object contendedField1;
        private Object plainField1;
        private Object plainField2;
        private Object plainField3;
        private Object plainField4;
    }

...pushes the field out of dense block and effectively applies padding:

   TestContended$ContendedTest1: field layout
     @ 12 --- instance fields start ---
     @ 12 "plainField1" Ljava.lang.Object;
     @ 16 "plainField2" Ljava.lang.Object;
     @ 20 "plainField3" Ljava.lang.Object;
     @ 24 "plainField4" Ljava.lang.Object;
     @156 "contendedField1" Ljava.lang.Object; (contended, group = 0)
     @288 --- instance fields end ---
     @288 --- instance ends ---

C. Marking multiple fields makes each field padded:

    public static class ContendedTest4 {
        @Contended
        private Object contendedField1;

        @Contended
        private Object contendedField2;

        private Object plainField3;
        private Object plainField4;
    }

...pushes both fields with individual padding for each:

   TestContended$ContendedTest4: field layout
     @ 12 --- instance fields start ---
     @ 12 "plainField3" Ljava.lang.Object;
     @ 16 "plainField4" Ljava.lang.Object;
     @148 "contendedField1" Ljava.lang.Object; (contended, group = 0)
     @280 "contendedField2" Ljava.lang.Object; (contended, group = 0)
     @416 --- instance fields end ---
     @416 --- instance ends ---

*** IV. Contention groups

There are cases where you want to separate the *group* of fields that
are experiencing contention with everything else but not pairwise. This
is the usual thing for some of the code updating two fields at once.
While marking both with @Contended would be sufficient, we can optimize
the memory footprint by not applying padding between them. In order to
demarcate these groups, we have the parameter in the annotation
describing the equivalence class for contention group.

So that:

    public static class ContendedTest5 {
        @Contended("updater1")
        private Object contendedField1;

        @Contended("updater1")
        private Object contendedField2;

        @Contended("updater2")
        private Object contendedField3;

        private Object plainField5;
        private Object plainField6;
    }

...is laid out as:

   TestContended$ContendedTest5: field layout
     @ 12 --- instance fields start ---
     @ 12 "plainField5" Ljava.lang.Object;
     @ 16 "plainField6" Ljava.lang.Object;
     @148 "contendedField1" Ljava.lang.Object; (contended, group = 12)
     @152 "contendedField2" Ljava.lang.Object; (contended, group = 12)
     @284 "contendedField3" Ljava.lang.Object; (contended, group = 15)
     @416 --- instance fields end ---
     @416 --- instance ends ---

Note $contendedField1 and $contendedField2 are padded from everything
else, but still densely packed with each other.

The code is known to work at least on Linux x86-64, tested with a few
microtests. The layout of fields without @Contended is not affected, so
this is presumably a safe change. I will try to run more tests against
this implementation with JPRT, but will appreciate the design, API, and
draft implementation review meanwhile...

Thanks,
Aleksey.

From jeffhain at rocketmail.com  Fri Nov 23 03:43:32 2012
From: jeffhain at rocketmail.com (Jeff Hain)
Date: Fri, 23 Nov 2012 08:43:32 +0000 (GMT)
Subject: [concurrency-interest] Fwd: RFR (S): JEP-142: Reduce Cache
	Contention on Specified Fields
In-Reply-To: <50AF233C.9040605@oracle.com>
References: <50AE9A34.4020001@oracle.com> <50AF233C.9040605@oracle.com>
Message-ID: <1353660212.79869.YahooMailNeo@web132104.mail.ird.yahoo.com>

>FYI. Although the implementation is Hotspot-specific, the API is not.
>Would like to hear the opinions :)
?
Great news.
?
How does it fit with classes such as AtomicLong?
Will there be padded versions of these, or would
it be possible to have @Contended applied on a
final reference, have the same effect than
@Contended applied to the class of the referenced
instance, which would allow to do things such as:
?
class?SomeClass {
??? @Contended
????final AtomicLong counter = new AtomicLong();
}
?
and
?
void someMethod() {
??? @Contended
????final AtomicLong counter = new AtomicLong();
}
?
?
?
(since AtomicLong only holds one non-final field,
and @Contended should have no effect on final fields)
?
-Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121123/61efee68/attachment.html>

From aleksey.shipilev at oracle.com  Fri Nov 23 04:30:04 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 23 Nov 2012 13:30:04 +0400
Subject: [concurrency-interest] Fwd: RFR (S): JEP-142: Reduce Cache
 Contention on Specified Fields
In-Reply-To: <1353660212.79869.YahooMailNeo@web132104.mail.ird.yahoo.com>
References: <50AE9A34.4020001@oracle.com> <50AF233C.9040605@oracle.com>
	<1353660212.79869.YahooMailNeo@web132104.mail.ird.yahoo.com>
Message-ID: <50AF421C.1060408@oracle.com>

On 11/23/2012 12:43 PM, Jeff Hain wrote:
>>FYI. Although the implementation is Hotspot-specific, the API is not.
>>Would like to hear the opinions :)
>  
> Great news.
>  
> How does it fit with classes such as AtomicLong?
> Will there be padded versions of these, or would
> it be possible to have @Contended applied on a
> final reference, have the same effect than
> @Contended applied to the class of the referenced
> instance, which would allow to do things such as:
>  
> class SomeClass {
>     @Contended
>     final AtomicLong counter = new AtomicLong();
> }
>  
> and
>  
> void someMethod() {
>     @Contended
>     final AtomicLong counter = new AtomicLong();
> }
>  
> ?
>  
> (since AtomicLong only holds one non-final field,
> and @Contended should have no effect on final fields)

Sorry, the current implementation works on class loading level only, and
it requires the non-trivial GC interop to work in the cases you
outlined, basically aligning the contended objects on their own cache
lines during the GCs. (The open question though is whether @Contended
applies to the entire object tree then, and to what extent).

At this point you have to do the padded version of AtomicLong:

 @Contended
 class PaddedAtomicLong extends AtomicLong {}

However, this still has a drawback that the subclass annotation will
only affect the fields in the subclass, and not in the superclasses
(laying the superclass fields on the same offsets in the subclass is
important to get cheap polymorphism).

Another option for library designers like Doug would be rolling out the
distinct version of Atomic* with @Contended involved on the exact field.
It's unlikely plain old Atomic*-s will get this annotation, because it
plays against the memory footprint.

FWIW, this annotation is useful for library designers only; there are
just a few places in j.u.c.* where it is clearly helpful, and that dozen
of places really, really hurt once stepped upon false sharing. I do
believe it would help to construct saner concurrent primitives for other
people as well.

I'm open for the suggestions how to fit these needs without blowing up
the conceptual and implementation complexity beyond what is acceptable
to consider in JDK8.

-Aleksey.

From dl at cs.oswego.edu  Fri Nov 23 14:43:32 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Fri, 23 Nov 2012 14:43:32 -0500
Subject: [concurrency-interest] RFR (S): JEP-142: Reduce Cache
	Contention on Specified Fields
In-Reply-To: <50AF421C.1060408@oracle.com>
References: <50AE9A34.4020001@oracle.com> <50AF233C.9040605@oracle.com>
	<1353660212.79869.YahooMailNeo@web132104.mail.ird.yahoo.com>
	<50AF421C.1060408@oracle.com>
Message-ID: <50AFD1E4.10306@cs.oswego.edu>

(Warning: cross-posting, so replies may bounce to one or both lists.)

> However, this still has a drawback that the subclass annotation will
> only affect the fields in the subclass, and not in the superclasses
> (laying the superclass fields on the same offsets in the subclass is
> important to get cheap polymorphism).


Considering that the only usages with predictable effects will be
on leaf/final classes anyway, perhaps the @Contended annotation
should only have a defined effect on layout when applied to final
classes (plus statics). This also seems to be the only case when a
developer can have an empirical basic for using the annotation.
And if there someday turns out to be some reason to lift this
restriction, it would be possible to do so.

-Doug




From aleksey.shipilev at oracle.com  Fri Nov 23 15:07:16 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Sat, 24 Nov 2012 00:07:16 +0400
Subject: [concurrency-interest] RFR (S): JEP-142: Reduce Cache
 Contention on Specified Fields
In-Reply-To: <50AFD1E4.10306@cs.oswego.edu>
References: <50AE9A34.4020001@oracle.com> <50AF233C.9040605@oracle.com>
	<1353660212.79869.YahooMailNeo@web132104.mail.ird.yahoo.com>
	<50AF421C.1060408@oracle.com> <50AFD1E4.10306@cs.oswego.edu>
Message-ID: <50AFD774.5050409@oracle.com>

On 11/23/2012 11:43 PM, Doug Lea wrote:
> (Warning: cross-posting, so replies may bounce to one or both lists.)
> 
>> However, this still has a drawback that the subclass annotation will
>> only affect the fields in the subclass, and not in the superclasses
>> (laying the superclass fields on the same offsets in the subclass is
>> important to get cheap polymorphism).
> 
> 
> Considering that the only usages with predictable effects will be
> on leaf/final classes anyway, perhaps the @Contended annotation
> should only have a defined effect on layout when applied to final
> classes (plus statics). This also seems to be the only case when a
> developer can have an empirical basic for using the annotation.
> And if there someday turns out to be some reason to lift this
> restriction, it would be possible to do so.

I don't think so. My comment was that you can't change the padding for
the superclass fields, but the contended safety for the superclass
fields should actually stay intact. I.e.,

 class Base {
    @Contended
    private int mySuperImportantField;
 }

...should NOT be compromised with

 class Rogue extends Base {
    private int wannaKillYourPadding;
 }

...and it doesn't in the present version, and it sticks with the same
principle: once superclass fields are laid out, you stick with that
layout in all the subclasses.

-Aleksey.

From dl at cs.oswego.edu  Tue Nov 27 12:40:29 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 12:40:29 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
Message-ID: <50B4FB0D.8020807@cs.oswego.edu>


Aleksey has been making progress on a hotspot implementation of
the @Contended annotation. While this progresses, we'd also
like continued feedback about the java-level information, guidance,
examples, etc.

As a compromise that helps avoid controversy about its status
and specs, the @Contended annotation itself will probably be placed
in sun.misc, not java.util.concurrent.*. A staging version of
Contended.java is in our CVS though, with javadoc at:

http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html

Any comments and suggestions will be welcome.

-Doug


From viktor.klang at gmail.com  Tue Nov 27 12:51:56 2012
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3Ig0qBsYW5n?=)
Date: Tue, 27 Nov 2012 18:51:56 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B4FB0D.8020807@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
Message-ID: <CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>

So how would I use it within Akka for instance? (embed jsr166 and accept
potential duplicate definitions?)

Cheers,
?

On Tue, Nov 27, 2012 at 6:40 PM, Doug Lea <dl at cs.oswego.edu> wrote:

>
> Aleksey has been making progress on a hotspot implementation of
> the @Contended annotation. While this progresses, we'd also
> like continued feedback about the java-level information, guidance,
> examples, etc.
>
> As a compromise that helps avoid controversy about its status
> and specs, the @Contended annotation itself will probably be placed
> in sun.misc, not java.util.concurrent.*. A staging version of
> Contended.java is in our CVS though, with javadoc at:
>
> http://gee.cs.oswego.edu/dl/**jsr166/src/dl/sun/misc/sun/**
> misc/Contended.html<http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html>
>
> Any comments and suggestions will be welcome.
>
> -Doug
>
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>



-- 
Viktor Klang

Akka Tech Lead
Typesafe <http://www.typesafe.com/> - The software stack for applications
that scale

Twitter: @viktorklang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121127/72f04296/attachment.html>

From dl at cs.oswego.edu  Tue Nov 27 13:01:43 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 13:01:43 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
Message-ID: <50B50007.9030804@cs.oswego.edu>

On 11/27/12 12:51, ?iktor ?lang wrote:
> So how would I use it within Akka for instance? (embed jsr166 and accept
> potential duplicate definitions?)

You'll need to wait for a JVM (or preliminary build) that supports it,
and then import sun.misc.Contended. That is one reason to place this
in a JVM-dependent package -- the annotation does you no good
without JVM support.

-Doug


>
> Cheers,
> ?
>
> On Tue, Nov 27, 2012 at 6:40 PM, Doug Lea <dl at cs.oswego.edu
> <mailto:dl at cs.oswego.edu>> wrote:
>
>
>     Aleksey has been making progress on a hotspot implementation of
>     the @Contended annotation. While this progresses, we'd also
>     like continued feedback about the java-level information, guidance,
>     examples, etc.
>
>     As a compromise that helps avoid controversy about its status
>     and specs, the @Contended annotation itself will probably be placed
>     in sun.misc, not java.util.concurrent.*. A staging version of
>     Contended.java is in our CVS though, with javadoc at:
>
>     http://gee.cs.oswego.edu/dl/__jsr166/src/dl/sun/misc/sun/__misc/Contended.html
>     <http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html>
>
>     Any comments and suggestions will be welcome.
>
>     -Doug
>
>     _________________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.__oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
>     http://cs.oswego.edu/mailman/__listinfo/concurrency-interest
>     <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
>
>
>
> --
> Viktor Klang
>
> Akka Tech Lead
> Typesafe <http://www.typesafe.com/>- The software stack for applications that scale
>
> Twitter: @viktorklang
>




From aleksey.shipilev at oracle.com  Tue Nov 27 13:07:56 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Tue, 27 Nov 2012 22:07:56 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B4FB0D.8020807@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
Message-ID: <50B5017C.4020908@oracle.com>

Thanks, Doug.

On 11/27/2012 09:40 PM, Doug Lea wrote:
> 
> Aleksey has been making progress on a hotspot implementation of
> the @Contended annotation.

If someone is interested to see the reference implementation or try out
the code, there is the thread for review at hotspot-dev@ here:
 http://mail.openjdk.java.net/pipermail/hotspot-dev/2012-November/007412.html

The brief explanation of the exact behavior with HotSpot RI is here:
 http://mail.openjdk.java.net/pipermail/hotspot-dev/2012-November/007309.html

Please resist from participating in design flame-war on the HotSpot
development lists, hotspot-dev@ is for implementation issues only. If
you need to suggest an API change, complain about something, or have a
metaphysical discussion, this thread on concurrency-interest@ is what
you should stick with :)

Thanks,
-Aleksey.

From viktor.klang at gmail.com  Tue Nov 27 13:08:07 2012
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3Ig0qBsYW5n?=)
Date: Tue, 27 Nov 2012 19:08:07 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B50007.9030804@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
Message-ID: <CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>

On Tue, Nov 27, 2012 at 7:01 PM, Doug Lea <dl at cs.oswego.edu> wrote:

> On 11/27/12 12:51, ?iktor ?lang wrote:
>
>> So how would I use it within Akka for instance? (embed jsr166 and accept
>> potential duplicate definitions?)
>>
>
> You'll need to wait for a JVM (or preliminary build) that supports it,
> and then import sun.misc.Contended. That is one reason to place this
> in a JVM-dependent package -- the annotation does you no good
> without JVM support.
>

I'd say that it serves as a hint to the JVM that padding would help if
possible, so there wouldn't be a strict need to enforce that it is used. It
would be nice to be able to ship the same code for different JDKs.

Cheers,
?


>
> -Doug
>
>
>
>> Cheers,
>> ?
>>
>> On Tue, Nov 27, 2012 at 6:40 PM, Doug Lea <dl at cs.oswego.edu
>> <mailto:dl at cs.oswego.edu>> wrote:
>>
>>
>>     Aleksey has been making progress on a hotspot implementation of
>>     the @Contended annotation. While this progresses, we'd also
>>     like continued feedback about the java-level information, guidance,
>>     examples, etc.
>>
>>     As a compromise that helps avoid controversy about its status
>>     and specs, the @Contended annotation itself will probably be placed
>>     in sun.misc, not java.util.concurrent.*. A staging version of
>>     Contended.java is in our CVS though, with javadoc at:
>>
>>     http://gee.cs.oswego.edu/dl/__**jsr166/src/dl/sun/misc/sun/__**
>> misc/Contended.html<http://gee.cs.oswego.edu/dl/__jsr166/src/dl/sun/misc/sun/__misc/Contended.html>
>>
>>     <http://gee.cs.oswego.edu/dl/**jsr166/src/dl/sun/misc/sun/**
>> misc/Contended.html<http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html>
>> >
>>
>>     Any comments and suggestions will be welcome.
>>
>>     -Doug
>>
>>     ______________________________**___________________
>>     Concurrency-interest mailing list
>>     Concurrency-interest at cs.__oswe**go.edu <http://oswego.edu> <mailto:
>> Concurrency-interest@**cs.oswego.edu <Concurrency-interest at cs.oswego.edu>
>> >
>>     http://cs.oswego.edu/mailman/_**_listinfo/concurrency-interest<http://cs.oswego.edu/mailman/__listinfo/concurrency-interest>
>>
>>     <http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>> >
>>
>>
>>
>>
>> --
>> Viktor Klang
>>
>> Akka Tech Lead
>> Typesafe <http://www.typesafe.com/>- The software stack for applications
>> that scale
>>
>> Twitter: @viktorklang
>>
>>
>
>


-- 
Viktor Klang

Akka Tech Lead
Typesafe <http://www.typesafe.com/> - The software stack for applications
that scale

Twitter: @viktorklang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121127/36e97ff3/attachment.html>

From dl at cs.oswego.edu  Tue Nov 27 13:25:31 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 13:25:31 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
Message-ID: <50B5059B.3070400@cs.oswego.edu>

On 11/27/12 13:08, ?iktor ?lang wrote:

> I'd say that it serves as a hint to the JVM that padding would help if possible,
> so there wouldn't be a strict need to enforce that it is used. It would be nice
> to be able to ship the same code for different JDKs.
>

But you ship code with sun.misc.Unsafe :-)
As it stands, sun.misc is the place in which non-standard but
universally implemented, platform related, expert-user-only APIs reside.
So seems to be the least controversial home for it. The main
difference is that you won't be able to treat is as assumed to
be present until JDK8. But this is also true of some other
things like upcoming getAndAdd intrinisification.

I'd conclude by saying that other suggestions are welcome, but
they aren't welcome by me :-) This seems like the only
packaging that no one feels like they must try to veto .

-Doug




From hallorant at gmail.com  Tue Nov 27 13:39:39 2012
From: hallorant at gmail.com (Tim Halloran)
Date: Tue, 27 Nov 2012 13:39:39 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B50007.9030804@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
Message-ID: <CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>

On Tue, Nov 27, 2012 at 1:01 PM, Doug Lea <dl at cs.oswego.edu> wrote:
>
> On 11/27/12 12:51, ?iktor ?lang wrote:
>>
>> So how would I use it within Akka for instance? (embed jsr166 and accept
>> potential duplicate definitions?)
>
>
> You'll need to wait for a JVM (or preliminary build) that supports it,
> and then import sun.misc.Contended. That is one reason to place this
> in a JVM-dependent package -- the annotation does you no good
> without JVM support.

(obvious) This could make it potentially annoying to move sources from
JVM implementation to another.  If the sun.misc package is removed
from the javac classpath the sources will not compile. Of course, a
savvy user, which is likely to be anyone trying this out, could create
this annotation in their source tree or make their own Jar.

(point) The implementation in the JVM could consider a "sloppy"
matching scheme which ignores the package -- so that, for example,
com.my.code.Contended works just as well as sun.misc.Contended. This
is easy to do, and I'm guessing there is an -XX: flag in the work to
turn the whole scheme off in the unlikely case @Contended means the
field was discussed in a code inspection (or some other nonsense).

This seems like a useful feature, happy hacking!

Tim


From kasperni at gmail.com  Tue Nov 27 13:46:25 2012
From: kasperni at gmail.com (Kasper Nielsen)
Date: Tue, 27 Nov 2012 19:46:25 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B4FB0D.8020807@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
Message-ID: <CAPs6152J5rdBANrixSAkou5kwZmwEArSJBfvcMjZ6yvYxbvx9w@mail.gmail.com>

Hi,

1)
Without having read Alekseys previous post to hotspot-dev I would have had
a hard time figuring how the group stuff would work.
While the layout might not be identical on platforms with different
cache-line sizes. I think the examples might be worth including in the
javadoc


2)
I'm fine with sun.misc. But wouldn't it make sense to introduce a vm
package (for example, java.lang.vm) which contains vm/cpu integration
classes.
I'm specially thinking about things that probably inevitable will come at
some point: NUMA-aware information, control of object layout, cpu
information, gc integration.
The package would basically be _expert_ level only. But having having stuff
like that in one standard package people/organizations could easily use
simple tools to make sure rogue developers weren't using anything from the
package.

3)
It probably already is, but I'm just making sure
Instrumentation#getObjectSize() returns the correct number.

I know it is probably out of scope for Java 8 but some tools (without
requiring an agent class) for calculating the object size is missing. I lot
of projects goes through a lot of trouble to calculate the size. See for
example http://www.codespot.net/blog/2012/01/measuring-java-object-sizes/or
just google 'calculate java object size'. These alternative methods
are
only going to be more broken after introducing @Contended, especially the
reflection based once.

Perhaps adding the method #getObjectSize() to sun.misc.Unsafe for now would
help.


Cheers
  Kasper


On Tue, Nov 27, 2012 at 6:40 PM, Doug Lea <dl at cs.oswego.edu> wrote:

>
> Aleksey has been making progress on a hotspot implementation of
> the @Contended annotation. While this progresses, we'd also
> like continued feedback about the java-level information, guidance,
> examples, etc.
>
> As a compromise that helps avoid controversy about its status
> and specs, the @Contended annotation itself will probably be placed
> in sun.misc, not java.util.concurrent.*. A staging version of
> Contended.java is in our CVS though, with javadoc at:
>
> http://gee.cs.oswego.edu/dl/**jsr166/src/dl/sun/misc/sun/**
> misc/Contended.html<http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html>
>
> Any comments and suggestions will be welcome.
>
> -Doug
>
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121127/2d0f34ed/attachment.html>

From dl at cs.oswego.edu  Tue Nov 27 15:13:28 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 15:13:28 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAPs6152J5rdBANrixSAkou5kwZmwEArSJBfvcMjZ6yvYxbvx9w@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CAPs6152J5rdBANrixSAkou5kwZmwEArSJBfvcMjZ6yvYxbvx9w@mail.gmail.com>
Message-ID: <50B51EE8.7000003@cs.oswego.edu>

On 11/27/12 13:46, Kasper Nielsen wrote:
> 1)
> Without having read Alekseys previous post to hotspot-dev I would have had a
> hard time figuring how the group stuff would work.
> While the layout might not be identical on platforms with different cache-line
> sizes. I think the examples might be worth including in the javadoc

Yes indeed. We'd like to have good, appropriate examples so that
people not only see what's up, but also get a good sense of when
@Contended is warranted. Ideas about self-contained examples
are welcome. There are a few possible from inside j.u.c (that we
will adapt to use @Contended) but we can probably do better,
especially with all the concern out there that the wrong people
will try to use @Contended for the wrong reasons.


> 2)
> I'm fine with sun.misc. But wouldn't it make sense to introduce a vm package
> (for example, java.lang.vm) which contains vm/cpu integration classes.


Maybe JDK9 modularity will force this. But until then,
you might as well think of sun.misc as a standin for this --
functionality that no one wants to make part of the Java spec
proper, but everyone still wants all JVMs to support.

> 3)
> It probably already is, but I'm just making sure Instrumentation#getObjectSize()
> returns the correct number.

(I'll let Aleksey answer this.)

-Doug

>
> I know it is probably out of scope for Java 8 but some tools (without requiring
> an agent class) for calculating the object size is missing. I lot of projects
> goes through a lot of trouble to calculate the size. See for example
> http://www.codespot.net/blog/2012/01/measuring-java-object-sizes/ or just google
> 'calculate java object size'. These alternative methods are only going to be
> more broken after introducing @Contended, especially the reflection based once.
>
> Perhaps adding the method #getObjectSize() to sun.misc.Unsafe for now would help.
>
>
> Cheers
>    Kasper
>
>
> On Tue, Nov 27, 2012 at 6:40 PM, Doug Lea <dl at cs.oswego.edu
> <mailto:dl at cs.oswego.edu>> wrote:
>
>
>     Aleksey has been making progress on a hotspot implementation of
>     the @Contended annotation. While this progresses, we'd also
>     like continued feedback about the java-level information, guidance,
>     examples, etc.
>
>     As a compromise that helps avoid controversy about its status
>     and specs, the @Contended annotation itself will probably be placed
>     in sun.misc, not java.util.concurrent.*. A staging version of
>     Contended.java is in our CVS though, with javadoc at:
>
>     http://gee.cs.oswego.edu/dl/__jsr166/src/dl/sun/misc/sun/__misc/Contended.html
>     <http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html>
>
>     Any comments and suggestions will be welcome.
>
>     -Doug
>
>     _________________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.__oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
>     http://cs.oswego.edu/mailman/__listinfo/concurrency-interest
>     <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
>


From dl at cs.oswego.edu  Tue Nov 27 15:16:32 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 15:16:32 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>
Message-ID: <50B51FA0.3040908@cs.oswego.edu>

On 11/27/12 13:39, Tim Halloran wrote:
> (point) The implementation in the JVM could consider a "sloppy"
> matching scheme which ignores the package -- so that, for example,
> com.my.code.Contended works just as well as sun.misc.Contended. This
> is easy to do, and I'm guessing there is an -XX: flag in the work to
> turn the whole scheme off in the unlikely case @Contended means the
> field was discussed in a code inspection (or some other nonsense).
>

Thanks; weird but fun. It might come to that. Or to someone creating
a little bytecode tool that translates anything.Contended
to sun.misc.Contended.

-Doug



From Alan.Bateman at oracle.com  Tue Nov 27 15:28:59 2012
From: Alan.Bateman at oracle.com (Alan Bateman)
Date: Tue, 27 Nov 2012 20:28:59 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5059B.3070400@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
Message-ID: <50B5228B.5050402@oracle.com>

On 27/11/2012 18:25, Doug Lea wrote:
>
> But you ship code with sun.misc.Unsafe :-)
> As it stands, sun.misc is the place in which non-standard but
> universally implemented, platform related, expert-user-only APIs reside.
> So seems to be the least controversial home for it. The main
> difference is that you won't be able to treat is as assumed to
> be present until JDK8. But this is also true of some other
> things like upcoming getAndAdd intrinisification.
>
> I'd conclude by saying that other suggestions are welcome, but
> they aren't welcome by me :-) This seems like the only
> packaging that no one feels like they must try to veto .
>
> -Doug
I think it's time to consider a new namespace for this and what might 
follow. As the intention is not to include it in Java SE then something 
like jdk.vm.Contended might be a candidate to think about. I also think 
it's time to think adding a "supported" jdk.vm.Unsafe but that's a 
bigger discussion.

One thing about @Contended in sun.misc is that I assume it's not going 
to work when running with a security manager. It might also make it 
harder to move to modules with strongly enforced boundaries as modules 
will only export "supported" APIs. Even without modules then I assume 
that expert-users would at least have some aversion to using sun.* APIs 
and the javac warning that goes along with it.

-Alan.

From aleksey.shipilev at oracle.com  Tue Nov 27 15:32:58 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 28 Nov 2012 00:32:58 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B51EE8.7000003@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CAPs6152J5rdBANrixSAkou5kwZmwEArSJBfvcMjZ6yvYxbvx9w@mail.gmail.com>
	<50B51EE8.7000003@cs.oswego.edu>
Message-ID: <50B5237A.4070000@oracle.com>

On 11/28/2012 12:13 AM, Doug Lea wrote:
> On 11/27/12 13:46, Kasper Nielsen wrote:
>> 3)
>> It probably already is, but I'm just making sure
>> Instrumentation#getObjectSize()
>> returns the correct number.
> 
> (I'll let Aleksey answer this.)

It should. In our reference implementation, we are basically messing
with object field layout during the class loading, so as far as Hotspot
is concerned, it sees the proper size afterwards. Instrumentation might
have better chances to catch the tail paddings, which you will probably
be unable to infer just looking at the field offsets.

-Aleksey.

From jacyg at alumni.rice.edu  Tue Nov 27 15:45:59 2012
From: jacyg at alumni.rice.edu (Jacy Odin Grannis)
Date: Tue, 27 Nov 2012 14:45:59 -0600
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5228B.5050402@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu> <50B5228B.5050402@oracle.com>
Message-ID: <CAESiqEpOC=BPRY7eq+bzdBY8Bu34RVnW0dVyiYx_H_q8R5J7GQ@mail.gmail.com>

I agree with finding the placement in sun.misc a bit off-putting.  If I'm
writing a shared library that might get used across VMs, it would be much
friendlier to be able to use an annotation which has optional VM support,
say, so that if users use the library on a VM which supports the
annotation, they get the benefit...and more importantly, if the VM they are
using doesn't currently support, they might later get the benefit when a
newer release of that VM adds support.  Instead, by putting it in sun.misc,
it forces library writers to make more difficult choices.

As far as Unsafe goes...I think it's problematic that it does get used as
much as it does.  The Atomic FieldUpdaters exist, the big argument against
them seems to be the parameter safety checks.  Given that they are
implemented with an internal class, I think you could replace a lot of
Unsafe usage if you simply added a new newUpdater() factory method which
had an additional boolean argument to allow construction of a FieldUpdater
which didn't include the checks.  So instead of just having
AtomicReferenceFieldUpdaterImpl, you'd also have a private
AtomicReferenceFieldUpdaterUnsafeImpl which skipped the parameter checks.
Could people screw themselves?  Yeah, but no more than they can by using
Unsafe curently...but they could write more portable code, which should
surely be seen as a good thing.

jacy


On Tue, Nov 27, 2012 at 2:28 PM, Alan Bateman <Alan.Bateman at oracle.com>wrote:

> On 27/11/2012 18:25, Doug Lea wrote:
>
>>
>> But you ship code with sun.misc.Unsafe :-)
>> As it stands, sun.misc is the place in which non-standard but
>> universally implemented, platform related, expert-user-only APIs reside.
>> So seems to be the least controversial home for it. The main
>> difference is that you won't be able to treat is as assumed to
>> be present until JDK8. But this is also true of some other
>> things like upcoming getAndAdd intrinisification.
>>
>> I'd conclude by saying that other suggestions are welcome, but
>> they aren't welcome by me :-) This seems like the only
>> packaging that no one feels like they must try to veto .
>>
>> -Doug
>>
> I think it's time to consider a new namespace for this and what might
> follow. As the intention is not to include it in Java SE then something
> like jdk.vm.Contended might be a candidate to think about. I also think
> it's time to think adding a "supported" jdk.vm.Unsafe but that's a bigger
> discussion.
>
> One thing about @Contended in sun.misc is that I assume it's not going to
> work when running with a security manager. It might also make it harder to
> move to modules with strongly enforced boundaries as modules will only
> export "supported" APIs. Even without modules then I assume that
> expert-users would at least have some aversion to using sun.* APIs and the
> javac warning that goes along with it.
>
> -Alan.
>
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121127/e7a63edf/attachment-0001.html>

From dl at cs.oswego.edu  Tue Nov 27 15:49:10 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 15:49:10 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5228B.5050402@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu> <50B5228B.5050402@oracle.com>
Message-ID: <50B52746.1020004@cs.oswego.edu>

On 11/27/12 15:28, Alan Bateman wrote:

> I think it's time to consider a new namespace for this and what might follow. As
> the intention is not to include it in Java SE then something like
> jdk.vm.Contended might be a candidate to think about. I also think it's time to
> think adding a "supported" jdk.vm.Unsafe but that's a bigger discussion.

I'd be in favor of seeing a JDK9 JEP (written by, say, the JDK
core-libs lead :-) established for this. It would be nice to escape
the weird set of historical accidents that led to all this. But
it will surely require some sort of clever evolution plan to
move external code bases to use it.

-Doug


From gregg at cytetech.com  Tue Nov 27 15:49:41 2012
From: gregg at cytetech.com (Gregg Wonderly)
Date: Tue, 27 Nov 2012 14:49:41 -0600
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B51FA0.3040908@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>
	<50B51FA0.3040908@cs.oswego.edu>
Message-ID: <50B52765.1080605@cytetech.com>

On 11/27/2012 2:16 PM, Doug Lea wrote:
> On 11/27/12 13:39, Tim Halloran wrote:
>> (point) The implementation in the JVM could consider a "sloppy"
>> matching scheme which ignores the package -- so that, for example,
>> com.my.code.Contended works just as well as sun.misc.Contended. This
>> is easy to do, and I'm guessing there is an -XX: flag in the work to
>> turn the whole scheme off in the unlikely case @Contended means the
>> field was discussed in a code inspection (or some other nonsense).
>>
>
> Thanks; weird but fun. It might come to that. Or to someone creating
> a little bytecode tool that translates anything.Contended
> to sun.misc.Contended.

For the sake of the Java security system, I'd guess that any ability to alias 
packages would not be a good thing to have exploitable in the VM at runtime.

Gregg Wonderly


From mr.chrisvest at gmail.com  Tue Nov 27 15:56:15 2012
From: mr.chrisvest at gmail.com (Chris Vest)
Date: Tue, 27 Nov 2012 21:56:15 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>
Message-ID: <CAHXi_0f+N5-SbcX7_oassCO=_k0mnz5nXDFeWSwsqnGFe0jHmg@mail.gmail.com>

On 27 November 2012 19:39, Tim Halloran <hallorant at gmail.com> wrote:
>
> (point) The implementation in the JVM could consider a "sloppy"
> matching scheme which ignores the package -- so that, for example,
> com.my.code.Contended works just as well as sun.misc.Contended. This
> is easy to do, and I'm guessing there is an -XX: flag in the work to
> turn the whole scheme off in the unlikely case @Contended means the
> field was discussed in a code inspection (or some other nonsense).
>

You can have a sun.misc package in your own source tree, and putting a
compatible @Contended annotation in there will make the code compile and
load on non-supporting JVMs.

I don't know if it will then break on supporting JVMs, however, if they
start to think the code is talking about a different annotation, which I
guess would be technically correct.


>
> This seems like a useful feature, happy hacking!
>
> Tim
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121127/36fcf794/attachment.html>

From vitalyd at gmail.com  Tue Nov 27 15:59:48 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Tue, 27 Nov 2012 15:59:48 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAESiqEpOC=BPRY7eq+bzdBY8Bu34RVnW0dVyiYx_H_q8R5J7GQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu> <50B5228B.5050402@oracle.com>
	<CAESiqEpOC=BPRY7eq+bzdBY8Bu34RVnW0dVyiYx_H_q8R5J7GQ@mail.gmail.com>
Message-ID: <CAHjP37Eo1jmLeJMEmBTR6=uyM1t+yC7cNs+TPW2uNsSXj4axUA@mail.gmail.com>

Don't want to sidetrack this thread into Unsafe conversation, but it's also
used as (at least to my knowledge/use) as a poor man's Fences API, off heap
storage (latest trend in java "big data" segment), and some cpu-bound work
with what would've been java byte[] (e.g. bypass uneliminated range
checks).  Until JVM supports those use cases (even if they truly are
unsafe) and/or provides same perf, those usages won't go away.

Sent from my phone
On Nov 27, 2012 3:49 PM, "Jacy Odin Grannis" <jacyg at alumni.rice.edu> wrote:

> I agree with finding the placement in sun.misc a bit off-putting.  If I'm
> writing a shared library that might get used across VMs, it would be much
> friendlier to be able to use an annotation which has optional VM support,
> say, so that if users use the library on a VM which supports the
> annotation, they get the benefit...and more importantly, if the VM they are
> using doesn't currently support, they might later get the benefit when a
> newer release of that VM adds support.  Instead, by putting it in sun.misc,
> it forces library writers to make more difficult choices.
>
> As far as Unsafe goes...I think it's problematic that it does get used as
> much as it does.  The Atomic FieldUpdaters exist, the big argument against
> them seems to be the parameter safety checks.  Given that they are
> implemented with an internal class, I think you could replace a lot of
> Unsafe usage if you simply added a new newUpdater() factory method which
> had an additional boolean argument to allow construction of a FieldUpdater
> which didn't include the checks.  So instead of just having
> AtomicReferenceFieldUpdaterImpl, you'd also have a private
> AtomicReferenceFieldUpdaterUnsafeImpl which skipped the parameter checks.
> Could people screw themselves?  Yeah, but no more than they can by using
> Unsafe curently...but they could write more portable code, which should
> surely be seen as a good thing.
>
> jacy
>
>
> On Tue, Nov 27, 2012 at 2:28 PM, Alan Bateman <Alan.Bateman at oracle.com>wrote:
>
>> On 27/11/2012 18:25, Doug Lea wrote:
>>
>>>
>>> But you ship code with sun.misc.Unsafe :-)
>>> As it stands, sun.misc is the place in which non-standard but
>>> universally implemented, platform related, expert-user-only APIs reside.
>>> So seems to be the least controversial home for it. The main
>>> difference is that you won't be able to treat is as assumed to
>>> be present until JDK8. But this is also true of some other
>>> things like upcoming getAndAdd intrinisification.
>>>
>>> I'd conclude by saying that other suggestions are welcome, but
>>> they aren't welcome by me :-) This seems like the only
>>> packaging that no one feels like they must try to veto .
>>>
>>> -Doug
>>>
>> I think it's time to consider a new namespace for this and what might
>> follow. As the intention is not to include it in Java SE then something
>> like jdk.vm.Contended might be a candidate to think about. I also think
>> it's time to think adding a "supported" jdk.vm.Unsafe but that's a bigger
>> discussion.
>>
>> One thing about @Contended in sun.misc is that I assume it's not going to
>> work when running with a security manager. It might also make it harder to
>> move to modules with strongly enforced boundaries as modules will only
>> export "supported" APIs. Even without modules then I assume that
>> expert-users would at least have some aversion to using sun.* APIs and the
>> javac warning that goes along with it.
>>
>> -Alan.
>>
>> ______________________________**_________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
>> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121127/27529e07/attachment.html>

From dl at cs.oswego.edu  Tue Nov 27 16:06:57 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Tue, 27 Nov 2012 16:06:57 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAESiqEpOC=BPRY7eq+bzdBY8Bu34RVnW0dVyiYx_H_q8R5J7GQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu> <50B5228B.5050402@oracle.com>
	<CAESiqEpOC=BPRY7eq+bzdBY8Bu34RVnW0dVyiYx_H_q8R5J7GQ@mail.gmail.com>
Message-ID: <50B52B71.9020307@cs.oswego.edu>

On 11/27/12 15:45, Jacy Odin Grannis wrote:
> Instead, by putting it in sun.misc, it forces library writers to make
> more difficult choices.

Yes, this is the byproduct of some very deliberate decisions of
the form: People might do X by mistake. So let's make it as
painful as possible to do X at all, by requiring that people
move outside the language proper and use sun.misc.*.
The net result is that the ranks of Unsafe users, especially ,
grows steadily.

>
> As far as Unsafe goes...I think it's problematic that it does get used as much
> as it does.  The Atomic FieldUpdaters exist, the big argument against them seems
> to be the parameter safety checks.

The best bet for improving this situation continues to be to wait
for invokeDynamic field access manipulation to exist and to be
predictably fast. Which I think will someday happen but not soon.
Although even then, array element versions (which is probably the
most important/common case inside j.u.c) may escape this treatment.

-Doug




From forax at univ-mlv.fr  Tue Nov 27 17:17:43 2012
From: forax at univ-mlv.fr (Remi Forax)
Date: Tue, 27 Nov 2012 23:17:43 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B52B71.9020307@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu> <50B5228B.5050402@oracle.com>
	<CAESiqEpOC=BPRY7eq+bzdBY8Bu34RVnW0dVyiYx_H_q8R5J7GQ@mail.gmail.com>
	<50B52B71.9020307@cs.oswego.edu>
Message-ID: <50B53C07.9040401@univ-mlv.fr>

On 11/27/2012 10:06 PM, Doug Lea wrote:
> On 11/27/12 15:45, Jacy Odin Grannis wrote:
>> Instead, by putting it in sun.misc, it forces library writers to make
>> more difficult choices.
>
> Yes, this is the byproduct of some very deliberate decisions of
> the form: People might do X by mistake. So let's make it as
> painful as possible to do X at all, by requiring that people
> move outside the language proper and use sun.misc.*.
> The net result is that the ranks of Unsafe users, especially ,
> grows steadily.
>
>>
>> As far as Unsafe goes...I think it's problematic that it does get 
>> used as much
>> as it does.  The Atomic FieldUpdaters exist, the big argument against 
>> them seems
>> to be the parameter safety checks.
>
> The best bet for improving this situation continues to be to wait
> for invokeDynamic field access manipulation to exist and to be
> predictably fast. 

There is two possible API, one is to export the fieldUpdater as a 
functional interface
and to store it in a static field. The VM is not ready for this, this 
should be done in an update of jdk8.
The other API is to use invokedynamic instead of a method handle,
the VM is ready for that since the release of jdk7, but Java the 
language is not ready at all,
I hope to propose something for jdk9.

> Which I think will someday happen but not soon.
> Although even then, array element versions (which is probably the
> most important/common case inside j.u.c) may escape this treatment.
>
> -Doug

R?mi


From forax at univ-mlv.fr  Tue Nov 27 17:30:46 2012
From: forax at univ-mlv.fr (Remi Forax)
Date: Tue, 27 Nov 2012 23:30:46 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B52765.1080605@cytetech.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CAMyLHFxKeysar3MHGB5Y23=95jkn6vcm1c1g20_95g_xDxbRPQ@mail.gmail.com>
	<50B51FA0.3040908@cs.oswego.edu> <50B52765.1080605@cytetech.com>
Message-ID: <50B53F16.9060003@univ-mlv.fr>

On 11/27/2012 09:49 PM, Gregg Wonderly wrote:
> On 11/27/2012 2:16 PM, Doug Lea wrote:
>> On 11/27/12 13:39, Tim Halloran wrote:
>>> (point) The implementation in the JVM could consider a "sloppy"
>>> matching scheme which ignores the package -- so that, for example,
>>> com.my.code.Contended works just as well as sun.misc.Contended. This
>>> is easy to do, and I'm guessing there is an -XX: flag in the work to
>>> turn the whole scheme off in the unlikely case @Contended means the
>>> field was discussed in a code inspection (or some other nonsense).
>>>
>>
>> Thanks; weird but fun. It might come to that. Or to someone creating
>> a little bytecode tool that translates anything.Contended
>> to sun.misc.Contended.
>
> For the sake of the Java security system, I'd guess that any ability 
> to alias packages would not be a good thing to have exploitable in the 
> VM at runtime.
>
> Gregg Wonderly
>

There is already a tool for that, it just rewrites the jars thus updates 
all dependencies
   https://code.google.com/p/jarjar/
it's based on ASM for the low level bytecode rewriting.

R?mi


From viktor.klang at gmail.com  Tue Nov 27 20:05:13 2012
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3Ig0qBsYW5n?=)
Date: Wed, 28 Nov 2012 02:05:13 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5059B.3070400@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
Message-ID: <CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>

On Tue, Nov 27, 2012 at 7:25 PM, Doug Lea <dl at cs.oswego.edu> wrote:

> On 11/27/12 13:08, ?iktor ?lang wrote:
>
>  I'd say that it serves as a hint to the JVM that padding would help if
>> possible,
>> so there wouldn't be a strict need to enforce that it is used. It would
>> be nice
>> to be able to ship the same code for different JDKs.
>>
>>
> But you ship code with sun.misc.Unsafe :-)
>

Haha, yes, of course, but the Cotended annotation is new, and I only use
sun.misc things that are available on all platforms we support.


> As it stands, sun.misc is the place in which non-standard but
> universally implemented, platform related, expert-user-only APIs reside.
>

Indeed, but will @Contended be magically available on old JDKs?
The only thing I want is not to be able to keep separate code bases for
JDK9 and then JDK8-6 just because @Contended is only present in JDK9.


> So seems to be the least controversial home for it. The main
> difference is that you won't be able to treat is as assumed to
> be present until JDK8. But this is also true of some other
> things like upcoming getAndAdd intrinisification.
>

Speaking of which, it would be preferrable to have a jvm.tools package that
is available for use for all JVM language implementations.

Cheers,
?


>
> I'd conclude by saying that other suggestions are welcome, but
> they aren't welcome by me :-) This seems like the only
> packaging that no one feels like they must try to veto .
>
> -Doug
>
>
>


-- 
Viktor Klang

Akka Tech Lead
Typesafe <http://www.typesafe.com/> - The software stack for applications
that scale

Twitter: @viktorklang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121128/426b44b8/attachment.html>

From gouseinov at gmail.com  Wed Nov 28 03:07:03 2012
From: gouseinov at gmail.com (Gasan Gus)
Date: Wed, 28 Nov 2012 12:07:03 +0400
Subject: [concurrency-interest] I believe i found a typo in chapter 17 of
	JLS, can you confirm this?
Message-ID: <CAORHThxiir+qiKzHRiAXs8tq4vWbrXPXu1d42NUvkexD4PRmqA@mail.gmail.com>

Hi,

Here is the question I've asked regarding that matter on
programmers.stackexchange:
http://programmers.stackexchange.com/questions/177398/help-me-understand-a-part-of-java-language-specification/177401#177401


Kind regards,
Gasan.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121128/fcc6e86b/attachment.html>

From imavroukakis at gmail.com  Wed Nov 28 04:24:24 2012
From: imavroukakis at gmail.com (Ioannis Mavroukakis)
Date: Wed, 28 Nov 2012 09:24:24 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
Message-ID: <BDF98F0A-8770-4D16-9197-6A6E25F0880F@gmail.com>

<joke> how about i.couldhavebeena.Contended ? :-) </joke>

On 28 Nov 2012, at 01:05, ?iktor ?lang <viktor.klang at gmail.com> wrote:

> 
> 
> 
> On Tue, Nov 27, 2012 at 7:25 PM, Doug Lea <dl at cs.oswego.edu> wrote:
>> On 11/27/12 13:08, ?iktor ?lang wrote:
>> 
>>> I'd say that it serves as a hint to the JVM that padding would help if possible,
>>> so there wouldn't be a strict need to enforce that it is used. It would be nice
>>> to be able to ship the same code for different JDKs.
>> 
>> But you ship code with sun.misc.Unsafe :-)
> 
> Haha, yes, of course, but the Cotended annotation is new, and I only use sun.misc things that are available on all platforms we support.
>  
>> As it stands, sun.misc is the place in which non-standard but
>> universally implemented, platform related, expert-user-only APIs reside.
> 
> Indeed, but will @Contended be magically available on old JDKs?
> The only thing I want is not to be able to keep separate code bases for JDK9 and then JDK8-6 just because @Contended is only present in JDK9.
>  
>> So seems to be the least controversial home for it. The main
>> difference is that you won't be able to treat is as assumed to
>> be present until JDK8. But this is also true of some other
>> things like upcoming getAndAdd intrinisification.
> 
> Speaking of which, it would be preferrable to have a jvm.tools package that is available for use for all JVM language implementations.
> 
> Cheers,
> ?
>  
>> 
>> I'd conclude by saying that other suggestions are welcome, but
>> they aren't welcome by me :-) This seems like the only
>> packaging that no one feels like they must try to veto .
>> 
>> -Doug
> 
> 
> 
> -- 
> Viktor Klang
> 
> Akka Tech Lead
> Typesafe - The software stack for applications that scale
> 
> Twitter: @viktorklang
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121128/bd2344f9/attachment.html>

From aleksey.shipilev at oracle.com  Wed Nov 28 04:32:48 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 28 Nov 2012 13:32:48 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
Message-ID: <50B5DA40.6060203@oracle.com>

On 11/28/2012 05:05 AM, ?iktor ?lang wrote:
> Indeed, but will @Contended be magically available on old JDKs?
> The only thing I want is not to be able to keep separate code bases for
> JDK9 and then JDK8-6 just because @Contended is only present in JDK9.

Correction: as far as current plans go, this is on track for JDK8.

Would it help adoption if this would get backported to JDK7 (you will
have to have the recent update release nevertheless)? Would that be
sensible to backport to JDK6 at all?

-Aleksey.

From aleksey.shipilev at oracle.com  Wed Nov 28 04:41:38 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 28 Nov 2012 13:41:38 +0400
Subject: [concurrency-interest] I believe i found a typo in chapter 17
 of JLS, can you confirm this?
In-Reply-To: <CAORHThxiir+qiKzHRiAXs8tq4vWbrXPXu1d42NUvkexD4PRmqA@mail.gmail.com>
References: <CAORHThxiir+qiKzHRiAXs8tq4vWbrXPXu1d42NUvkexD4PRmqA@mail.gmail.com>
Message-ID: <50B5DC52.1070401@oracle.com>

On 11/28/2012 12:07 PM, Gasan Gus wrote:
> Here is the question I've asked regarding that matter on
> programmers.stackexchange:
> http://programmers.stackexchange.com/questions/177398/help-me-understand-a-part-of-java-language-specification/177401#177401

Yeah, that's a typo. Hardcopy of JLS 3 references the correct bullet
point, which is "An interrupt action being performed on t". I think we
had missed the bullet point before "Thread t does not execute any
further instructions until...", which shifted the numbering.

I think it was Alex Buckley (cc'ed) who updated the spec for JDK7, let's
ask him for advice how to fix this.

-Aleksey.

From viktor.klang at gmail.com  Wed Nov 28 04:44:13 2012
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3Ig0qBsYW5n?=)
Date: Wed, 28 Nov 2012 10:44:13 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5DA40.6060203@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
Message-ID: <CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>

On Wed, Nov 28, 2012 at 10:32 AM, Aleksey Shipilev <
aleksey.shipilev at oracle.com> wrote:

> On 11/28/2012 05:05 AM, ?iktor ?lang wrote:
> > Indeed, but will @Contended be magically available on old JDKs?
> > The only thing I want is not to be able to keep separate code bases for
> > JDK9 and then JDK8-6 just because @Contended is only present in JDK9.
>
> Correction: as far as current plans go, this is on track for JDK8.


> Would it help adoption if this would get backported to JDK7 (you will
> have to have the recent update release nevertheless)? Would that be
> sensible to backport to JDK6 at all?
>

Even if that was done, what about J9, Dalvik etc?
I think the sad fact here is that it will essentially only be usable within
the JDK for the foreseeable future.

Cheers,
?


>
> -Aleksey.
>



-- 
Viktor Klang

Akka Tech Lead
Typesafe <http://www.typesafe.com/> - The software stack for applications
that scale

Twitter: @viktorklang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121128/01fd9ca3/attachment-0001.html>

From aleksey.shipilev at oracle.com  Wed Nov 28 04:53:39 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 28 Nov 2012 13:53:39 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
Message-ID: <50B5DF23.50202@oracle.com>

On 11/28/2012 01:44 PM, ?iktor ?lang wrote:
>     Would it help adoption if this would get backported to JDK7 (you will
>     have to have the recent update release nevertheless)? Would that be
>     sensible to backport to JDK6 at all?
> 
> Even if that was done, what about J9, Dalvik etc?
> I think the sad fact here is that it will essentially only be usable
> within the JDK for the foreseeable future.

(I'll let Doug to chime in on J9, Dalvik, etc. endeavors with
@Contended, if there are any).

My question is very pragmatic though: if there is a strong desire to use
this within Oracle JDK7, we can explore how much it would take to
backport. Our current inclination is to use that in JDK8 only, but we
can take the community response into the consideration.

-Aleksey.

From forax at univ-mlv.fr  Wed Nov 28 06:44:21 2012
From: forax at univ-mlv.fr (Remi Forax)
Date: Wed, 28 Nov 2012 12:44:21 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5DA40.6060203@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
Message-ID: <50B5F915.8060904@univ-mlv.fr>

On 11/28/2012 10:32 AM, Aleksey Shipilev wrote:
> On 11/28/2012 05:05 AM, ?iktor ?lang wrote:
>> Indeed, but will @Contended be magically available on old JDKs?
>> The only thing I want is not to be able to keep separate code bases for
>> JDK9 and then JDK8-6 just because @Contended is only present in JDK9.
> Correction: as far as current plans go, this is on track for JDK8.
>
> Would it help adoption if this would get backported to JDK7 (you will
> have to have the recent update release nevertheless)? Would that be
> sensible to backport to JDK6 at all?

It's one advantage to have the annotation in sun.misc,
you can backport it to some update of jdk7 without any trouble.

>
> -Aleksey.

R?mi


From aleksey.shipilev at oracle.com  Wed Nov 28 06:52:43 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 28 Nov 2012 15:52:43 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5F915.8060904@univ-mlv.fr>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com> <50B5F915.8060904@univ-mlv.fr>
Message-ID: <50B5FB0B.4020201@oracle.com>

On 11/28/2012 03:44 PM, Remi Forax wrote:
> On 11/28/2012 10:32 AM, Aleksey Shipilev wrote:
>> On 11/28/2012 05:05 AM, ?iktor ?lang wrote:
>>> Indeed, but will @Contended be magically available on old JDKs?
>>> The only thing I want is not to be able to keep separate code bases for
>>> JDK9 and then JDK8-6 just because @Contended is only present in JDK9.
>> Correction: as far as current plans go, this is on track for JDK8.
>>
>> Would it help adoption if this would get backported to JDK7 (you will
>> have to have the recent update release nevertheless)? Would that be
>> sensible to backport to JDK6 at all?
> 
> It's one advantage to have the annotation in sun.misc,
> you can backport it to some update of jdk7 without any trouble.
> 

Sure. The significant part is VM support though.

-Aleksey.


From dl at cs.oswego.edu  Wed Nov 28 07:09:11 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Wed, 28 Nov 2012 07:09:11 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5DF23.50202@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com>
Message-ID: <50B5FEE7.3080008@cs.oswego.edu>

On 11/28/12 04:53, Aleksey Shipilev wrote:
> On 11/28/2012 01:44 PM, ?iktor ?lang wrote:
>>      Would it help adoption if this would get backported to JDK7 (you will
>>      have to have the recent update release nevertheless)? Would that be
>>      sensible to backport to JDK6 at all?
>>
>> Even if that was done, what about J9, Dalvik etc?
>> I think the sad fact here is that it will essentially only be usable
>> within the JDK for the foreseeable future.
>
> (I'll let Doug to chime in on J9, Dalvik, etc. endeavors with
> @Contended, if there are any).

I regularly keep in touch with these folks about JVM-support
issues that impact j.u.c. For @Contended though, there's
not much immediate impact: since it is an annotation, it can be
ignored by JVMs until underlying support is in place. And supporting
it is self-motivating. Ignoring @Contended for, say, the
to-be-updated version of LongAdder that will use it rather
than the current manually guestimated padding leads to about
a factor of 40 slowdown on some benchmarks/machines.

-Doug




From gregg at cytetech.com  Wed Nov 28 11:42:55 2012
From: gregg at cytetech.com (Gregg Wonderly)
Date: Wed, 28 Nov 2012 10:42:55 -0600
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5DF23.50202@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com>
Message-ID: <50B63F0F.8090203@cytetech.com>

The annotation doesn't have to have the Hotspot support in earlier or 
non-implementing environments (Dalvik for example).  Just putting the @interface 
definition into all appropriate distributions, would seem like the easy way to 
introduce it.  Then, later, actual work can occur to make the changes needed or 
each environment.

Going down that path, makes me feel like having it in a more "public" package 
would be a better choice.  The name "Contended" is now going to be a "reserved" 
name for many people, when used in annotation form.  So, why not just make it a 
publicly defined "annotation" which has appropriate implementation in 
appropriate environments?

Gregg

On 11/28/2012 3:53 AM, Aleksey Shipilev wrote:
> On 11/28/2012 01:44 PM, ?iktor ?lang wrote:
>>      Would it help adoption if this would get backported to JDK7 (you will
>>      have to have the recent update release nevertheless)? Would that be
>>      sensible to backport to JDK6 at all?
>>
>> Even if that was done, what about J9, Dalvik etc?
>> I think the sad fact here is that it will essentially only be usable
>> within the JDK for the foreseeable future.
>
> (I'll let Doug to chime in on J9, Dalvik, etc. endeavors with
> @Contended, if there are any).
>
> My question is very pragmatic though: if there is a strong desire to use
> this within Oracle JDK7, we can explore how much it would take to
> backport. Our current inclination is to use that in JDK8 only, but we
> can take the community response into the consideration.
>
> -Aleksey.
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From gregg at cytetech.com  Wed Nov 28 11:47:17 2012
From: gregg at cytetech.com (Gregg Wonderly)
Date: Wed, 28 Nov 2012 10:47:17 -0600
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B5DF23.50202@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com>
Message-ID: <50B64015.4040407@cytetech.com>

Also, in the grander scheme of things, if, annotations are "runtime", and if we 
extended their definitions, there could be a default method of "whenImplemented" 
and another of "whenMissing" for example, that the JVM could invoke.  The 
implementing JVMs/environments, could then modify the "default" version of 
these.  The defaults, might then print an appropriate log message so that 
users/developers would know when to expect appropriate enhancements.

Gregg

On 11/28/2012 3:53 AM, Aleksey Shipilev wrote:
> On 11/28/2012 01:44 PM, ?iktor ?lang wrote:
>>      Would it help adoption if this would get backported to JDK7 (you will
>>      have to have the recent update release nevertheless)? Would that be
>>      sensible to backport to JDK6 at all?
>>
>> Even if that was done, what about J9, Dalvik etc?
>> I think the sad fact here is that it will essentially only be usable
>> within the JDK for the foreseeable future.
>
> (I'll let Doug to chime in on J9, Dalvik, etc. endeavors with
> @Contended, if there are any).
>
> My question is very pragmatic though: if there is a strong desire to use
> this within Oracle JDK7, we can explore how much it would take to
> backport. Our current inclination is to use that in JDK8 only, but we
> can take the community response into the consideration.
>
> -Aleksey.
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>


From elizarov at devexperts.com  Wed Nov 28 11:59:02 2012
From: elizarov at devexperts.com (Roman Elizarov)
Date: Wed, 28 Nov 2012 16:59:02 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B63F0F.8090203@cytetech.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
Message-ID: <C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E68A@RAVEN.office.devexperts.com>

Going down this path we should have an @Unsafe public annotation, too. In a trusted environment with supporting implementation the annotated piece should use unsafe code for a better performance (just like a @Contended annotation is basically a performance optimization hint). Access to @Unsafe arrays  will skip range checks, @Unsafe AtomicFieldUpdaters will skip type checks (and will works as fast as with sun.misc.Unsafe but without the unpublic sun.misc part of it), etc.

-----Original Message-----
From: concurrency-interest-bounces at cs.oswego.edu [mailto:concurrency-interest-bounces at cs.oswego.edu] On Behalf Of Gregg Wonderly
Sent: Wednesday, November 28, 2012 8:43 PM
To: Aleksey Shipilev
Cc: Doug Lea; Concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] @Contended (JEP-142)

The annotation doesn't have to have the Hotspot support in earlier or non-implementing environments (Dalvik for example).  Just putting the @interface definition into all appropriate distributions, would seem like the easy way to introduce it.  Then, later, actual work can occur to make the changes needed or each environment.

Going down that path, makes me feel like having it in a more "public" package would be a better choice.  The name "Contended" is now going to be a "reserved" 
name for many people, when used in annotation form.  So, why not just make it a publicly defined "annotation" which has appropriate implementation in appropriate environments?

Gregg

On 11/28/2012 3:53 AM, Aleksey Shipilev wrote:
> On 11/28/2012 01:44 PM, ?iktor ?lang wrote:
>>      Would it help adoption if this would get backported to JDK7 (you will
>>      have to have the recent update release nevertheless)? Would that be
>>      sensible to backport to JDK6 at all?
>>
>> Even if that was done, what about J9, Dalvik etc?
>> I think the sad fact here is that it will essentially only be usable 
>> within the JDK for the foreseeable future.
>
> (I'll let Doug to chime in on J9, Dalvik, etc. endeavors with 
> @Contended, if there are any).
>
> My question is very pragmatic though: if there is a strong desire to 
> use this within Oracle JDK7, we can explore how much it would take to 
> backport. Our current inclination is to use that in JDK8 only, but we 
> can take the community response into the consideration.
>
> -Aleksey.
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>

_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu
http://cs.oswego.edu/mailman/listinfo/concurrency-interest


From dl at cs.oswego.edu  Wed Nov 28 12:28:00 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Wed, 28 Nov 2012 12:28:00 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E68A@RAVEN.office.devexperts.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E68A@RAVEN.office.devexperts.com>
Message-ID: <50B649A0.9000407@cs.oswego.edu>

On 11/28/12 11:59, Roman Elizarov wrote:
> Going down this path we should have an @Unsafe public annotation, too. In a
> trusted environment with supporting implementation the annotated piece should
> use unsafe code for a better performance (just like a @Contended annotation
> is basically a performance optimization hint). Access to @Unsafe arrays  will
> skip range checks, @Unsafe AtomicFieldUpdaters will skip type checks (and
> will works as fast as with sun.misc.Unsafe but without the unpublic sun.misc
> part of it), etc.
>

(Here's where Aleksey's predicted metaphysical discussions kick in :-)

The main issue is that we cannot actually spec out the
effects of @Contended, or most of the Unsafe operations in
Java proper, that is using only constructs found in the JLS.
Those of us who use them are not really programming
in Java, but instead in "JVMese". Any such @unsafe
tag would immediately mean that you had escaped Java and
moved into JVMese.

And seen in this way, if you are going to program in
JVMese, then JVMese should be a better language! Automate
the ugly Unsafe hacks. Support full macros. And so on.
A few academic colleagues and I have discussed actually
creating such a language on and off for years. But life
without it never seems to get quite bad enough to invest the
time and work into this.

-Doug


From elizarov at devexperts.com  Wed Nov 28 13:05:54 2012
From: elizarov at devexperts.com (Roman Elizarov)
Date: Wed, 28 Nov 2012 18:05:54 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B649A0.9000407@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E68A@RAVEN.office.devexperts.com>
	<50B649A0.9000407@cs.oswego.edu>
Message-ID: <C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E6FE@RAVEN.office.devexperts.com>

I was talking about a completely different use-case. The key difference between annotations and sun.misc.Unsafe is that if your JVM does not support the annotation your code still works (albeit slower). There is no way to cover all uses of sun.misc.Unsafe with annotations, but many, many real-word uses of sun.misc.Unsafe could have been replaced by annotations. How often do you need a non-volatile read or write to a volatile variable? What do you do now? Your only choice now is to use sun.misc.Unsafe to mix and match volatile and non-volatile access. If could have used some-kind of annotation to describe your intention for a non-volatile access to a volatile variable instead. The particular version of JVM does not understand this particular annotation? No problem. Your code is still correct. And so on it goes. Just look at the places where you use sun.misc.Unsafe. 

-----Original Message-----
From: Doug Lea [mailto:dl at cs.oswego.edu] 
Sent: Wednesday, November 28, 2012 9:28 PM
To: Roman Elizarov
Cc: Concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] @Contended (JEP-142)

On 11/28/12 11:59, Roman Elizarov wrote:
> Going down this path we should have an @Unsafe public annotation, too. 
> In a trusted environment with supporting implementation the annotated 
> piece should use unsafe code for a better performance (just like a 
> @Contended annotation is basically a performance optimization hint). 
> Access to @Unsafe arrays  will skip range checks, @Unsafe 
> AtomicFieldUpdaters will skip type checks (and will works as fast as 
> with sun.misc.Unsafe but without the unpublic sun.misc part of it), etc.
>

(Here's where Aleksey's predicted metaphysical discussions kick in :-)

The main issue is that we cannot actually spec out the effects of @Contended, or most of the Unsafe operations in Java proper, that is using only constructs found in the JLS.
Those of us who use them are not really programming in Java, but instead in "JVMese". Any such @unsafe tag would immediately mean that you had escaped Java and moved into JVMese.

And seen in this way, if you are going to program in JVMese, then JVMese should be a better language! Automate the ugly Unsafe hacks. Support full macros. And so on.
A few academic colleagues and I have discussed actually creating such a language on and off for years. But life without it never seems to get quite bad enough to invest the time and work into this.

-Doug



From aleksey.shipilev at oracle.com  Wed Nov 28 13:16:01 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Wed, 28 Nov 2012 22:16:01 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E6FE@RAVEN.office.devexperts.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E68A@RAVEN.office.devexperts.com>
	<50B649A0.9000407@cs.oswego.edu>
	<C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E6FE@RAVEN.office.devexperts.com>
Message-ID: <50B654E0.30408@oracle.com>


On 11/28/2012 10:05 PM, Roman Elizarov wrote:
> I was talking about a completely different use-case. The key
> difference between annotations and sun.misc.Unsafe is that if your
> JVM does not support the annotation your code still works (albeit
> slower). 

Boil this down to concrete examples and submit a JEP:
  http://openjdk.java.net/jeps/0

-Aleksey.

From forax at univ-mlv.fr  Wed Nov 28 13:22:08 2012
From: forax at univ-mlv.fr (Remi Forax)
Date: Wed, 28 Nov 2012 19:22:08 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E6FE@RAVEN.office.devexperts.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E68A@RAVEN.office.devexperts.com>
	<50B649A0.9000407@cs.oswego.edu>
	<C248BCD79E2CBC4B93C0AE3B1E77E9A81E71E6FE@RAVEN.office.devexperts.com>
Message-ID: <50B65650.9020304@univ-mlv.fr>

On 11/28/2012 07:05 PM, Roman Elizarov wrote:
> I was talking about a completely different use-case. The key difference between annotations and sun.misc.Unsafe is that if your JVM does not support the annotation your code still works (albeit slower). There is no way to cover all uses of sun.misc.Unsafe with annotations, but many, many real-word uses of sun.misc.Unsafe could have been replaced by annotations. How often do you need a non-volatile read or write to a volatile variable? What do you do now? Your only choice now is to use sun.misc.Unsafe to mix and match volatile and non-volatile access. If could have used some-kind of annotation to describe your intention for a non-volatile access to a volatile variable instead. The particular version of JVM does not understand this particular annotation? No problem. Your code is still correct. And so on it goes. Just look at the places where you use sun.misc.Unsafe.

but putting this kind of annotation on fields will not solve your issue, 
you want annotation on code or Doug's Fences API.

R?mi

>
> -----Original Message-----
> From: Doug Lea [mailto:dl at cs.oswego.edu]
> Sent: Wednesday, November 28, 2012 9:28 PM
> To: Roman Elizarov
> Cc: Concurrency-interest at cs.oswego.edu
> Subject: Re: [concurrency-interest] @Contended (JEP-142)
>
> On 11/28/12 11:59, Roman Elizarov wrote:
>> Going down this path we should have an @Unsafe public annotation, too.
>> In a trusted environment with supporting implementation the annotated
>> piece should use unsafe code for a better performance (just like a
>> @Contended annotation is basically a performance optimization hint).
>> Access to @Unsafe arrays  will skip range checks, @Unsafe
>> AtomicFieldUpdaters will skip type checks (and will works as fast as
>> with sun.misc.Unsafe but without the unpublic sun.misc part of it), etc.
>>
> (Here's where Aleksey's predicted metaphysical discussions kick in :-)
>
> The main issue is that we cannot actually spec out the effects of @Contended, or most of the Unsafe operations in Java proper, that is using only constructs found in the JLS.
> Those of us who use them are not really programming in Java, but instead in "JVMese". Any such @unsafe tag would immediately mean that you had escaped Java and moved into JVMese.
>
> And seen in this way, if you are going to program in JVMese, then JVMese should be a better language! Automate the ugly Unsafe hacks. Support full macros. And so on.
> A few academic colleagues and I have discussed actually creating such a language on and off for years. But life without it never seems to get quite bad enough to invest the time and work into this.
>
> -Doug
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest


From aleksey.shipilev at oracle.com  Thu Nov 29 04:43:50 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Thu, 29 Nov 2012 13:43:50 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B63F0F.8090203@cytetech.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
Message-ID: <50B72E56.9060709@oracle.com>

On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
> Going down that path, makes me feel like having it in a more "public"
> package would be a better choice.  The name "Contended" is now going to
> be a "reserved" name for many people, when used in annotation form.  So,
> why not just make it a publicly defined "annotation" which has
> appropriate implementation in appropriate environments?

Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
j.u.c.expert.Contended?

-Aleksey.



From aleksey.shipilev at oracle.com  Thu Nov 29 04:48:11 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Thu, 29 Nov 2012 13:48:11 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B64015.4040407@cytetech.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B64015.4040407@cytetech.com>
Message-ID: <50B72F5B.5080005@oracle.com>

On 11/28/2012 08:47 PM, Gregg Wonderly wrote:
> Also, in the grander scheme of things, if, annotations are "runtime",
> and if we extended their definitions, there could be a default method of
> "whenImplemented" and another of "whenMissing" for example, that the JVM
> could invoke.  The implementing JVMs/environments, could then modify the
> "default" version of these.  The defaults, might then print an
> appropriate log message so that users/developers would know when to
> expect appropriate enhancements.

That's an interesting (mis)use of default methods, not entirely sure if
that is even supported. Anyway, as much exotic as it is, thanks for that
thought anyway!

-Aleksey.

P.S. I would go for @Contended.whenMissing default { System.exit(1); }

From stanimir at riflexo.com  Thu Nov 29 05:11:12 2012
From: stanimir at riflexo.com (Stanimir Simeonoff)
Date: Thu, 29 Nov 2012 12:11:12 +0200
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B72E56.9060709@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
Message-ID: <CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>

>>Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
j.u.c.expert.Contended?
I'd go with "hints".

Stanimir


On Thu, Nov 29, 2012 at 11:43 AM, Aleksey Shipilev <
aleksey.shipilev at oracle.com> wrote:

> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
> > Going down that path, makes me feel like having it in a more "public"
> > package would be a better choice.  The name "Contended" is now going to
> > be a "reserved" name for many people, when used in annotation form.  So,
> > why not just make it a publicly defined "annotation" which has
> > appropriate implementation in appropriate environments?
>
> Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
> j.u.c.expert.Contended?
>
> -Aleksey.
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/7d6b8fda/attachment.html>

From heinz at javaspecialists.eu  Thu Nov 29 06:00:20 2012
From: heinz at javaspecialists.eu (Dr Heinz M. Kabutz)
Date: Thu, 29 Nov 2012 12:00:20 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>	<50B50007.9030804@cs.oswego.edu>	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>	<50B5059B.3070400@cs.oswego.edu>	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>	<50B5DA40.6060203@oracle.com>	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>	<50B5DF23.50202@oracle.com>
	<50B63F0F.8090203@cytetech.com>	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
Message-ID: <50B74044.8040108@javaspecialists.eu>

An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/dcb67588/attachment-0001.html>

From kirk at kodewerk.com  Thu Nov 29 06:17:39 2012
From: kirk at kodewerk.com (Kirk Pepperdine)
Date: Thu, 29 Nov 2012 12:17:39 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B72E56.9060709@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
Message-ID: <E36DF91D-BED4-4FE3-881E-0B37B93E5EA9@kodewerk.com>

Ok, I've already voiced my opinion that this annotation isn't the way to go.. having said that I've preferred the suggestions that this end up in a new package where all the "toxic" functionality ;-) can be placed. For example having the Instrumentation support in the java.lang.instrumentation package makes a whole lot of sense. j.l.vm maybe?

One thing that isn't clear.... if this makes it into the general JDK package structure i'd assume that other JVM's would have to support it in order to pass the TCK. If so, have the other JVM authors been able to comment on this?


On 2012-11-29, at 10:43 AM, Aleksey Shipilev <aleksey.shipilev at oracle.com> wrote:

> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
>> Going down that path, makes me feel like having it in a more "public"
>> package would be a better choice.  The name "Contended" is now going to
>> be a "reserved" name for many people, when used in annotation form.  So,
>> why not just make it a publicly defined "annotation" which has
>> appropriate implementation in appropriate environments?
> 
> Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
> j.u.c.expert.Contended?
> 
> -Aleksey.
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest



From stanimir at riflexo.com  Thu Nov 29 06:40:37 2012
From: stanimir at riflexo.com (Stanimir Simeonoff)
Date: Thu, 29 Nov 2012 13:40:37 +0200
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B74044.8040108@javaspecialists.eu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
Message-ID: <CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>

Problem w/ sun.misc is that it requires security permissions on runtime
whilst it's an absolutely harmless operation. To avoid that people will
just keep padding like it's done now - i.e. nothing achieved.
For instance, I can live by extending j.u.c.atomics even it's ugly just to
avoid touching Unsafe itself (or the AtomicUpdaters)

Stanimir

On Thu, Nov 29, 2012 at 1:00 PM, Dr Heinz M. Kabutz <
heinz at javaspecialists.eu> wrote:

> **
> IMHO, sun.misc.Contended is the right place for this one, as it will
> hopefully discourage people from using it, unless they really know what
> they are doing.  Next you find programmers making all their fields
> "Contended", because they read on some blog that it makes things faster.
> Then instead of your object using only 32 bytes, it gets bloated to 512
> bytes.
>
> Regards
>
> Heinz
> --
> Dr Heinz M. Kabutz (PhD CompSci)
> Author of "The Java(tm) Specialists' Newsletter"
> Sun Java Champion
> IEEE Certified Software Development Professionalhttp://www.javaspecialists.eu
> Tel: +30 69 75 595 262
> Skype: kabutz
>
>
>
> On 11/29/12 11:11 AM, Stanimir Simeonoff wrote:
>
> >>Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
> j.u.c.expert.Contended?
> I'd go with "hints".
>
> Stanimir
>
>
> On Thu, Nov 29, 2012 at 11:43 AM, Aleksey Shipilev <
> aleksey.shipilev at oracle.com> wrote:
>
>> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
>> > Going down that path, makes me feel like having it in a more "public"
>> > package would be a better choice.  The name "Contended" is now going to
>> > be a "reserved" name for many people, when used in annotation form.  So,
>> > why not just make it a publicly defined "annotation" which has
>> > appropriate implementation in appropriate environments?
>>
>>  Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>> j.u.c.expert.Contended?
>>
>> -Aleksey.
>>
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>
> ------------------------------
>
> _______________________________________________
> Concurrency-interest mailing listConcurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/327485dd/attachment.html>

From viktor.klang at gmail.com  Thu Nov 29 07:19:49 2012
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3Ig0qBsYW5n?=)
Date: Thu, 29 Nov 2012 13:19:49 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
	<CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>
Message-ID: <CANPzfU-_esrjV0ZSd_sOxx5hD_98E-ez2CWhJpR25P8Eh_YA=Q@mail.gmail.com>

On Thu, Nov 29, 2012 at 12:40 PM, Stanimir Simeonoff
<stanimir at riflexo.com>wrote:

> Problem w/ sun.misc is that it requires security permissions on runtime
> whilst it's an absolutely harmless operation. To avoid that people will
> just keep padding like it's done now - i.e. nothing achieved.
>



> For instance, I can live by extending j.u.c.atomics even it's ugly just to
> avoid touching Unsafe itself (or the AtomicUpdaters)


That doesn't address the need for padding.


>
>
> Stanimir
>
>
> On Thu, Nov 29, 2012 at 1:00 PM, Dr Heinz M. Kabutz <
> heinz at javaspecialists.eu> wrote:
>
>> **
>> IMHO, sun.misc.Contended is the right place for this one, as it will
>> hopefully discourage people from using it, unless they really know what
>> they are doing.  Next you find programmers making all their fields
>> "Contended", because they read on some blog that it makes things faster.
>> Then instead of your object using only 32 bytes, it gets bloated to 512
>> bytes.
>>
>> Regards
>>
>> Heinz
>> --
>> Dr Heinz M. Kabutz (PhD CompSci)
>> Author of "The Java(tm) Specialists' Newsletter"
>> Sun Java Champion
>> IEEE Certified Software Development Professionalhttp://www.javaspecialists.eu
>> Tel: +30 69 75 595 262
>> Skype: kabutz
>>
>>
>>
>> On 11/29/12 11:11 AM, Stanimir Simeonoff wrote:
>>
>> >>Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>> j.u.c.expert.Contended?
>> I'd go with "hints".
>>
>> Stanimir
>>
>>
>> On Thu, Nov 29, 2012 at 11:43 AM, Aleksey Shipilev <
>> aleksey.shipilev at oracle.com> wrote:
>>
>>> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
>>> > Going down that path, makes me feel like having it in a more "public"
>>> > package would be a better choice.  The name "Contended" is now going to
>>> > be a "reserved" name for many people, when used in annotation form.
>>>  So,
>>> > why not just make it a publicly defined "annotation" which has
>>> > appropriate implementation in appropriate environments?
>>>
>>>  Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>> j.u.c.expert.Contended?
>>>
>>> -Aleksey.
>>>
>>>
>>> _______________________________________________
>>> Concurrency-interest mailing list
>>> Concurrency-interest at cs.oswego.edu
>>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>
>>
>> ------------------------------
>>
>> _______________________________________________
>> Concurrency-interest mailing listConcurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>


-- 
Viktor Klang

Akka Tech Lead
Typesafe <http://www.typesafe.com/> - The software stack for applications
that scale

Twitter: @viktorklang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/463603d3/attachment.html>

From stanimir at riflexo.com  Thu Nov 29 09:06:02 2012
From: stanimir at riflexo.com (Stanimir Simeonoff)
Date: Thu, 29 Nov 2012 16:06:02 +0200
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU-_esrjV0ZSd_sOxx5hD_98E-ez2CWhJpR25P8Eh_YA=Q@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
	<CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>
	<CANPzfU-_esrjV0ZSd_sOxx5hD_98E-ez2CWhJpR25P8Eh_YA=Q@mail.gmail.com>
Message-ID: <CAEJX8orvHXgW4zp-Lqs0AH_tszknQHOMWb6zgt3CU-qoH2_mLA@mail.gmail.com>

On Thu, Nov 29, 2012 at 12:40 PM, Stanimir Simeonoff
<stanimir at riflexo.com>wrote:
>
>> Problem w/ sun.misc is that it requires security permissions on runtime
>> whilst it's an absolutely harmless operation. To avoid that people will
>> just keep padding like it's done now - i.e. nothing achieved.
>>
>
>
>
>> For instance, I can live by extending j.u.c.atomics even it's ugly just
>> to avoid touching Unsafe itself (or the AtomicUpdaters)
>
>
> That doesn't address the need for padding.
>

It's a similar example when you can skip resorting to the Unsafe (and keep
performance) - there is a way to do it even if it's ugly. Similar fate may
follow sun.misc.Contended - even now it's possible to emulate padding but
an attempt to improve the case by having it in sun.misc is neither portable
nor a security friendly approach.

Stanimir


>
>>
>> Stanimir
>>
>>
>> On Thu, Nov 29, 2012 at 1:00 PM, Dr Heinz M. Kabutz <
>> heinz at javaspecialists.eu> wrote:
>>
>>> **
>>> IMHO, sun.misc.Contended is the right place for this one, as it will
>>> hopefully discourage people from using it, unless they really know what
>>> they are doing.  Next you find programmers making all their fields
>>> "Contended", because they read on some blog that it makes things faster.
>>> Then instead of your object using only 32 bytes, it gets bloated to 512
>>> bytes.
>>>
>>> Regards
>>>
>>> Heinz
>>> --
>>> Dr Heinz M. Kabutz (PhD CompSci)
>>> Author of "The Java(tm) Specialists' Newsletter"
>>> Sun Java Champion
>>> IEEE Certified Software Development Professionalhttp://www.javaspecialists.eu
>>> Tel: +30 69 75 595 262
>>> Skype: kabutz
>>>
>>>
>>>
>>> On 11/29/12 11:11 AM, Stanimir Simeonoff wrote:
>>>
>>> >>Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>> j.u.c.expert.Contended?
>>> I'd go with "hints".
>>>
>>> Stanimir
>>>
>>>
>>> On Thu, Nov 29, 2012 at 11:43 AM, Aleksey Shipilev <
>>> aleksey.shipilev at oracle.com> wrote:
>>>
>>>> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
>>>> > Going down that path, makes me feel like having it in a more "public"
>>>> > package would be a better choice.  The name "Contended" is now going
>>>> to
>>>> > be a "reserved" name for many people, when used in annotation form.
>>>>  So,
>>>> > why not just make it a publicly defined "annotation" which has
>>>> > appropriate implementation in appropriate environments?
>>>>
>>>>  Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>>> j.u.c.expert.Contended?
>>>>
>>>> -Aleksey.
>>>>
>>>>
>>>> _______________________________________________
>>>> Concurrency-interest mailing list
>>>> Concurrency-interest at cs.oswego.edu
>>>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>>
>>>
>>> ------------------------------
>>>
>>> _______________________________________________
>>> Concurrency-interest mailing listConcurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>
>>>
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>>
>
>
> --
> Viktor Klang
>
> Akka Tech Lead
> Typesafe <http://www.typesafe.com/> - The software stack for applications
> that scale
>
> Twitter: @viktorklang
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/f1169776/attachment-0001.html>

From viktor.klang at gmail.com  Thu Nov 29 09:14:11 2012
From: viktor.klang at gmail.com (=?UTF-8?B?4oiaaWt0b3Ig0qBsYW5n?=)
Date: Thu, 29 Nov 2012 15:14:11 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAEJX8orvHXgW4zp-Lqs0AH_tszknQHOMWb6zgt3CU-qoH2_mLA@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
	<CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>
	<CANPzfU-_esrjV0ZSd_sOxx5hD_98E-ez2CWhJpR25P8Eh_YA=Q@mail.gmail.com>
	<CAEJX8orvHXgW4zp-Lqs0AH_tszknQHOMWb6zgt3CU-qoH2_mLA@mail.gmail.com>
Message-ID: <CANPzfU-bUG1eOmXc7Zbi7bP=U24hgwjuVL=ghSvLBgjG_DyDWw@mail.gmail.com>

On Thu, Nov 29, 2012 at 3:06 PM, Stanimir Simeonoff <stanimir at riflexo.com>wrote:

>
>
> On Thu, Nov 29, 2012 at 12:40 PM, Stanimir Simeonoff <stanimir at riflexo.com
>> > wrote:
>>
>>> Problem w/ sun.misc is that it requires security permissions on runtime
>>> whilst it's an absolutely harmless operation. To avoid that people will
>>> just keep padding like it's done now - i.e. nothing achieved.
>>>
>>
>>
>>
>>> For instance, I can live by extending j.u.c.atomics even it's ugly just
>>> to avoid touching Unsafe itself (or the AtomicUpdaters)
>>
>>
>> That doesn't address the need for padding.
>>
>
> It's a similar example when you can skip resorting to the Unsafe (and keep
> performance) - there is a way to do it even if it's ugly.
>

No, Java doesn't have MI so it only works for single-fields, which is
extremely limiting.


> Similar fate may follow sun.misc.Contended - even now it's possible to
> emulate padding but an attempt to improve the case by having it in sun.misc
> is neither portable nor a security friendly approach.
>

The deal breaker for the annotation is that it breaks the program if the
annotation doesn't exist in that version of the JVM.

Cheers,
?


>
>
> Stanimir
>
>
>>
>>>
>>> Stanimir
>>>
>>>
>>> On Thu, Nov 29, 2012 at 1:00 PM, Dr Heinz M. Kabutz <
>>> heinz at javaspecialists.eu> wrote:
>>>
>>>> **
>>>> IMHO, sun.misc.Contended is the right place for this one, as it will
>>>> hopefully discourage people from using it, unless they really know what
>>>> they are doing.  Next you find programmers making all their fields
>>>> "Contended", because they read on some blog that it makes things faster.
>>>> Then instead of your object using only 32 bytes, it gets bloated to 512
>>>> bytes.
>>>>
>>>> Regards
>>>>
>>>> Heinz
>>>> --
>>>> Dr Heinz M. Kabutz (PhD CompSci)
>>>> Author of "The Java(tm) Specialists' Newsletter"
>>>> Sun Java Champion
>>>> IEEE Certified Software Development Professionalhttp://www.javaspecialists.eu
>>>> Tel: +30 69 75 595 262
>>>> Skype: kabutz
>>>>
>>>>
>>>>
>>>> On 11/29/12 11:11 AM, Stanimir Simeonoff wrote:
>>>>
>>>> >>Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>>> j.u.c.expert.Contended?
>>>> I'd go with "hints".
>>>>
>>>> Stanimir
>>>>
>>>>
>>>> On Thu, Nov 29, 2012 at 11:43 AM, Aleksey Shipilev <
>>>> aleksey.shipilev at oracle.com> wrote:
>>>>
>>>>> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
>>>>> > Going down that path, makes me feel like having it in a more "public"
>>>>> > package would be a better choice.  The name "Contended" is now going
>>>>> to
>>>>> > be a "reserved" name for many people, when used in annotation form.
>>>>>  So,
>>>>> > why not just make it a publicly defined "annotation" which has
>>>>> > appropriate implementation in appropriate environments?
>>>>>
>>>>>  Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>>>> j.u.c.expert.Contended?
>>>>>
>>>>> -Aleksey.
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> Concurrency-interest mailing list
>>>>> Concurrency-interest at cs.oswego.edu
>>>>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>>>
>>>>
>>>> ------------------------------
>>>>
>>>> _______________________________________________
>>>> Concurrency-interest mailing listConcurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>>
>>>>
>>>
>>> _______________________________________________
>>> Concurrency-interest mailing list
>>> Concurrency-interest at cs.oswego.edu
>>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>
>>>
>>
>>
>> --
>> Viktor Klang
>>
>> Akka Tech Lead
>> Typesafe <http://www.typesafe.com/> - The software stack for
>> applications that scale
>>
>> Twitter: @viktorklang
>>
>>
>


-- 
Viktor Klang

Director of Engineering
Typesafe <http://www.typesafe.com/> - The software stack for applications
that scale

Twitter: @viktorklang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/aafe0907/attachment.html>

From stanimir at riflexo.com  Thu Nov 29 09:31:46 2012
From: stanimir at riflexo.com (Stanimir Simeonoff)
Date: Thu, 29 Nov 2012 16:31:46 +0200
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU-bUG1eOmXc7Zbi7bP=U24hgwjuVL=ghSvLBgjG_DyDWw@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
	<CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>
	<CANPzfU-_esrjV0ZSd_sOxx5hD_98E-ez2CWhJpR25P8Eh_YA=Q@mail.gmail.com>
	<CAEJX8orvHXgW4zp-Lqs0AH_tszknQHOMWb6zgt3CU-qoH2_mLA@mail.gmail.com>
	<CANPzfU-bUG1eOmXc7Zbi7bP=U24hgwjuVL=ghSvLBgjG_DyDWw@mail.gmail.com>
Message-ID: <CAEJX8opm3KwNX5Rf2d++XfMibp5NYapStVp4CQ2G7Ff3UcQT2g@mail.gmail.com>

>
> On Thu, Nov 29, 2012 at 3:06 PM, Stanimir Simeonoff <stanimir at riflexo.com>wrote:
>
>>
>>
>> On Thu, Nov 29, 2012 at 12:40 PM, Stanimir Simeonoff <
>>> stanimir at riflexo.com> wrote:
>>>
>>>> Problem w/ sun.misc is that it requires security permissions on runtime
>>>> whilst it's an absolutely harmless operation. To avoid that people will
>>>> just keep padding like it's done now - i.e. nothing achieved.
>>>>
>>>
>>>
>>>
>>>> For instance, I can live by extending j.u.c.atomics even it's ugly just
>>>> to avoid touching Unsafe itself (or the AtomicUpdaters)
>>>
>>>
>>> That doesn't address the need for padding.
>>>
>>
>> It's a similar example when you can skip resorting to the Unsafe (and
>> keep performance) - there is a way to do it even if it's ugly.
>>
>
> No, Java doesn't have MI so it only works for single-fields, which is
> extremely limiting.
>
Of course, it's limiting and of course you can't pad from the front of the
object but it's better than the FIeldUpdaters for most of the part, at
least in my experience.


> Similar fate may follow sun.misc.Contended - even now it's possible to
>> emulate padding but an attempt to improve the case by having it in sun.misc
>> is neither portable nor a security friendly approach.
>>
>
> The deal breaker for the annotation is that it breaks the program if the
> annotation doesn't exist in that version of the JVM.
>

 -Xbootclasspath/a comes to mind (although that equals access to the JVM
start-up) or classloading tricks, dynamically removing the annotation.
Bytecode enhancing ain't so hard actually but hardly worth the effort if
the JVM can be updated. Keeping both classes in the the jar is an option
too with the classloader picking the correct version. If you use custom
classloaders that's quite an easy task to implement.
Having the annotation unsupported by the JVM would likely yield bad
performance but it would not result in NoClassDefFoundError.

Stanimir



> Cheers,
> ?
>
>
>>
>>
>> Stanimir
>>
>>
>>>
>>>>
>>>> Stanimir
>>>>
>>>>
>>>> On Thu, Nov 29, 2012 at 1:00 PM, Dr Heinz M. Kabutz <
>>>> heinz at javaspecialists.eu> wrote:
>>>>
>>>>> **
>>>>> IMHO, sun.misc.Contended is the right place for this one, as it will
>>>>> hopefully discourage people from using it, unless they really know what
>>>>> they are doing.  Next you find programmers making all their fields
>>>>> "Contended", because they read on some blog that it makes things faster.
>>>>> Then instead of your object using only 32 bytes, it gets bloated to 512
>>>>> bytes.
>>>>>
>>>>> Regards
>>>>>
>>>>> Heinz
>>>>> --
>>>>> Dr Heinz M. Kabutz (PhD CompSci)
>>>>> Author of "The Java(tm) Specialists' Newsletter"
>>>>> Sun Java Champion
>>>>> IEEE Certified Software Development Professionalhttp://www.javaspecialists.eu
>>>>> Tel: +30 69 75 595 262
>>>>> Skype: kabutz
>>>>>
>>>>>
>>>>>
>>>>> On 11/29/12 11:11 AM, Stanimir Simeonoff wrote:
>>>>>
>>>>> >>Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>>>> j.u.c.expert.Contended?
>>>>> I'd go with "hints".
>>>>>
>>>>> Stanimir
>>>>>
>>>>>
>>>>> On Thu, Nov 29, 2012 at 11:43 AM, Aleksey Shipilev <
>>>>> aleksey.shipilev at oracle.com> wrote:
>>>>>
>>>>>> On 11/28/2012 08:42 PM, Gregg Wonderly wrote:
>>>>>> > Going down that path, makes me feel like having it in a more
>>>>>> "public"
>>>>>> > package would be a better choice.  The name "Contended" is now
>>>>>> going to
>>>>>> > be a "reserved" name for many people, when used in annotation form.
>>>>>>  So,
>>>>>> > why not just make it a publicly defined "annotation" which has
>>>>>> > appropriate implementation in appropriate environments?
>>>>>>
>>>>>>  Any concrete suggestion? j.u.c.Contended? j.u.c.hints.Contended?
>>>>>> j.u.c.expert.Contended?
>>>>>>
>>>>>> -Aleksey.
>>>>>>
>>>>>>
>>>>>> _______________________________________________
>>>>>> Concurrency-interest mailing list
>>>>>> Concurrency-interest at cs.oswego.edu
>>>>>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>>>>
>>>>>
>>>>> ------------------------------
>>>>>
>>>>> _______________________________________________
>>>>> Concurrency-interest mailing listConcurrency-interest at cs.oswego.eduhttp://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>>>
>>>>>
>>>>
>>>> _______________________________________________
>>>> Concurrency-interest mailing list
>>>> Concurrency-interest at cs.oswego.edu
>>>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>>>
>>>>
>>>
>>>
>>> --
>>> Viktor Klang
>>>
>>> Akka Tech Lead
>>> Typesafe <http://www.typesafe.com/> - The software stack for
>>> applications that scale
>>>
>>> Twitter: @viktorklang
>>>
>>>
>>
>
>
> --
> Viktor Klang
>
> Director of Engineering
> Typesafe <http://www.typesafe.com/> - The software stack for applications
> that scale
>
> Twitter: @viktorklang
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/388d2780/attachment-0001.html>

From forax at univ-mlv.fr  Thu Nov 29 09:58:56 2012
From: forax at univ-mlv.fr (Remi Forax)
Date: Thu, 29 Nov 2012 15:58:56 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CANPzfU-bUG1eOmXc7Zbi7bP=U24hgwjuVL=ghSvLBgjG_DyDWw@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
	<CAEJX8oqpMwGwPpE1AFQ764KaK89B1oWKvMMa4D_+qoe_V9u3_g@mail.gmail.com>
	<CANPzfU-_esrjV0ZSd_sOxx5hD_98E-ez2CWhJpR25P8Eh_YA=Q@mail.gmail.com>
	<CAEJX8orvHXgW4zp-Lqs0AH_tszknQHOMWb6zgt3CU-qoH2_mLA@mail.gmail.com>
	<CANPzfU-bUG1eOmXc7Zbi7bP=U24hgwjuVL=ghSvLBgjG_DyDWw@mail.gmail.com>
Message-ID: <50B77830.7090509@univ-mlv.fr>

On 11/29/2012 03:14 PM, ?iktor ?lang wrote:
>
>
>
> On Thu, Nov 29, 2012 at 3:06 PM, Stanimir Simeonoff 
> <stanimir at riflexo.com <mailto:stanimir at riflexo.com>> wrote:
>
>
>
>         On Thu, Nov 29, 2012 at 12:40 PM, Stanimir Simeonoff
>         <stanimir at riflexo.com <mailto:stanimir at riflexo.com>> wrote:
>
>             Problem w/ sun.misc is that it requires security
>             permissions on runtime whilst it's an absolutely harmless
>             operation. To avoid that people will just keep padding
>             like it's done now - i.e. nothing achieved.
>
>
>             For instance, I can live by extending j.u.c.atomics even
>             it's ugly just to avoid touching Unsafe itself (or the
>             AtomicUpdaters)
>
>
>         That doesn't address the need for padding.
>
>
>     It's a similar example when you can skip resorting to the Unsafe
>     (and keep performance) - there is a way to do it even if it's ugly.
>
>
> No, Java doesn't have MI so it only works for single-fields, which is 
> extremely limiting.
>
>     Similar fate may follow sun.misc.Contended - even now it's
>     possible to emulate padding but an attempt to improve the case by
>     having it in sun.misc is neither portable nor a security friendly
>     approach.
>
>
> The deal breaker for the annotation is that it breaks the program if 
> the annotation doesn't exist in that version of the JVM.

correct me if I'm wrong but if the annotation is not present in the 
classpath there is no problem until your program uses reflection on the 
field and ask for all annotations using field.getAnnotations().

>
> Cheers,
> ?

R?mi


From jeffhain at rocketmail.com  Thu Nov 29 17:42:39 2012
From: jeffhain at rocketmail.com (Jeff Hain)
Date: Thu, 29 Nov 2012 22:42:39 +0000 (GMT)
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B74044.8040108@javaspecialists.eu>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
Message-ID: <1354228959.59823.YahooMailNeo@web132105.mail.ird.yahoo.com>

>IMHO, sun.misc.Contended is the right place for this one,
>as it will
hopefully discourage people from using it,
>unless they really know what
they are doing.


It will also discourage people from using it, even though
they would know what they are doing, if they want to make
efficient AND portable libraries.
To remain portable I'll stick to hand-made padding until
@Contented or equivalent makes it to non-JVMese Java.
That said, I understand that it might not be a good idea
to promote such a low-level feature into the language
(maybe some day could we have the JVM figure out and create
padding dynamically?).




>Next you find programmers making all their fields "Contended",
>because they read on some blog that it makes things
faster.
>Then instead of your object using only 32 bytes, it gets
>bloated to 512 bytes.


Programmers already have access to much more dangerous features

such as System.exit(...), while loops, new (!!!), etc.
If people have trouble understanding that it causes memory padding,
maybe it could be renamed into @CacheLinePadded.



-Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/5e5be465/attachment.html>

From nathan.reynolds at oracle.com  Thu Nov 29 18:19:52 2012
From: nathan.reynolds at oracle.com (Nathan Reynolds)
Date: Thu, 29 Nov 2012 16:19:52 -0700
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <1354228959.59823.YahooMailNeo@web132105.mail.ird.yahoo.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<CANPzfU90Qv=Uifx3AcZHR46FGozF7ttT4yTUDNiYoum+iTLLSQ@mail.gmail.com>
	<50B50007.9030804@cs.oswego.edu>
	<CANPzfU_UAeMDNzhXJTr8NevoLg8EZOWDx7GdV4i3+DAx+GTH_w@mail.gmail.com>
	<50B5059B.3070400@cs.oswego.edu>
	<CANPzfU-QQTSaN+GjfG0mtyP_sfbiNiqVSydDj87pLbeOnNFk3A@mail.gmail.com>
	<50B5DA40.6060203@oracle.com>
	<CANPzfU--3ip-jcCfDET6pYSj4v7rGmdp7D=H6H4tmv9Ew9f3nQ@mail.gmail.com>
	<50B5DF23.50202@oracle.com> <50B63F0F.8090203@cytetech.com>
	<50B72E56.9060709@oracle.com>
	<CAEJX8or_LYikUy_9xf_AcWo_OS3y9-17XxqDaeS-_PVk6G+ZyQ@mail.gmail.com>
	<50B74044.8040108@javaspecialists.eu>
	<1354228959.59823.YahooMailNeo@web132105.mail.ird.yahoo.com>
Message-ID: <50B7ED98.3030509@oracle.com>

 > maybe some day could we have the JVM figure out and create padding 
dynamically

Intel and Oracle (and probably a lot of others) have kicked this idea 
around.  It is a much longer term project.  @Contended is the faster 
project.

For starters, it is sometimes very difficult to detect false sharing.  
The processor counters don't clearly say "There is false sharing at this 
address!"  In a specific case, they said the reorder buffer is full and 
is causing stalls due to a return instruction.  That took us a while to 
figure out it was false sharing.

Nathan Reynolds 
<http://psr.us.oracle.com/wiki/index.php/User:Nathan_Reynolds> | 
Architect | 602.333.9091
Oracle PSR Engineering <http://psr.us.oracle.com/> | Server Technology
On 11/29/2012 3:42 PM, Jeff Hain wrote:
> >IMHO, sun.misc.Contended is the right place for this one,
> >as it will hopefully discourage people from using it,
> >unless they really know what they are doing.
>
>
> It will also discourage people from using it, even though
> they would know what they are doing, if they want to make
> efficient AND portable libraries.
> To remain portable I'll stick to hand-made padding until
> @Contented or equivalent makes it to non-JVMese Java.
> That said, I understand that it might not be a good idea
> to promote such a low-level feature into the language
> (maybe some day could we have the JVM figure out and create
> padding dynamically?).
>
>
>
> >Next you find programmers making all their fields "Contended",
> >because they read on some blog that it makes things faster.
> >Then instead of your object using only 32 bytes, it gets
> >bloated to 512 bytes.
>
>
> Programmers already have access to much more dangerous features
> such as System.exit(...), while loops, new (!!!), etc.
> If people have trouble understanding that it causes memory padding,
> maybe it could be renamed into @CacheLinePadded.
>
>
>
> -Jeff
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/145f07c9/attachment.html>

From oleksandr.otenko at oracle.com  Thu Nov 29 18:42:18 2012
From: oleksandr.otenko at oracle.com (oleksandr otenko)
Date: Thu, 29 Nov 2012 23:42:18 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B4FB0D.8020807@cs.oswego.edu>
References: <50B4FB0D.8020807@cs.oswego.edu>
Message-ID: <50B7F2DA.7080105@oracle.com>

Does it need to have Retention policy = RUNTIME?

Alex

On 27/11/2012 17:40, Doug Lea wrote:
>
> Aleksey has been making progress on a hotspot implementation of
> the @Contended annotation. While this progresses, we'd also
> like continued feedback about the java-level information, guidance,
> examples, etc.
>
> As a compromise that helps avoid controversy about its status
> and specs, the @Contended annotation itself will probably be placed
> in sun.misc, not java.util.concurrent.*. A staging version of
> Contended.java is in our CVS though, with javadoc at:
>
> http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html 
>
>
> Any comments and suggestions will be welcome.
>
> -Doug
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/a15cb368/attachment-0001.html>

From vitalyd at gmail.com  Thu Nov 29 18:58:27 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Thu, 29 Nov 2012 18:58:27 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B7F2DA.7080105@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu>
	<50B7F2DA.7080105@oracle.com>
Message-ID: <CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>

Yes, the JVM looks for it at class layout time (i.e. runtime :)).

Sent from my phone
On Nov 29, 2012 6:53 PM, "oleksandr otenko" <oleksandr.otenko at oracle.com>
wrote:

>  Does it need to have Retention policy = RUNTIME?
>
> Alex
>
> On 27/11/2012 17:40, Doug Lea wrote:
>
>
> Aleksey has been making progress on a hotspot implementation of
> the @Contended annotation. While this progresses, we'd also
> like continued feedback about the java-level information, guidance,
> examples, etc.
>
> As a compromise that helps avoid controversy about its status
> and specs, the @Contended annotation itself will probably be placed
> in sun.misc, not java.util.concurrent.*. A staging version of
> Contended.java is in our CVS though, with javadoc at:
>
> http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html
>
> Any comments and suggestions will be welcome.
>
> -Doug
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/024ee5bc/attachment.html>

From vitalyd at gmail.com  Thu Nov 29 19:00:16 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Thu, 29 Nov 2012 19:00:16 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
Message-ID: <CAHjP37H1FyWzApZ0K-ynNybaHAenDk2nK5GxYREDzEdxLm50Pg@mail.gmail.com>

Or rather, it looks for it at class load time and marks the field(s) (or
klass) that are contended - that marking is then used by class layout.

Sent from my phone
On Nov 29, 2012 6:58 PM, "Vitaly Davidovich" <vitalyd at gmail.com> wrote:

> Yes, the JVM looks for it at class layout time (i.e. runtime :)).
>
> Sent from my phone
> On Nov 29, 2012 6:53 PM, "oleksandr otenko" <oleksandr.otenko at oracle.com>
> wrote:
>
>>  Does it need to have Retention policy = RUNTIME?
>>
>> Alex
>>
>> On 27/11/2012 17:40, Doug Lea wrote:
>>
>>
>> Aleksey has been making progress on a hotspot implementation of
>> the @Contended annotation. While this progresses, we'd also
>> like continued feedback about the java-level information, guidance,
>> examples, etc.
>>
>> As a compromise that helps avoid controversy about its status
>> and specs, the @Contended annotation itself will probably be placed
>> in sun.misc, not java.util.concurrent.*. A staging version of
>> Contended.java is in our CVS though, with javadoc at:
>>
>> http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html
>>
>> Any comments and suggestions will be welcome.
>>
>> -Doug
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>>
>> _______________________________________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.oswego.edu
>> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/63ace822/attachment.html>

From oleksandr.otenko at oracle.com  Thu Nov 29 19:01:25 2012
From: oleksandr.otenko at oracle.com (oleksandr otenko)
Date: Fri, 30 Nov 2012 00:01:25 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
Message-ID: <50B7F755.3070608@oracle.com>

I don't understand why JVM can't see the RuntimeInvisibleAnnotation 
attribute at class load time. The layout hint is implemented in native, 
and the Java land cannot do anything about that annotation.

Alex


On 29/11/2012 23:58, Vitaly Davidovich wrote:
>
> Yes, the JVM looks for it at class layout time (i.e. runtime :)).
>
> Sent from my phone
>
> On Nov 29, 2012 6:53 PM, "oleksandr otenko" 
> <oleksandr.otenko at oracle.com <mailto:oleksandr.otenko at oracle.com>> wrote:
>
>     Does it need to have Retention policy = RUNTIME?
>
>     Alex
>
>     On 27/11/2012 17:40, Doug Lea wrote:
>>
>>     Aleksey has been making progress on a hotspot implementation of
>>     the @Contended annotation. While this progresses, we'd also
>>     like continued feedback about the java-level information, guidance,
>>     examples, etc.
>>
>>     As a compromise that helps avoid controversy about its status
>>     and specs, the @Contended annotation itself will probably be placed
>>     in sun.misc, not java.util.concurrent.*. A staging version of
>>     Contended.java is in our CVS though, with javadoc at:
>>
>>     http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html
>>
>>
>>     Any comments and suggestions will be welcome.
>>
>>     -Doug
>>
>>     _______________________________________________
>>     Concurrency-interest mailing list
>>     Concurrency-interest at cs.oswego.edu
>>     <mailto:Concurrency-interest at cs.oswego.edu>
>>     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>     _______________________________________________
>     Concurrency-interest mailing list
>     Concurrency-interest at cs.oswego.edu
>     <mailto:Concurrency-interest at cs.oswego.edu>
>     http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/3bef73f8/attachment.html>

From dl at cs.oswego.edu  Thu Nov 29 19:05:51 2012
From: dl at cs.oswego.edu (Doug Lea)
Date: Thu, 29 Nov 2012 19:05:51 -0500
Subject: [concurrency-interest] PackedObjects
Message-ID: <50B7F85F.4010406@cs.oswego.edu>


As a side note wrt other discussions, it is comforting to
see some progress in avoiding the other main source of Unsafe
hackery -- emulating structs/tuples etc. See the new
blog post on the IBM PackedObjects proposal at
   http://duimovich.blogspot.ca/
that specifically discusses this use case.
(See also the (independent) Oracle JEP
http://openjdk.java.net/jeps/169)

-Doug

From vitalyd at gmail.com  Thu Nov 29 19:06:55 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Thu, 29 Nov 2012 19:06:55 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37Gr3CfdYnCMTg4=f2Re-3mcQb8k+tD6BjjAn_i0HSsSig@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
	<50B7F755.3070608@oracle.com>
	<CAHjP37Gr3CfdYnCMTg4=f2Re-3mcQb8k+tD6BjjAn_i0HSsSig@mail.gmail.com>
Message-ID: <CAHjP37HBL1JPQ-=_Cw9sOE2v6kbYui3jZxyaxCHsQopMwyXD2A@mail.gmail.com>

Oh I see - you're saying CLASS retention is sufficient.  I guess that
depends on whether java level tooling (or generally, some java code period)
should be able to grab this info or not.

Sent from my phone
On Nov 29, 2012 7:01 PM, "oleksandr otenko" <oleksandr.otenko at oracle.com>
wrote:
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/24008664/attachment.html>

From nathan.reynolds at oracle.com  Thu Nov 29 19:21:32 2012
From: nathan.reynolds at oracle.com (Nathan Reynolds)
Date: Thu, 29 Nov 2012 17:21:32 -0700
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37H1FyWzApZ0K-ynNybaHAenDk2nK5GxYREDzEdxLm50Pg@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
	<CAHjP37H1FyWzApZ0K-ynNybaHAenDk2nK5GxYREDzEdxLm50Pg@mail.gmail.com>
Message-ID: <50B7FC0C.3000801@oracle.com>

Wouldn't Retention Policy = CLASS be sufficient?  Class = "Annotations 
are to be recorded in the class file by the compiler but need not be 
retained by the VM at run time."

http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/RetentionPolicy.html

Nathan Reynolds 
<http://psr.us.oracle.com/wiki/index.php/User:Nathan_Reynolds> | 
Architect | 602.333.9091
Oracle PSR Engineering <http://psr.us.oracle.com/> | Server Technology
On 11/29/2012 5:00 PM, Vitaly Davidovich wrote:
>
> Or rather, it looks for it at class load time and marks the field(s) 
> (or klass) that are contended - that marking is then used by class layout.
>
> Sent from my phone
>
> On Nov 29, 2012 6:58 PM, "Vitaly Davidovich" <vitalyd at gmail.com 
> <mailto:vitalyd at gmail.com>> wrote:
>
>     Yes, the JVM looks for it at class layout time (i.e. runtime :)).
>
>     Sent from my phone
>
>     On Nov 29, 2012 6:53 PM, "oleksandr otenko"
>     <oleksandr.otenko at oracle.com <mailto:oleksandr.otenko at oracle.com>>
>     wrote:
>
>         Does it need to have Retention policy = RUNTIME?
>
>         Alex
>
>         On 27/11/2012 17:40, Doug Lea wrote:
>>
>>         Aleksey has been making progress on a hotspot implementation of
>>         the @Contended annotation. While this progresses, we'd also
>>         like continued feedback about the java-level information,
>>         guidance,
>>         examples, etc.
>>
>>         As a compromise that helps avoid controversy about its status
>>         and specs, the @Contended annotation itself will probably be
>>         placed
>>         in sun.misc, not java.util.concurrent.*. A staging version of
>>         Contended.java is in our CVS though, with javadoc at:
>>
>>         http://gee.cs.oswego.edu/dl/jsr166/src/dl/sun/misc/sun/misc/Contended.html
>>
>>
>>         Any comments and suggestions will be welcome.
>>
>>         -Doug
>>
>>         _______________________________________________
>>         Concurrency-interest mailing list
>>         Concurrency-interest at cs.oswego.edu
>>         <mailto:Concurrency-interest at cs.oswego.edu>
>>         http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>         _______________________________________________
>         Concurrency-interest mailing list
>         Concurrency-interest at cs.oswego.edu
>         <mailto:Concurrency-interest at cs.oswego.edu>
>         http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/e4cd475c/attachment-0001.html>

From forax at univ-mlv.fr  Thu Nov 29 19:31:00 2012
From: forax at univ-mlv.fr (Remi Forax)
Date: Fri, 30 Nov 2012 01:31:00 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37HBL1JPQ-=_Cw9sOE2v6kbYui3jZxyaxCHsQopMwyXD2A@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
	<50B7F755.3070608@oracle.com>
	<CAHjP37Gr3CfdYnCMTg4=f2Re-3mcQb8k+tD6BjjAn_i0HSsSig@mail.gmail.com>
	<CAHjP37HBL1JPQ-=_Cw9sOE2v6kbYui3jZxyaxCHsQopMwyXD2A@mail.gmail.com>
Message-ID: <50B7FE44.20704@univ-mlv.fr>

On 11/30/2012 01:06 AM, Vitaly Davidovich wrote:
>
> Oh I see - you're saying CLASS retention is sufficient.  I guess that 
> depends on whether java level tooling (or generally, some java code 
> period) should be able to grab this info or not.
>
> Sent from my phone
>

if the rentention policy is CLASS, I believe that there is no way using 
the reflection API to get a runtime failure if the annotation class is 
not present in the classpath.

R?mi



From vitalyd at gmail.com  Thu Nov 29 19:38:34 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Thu, 29 Nov 2012 19:38:34 -0500
Subject: [concurrency-interest] PackedObjects
In-Reply-To: <50B7F85F.4010406@cs.oswego.edu>
References: <50B7F85F.4010406@cs.oswego.edu>
Message-ID: <CAHjP37EDNzJ4+V0f5Ef3RU9n6MQunA4T=qmHqVSN4oKu38Z0KQ@mail.gmail.com>

Yes, this would be nice to see in hotspot.  Still, a full blown value type
with guaranteed stack allocation is sorely missing.  I routinely see code
which would benefit from this (e.g. Hashcode/EqualsBuilder style classes
that are utility wrappers around one or just a few primitives).  Relying on
EA (and not having a diagnostic/product flag that lets us see if something
got EA'd or not doesn't help) is too unreliable.

Sent from my phone
On Nov 29, 2012 7:22 PM, "Doug Lea" <dl at cs.oswego.edu> wrote:

>
> As a side note wrt other discussions, it is comforting to
> see some progress in avoiding the other main source of Unsafe
> hackery -- emulating structs/tuples etc. See the new
> blog post on the IBM PackedObjects proposal at
>   http://duimovich.blogspot.ca/
> that specifically discusses this use case.
> (See also the (independent) Oracle JEP
> http://openjdk.java.net/jeps/**169 <http://openjdk.java.net/jeps/169>)
>
> -Doug
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/ee6c22c8/attachment.html>

From vitalyd at gmail.com  Thu Nov 29 19:43:58 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Thu, 29 Nov 2012 19:43:58 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B7FE44.20704@univ-mlv.fr>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
	<50B7F755.3070608@oracle.com>
	<CAHjP37Gr3CfdYnCMTg4=f2Re-3mcQb8k+tD6BjjAn_i0HSsSig@mail.gmail.com>
	<CAHjP37HBL1JPQ-=_Cw9sOE2v6kbYui3jZxyaxCHsQopMwyXD2A@mail.gmail.com>
	<50B7FE44.20704@univ-mlv.fr>
Message-ID: <CAHjP37HzdCehu_TDR7MM6O3GJ9M9QfiWuaS8FQuWBXEvqoATWw@mail.gmail.com>

What use case is that? If we're saying that this annotation is purely a VM
hint, then I don't think it needs to surface at all in java code.

How much overhead is there for having these be runtime retained? I don't
imagine many classes will have themselves or fields annotated with it, so
it may not be much of a concern.  However, making it runtime from the get
go puts us into a compatibility corner.

Sent from my phone
On Nov 29, 2012 7:35 PM, "Remi Forax" <forax at univ-mlv.fr> wrote:

> On 11/30/2012 01:06 AM, Vitaly Davidovich wrote:
>
>>
>> Oh I see - you're saying CLASS retention is sufficient.  I guess that
>> depends on whether java level tooling (or generally, some java code period)
>> should be able to grab this info or not.
>>
>> Sent from my phone
>>
>>
> if the rentention policy is CLASS, I believe that there is no way using
> the reflection API to get a runtime failure if the annotation class is not
> present in the classpath.
>
> R?mi
>
>
> ______________________________**_________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121129/81694ead/attachment.html>

From radhakrishnan.mohan at gmail.com  Fri Nov 30 03:25:23 2012
From: radhakrishnan.mohan at gmail.com (Mohan Radhakrishnan)
Date: Fri, 30 Nov 2012 13:55:23 +0530
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37HzdCehu_TDR7MM6O3GJ9M9QfiWuaS8FQuWBXEvqoATWw@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<CAHjP37EY=RN+R3xtHQLJw0O5m3S1QdG7tg+TJw-YstpT0GToNQ@mail.gmail.com>
	<50B7F755.3070608@oracle.com>
	<CAHjP37Gr3CfdYnCMTg4=f2Re-3mcQb8k+tD6BjjAn_i0HSsSig@mail.gmail.com>
	<CAHjP37HBL1JPQ-=_Cw9sOE2v6kbYui3jZxyaxCHsQopMwyXD2A@mail.gmail.com>
	<50B7FE44.20704@univ-mlv.fr>
	<CAHjP37HzdCehu_TDR7MM6O3GJ9M9QfiWuaS8FQuWBXEvqoATWw@mail.gmail.com>
Message-ID: <CAOoXFP_CiScX8grjeZZ3BN-r2-FgYUsWTd6id33ZL4aO-Kh3DA@mail.gmail.com>

Isn't this specific to the processor ? The JVM will know how to calculate
cache line sizes dynamically and then pad ?

Thanks,
Mohan

On Fri, Nov 30, 2012 at 6:13 AM, Vitaly Davidovich <vitalyd at gmail.com>wrote:

> What use case is that? If we're saying that this annotation is purely a VM
> hint, then I don't think it needs to surface at all in java code.
>
> How much overhead is there for having these be runtime retained? I don't
> imagine many classes will have themselves or fields annotated with it, so
> it may not be much of a concern.  However, making it runtime from the get
> go puts us into a compatibility corner.
>
> Sent from my phone
> On Nov 29, 2012 7:35 PM, "Remi Forax" <forax at univ-mlv.fr> wrote:
>
>> On 11/30/2012 01:06 AM, Vitaly Davidovich wrote:
>>
>>>
>>> Oh I see - you're saying CLASS retention is sufficient.  I guess that
>>> depends on whether java level tooling (or generally, some java code period)
>>> should be able to grab this info or not.
>>>
>>> Sent from my phone
>>>
>>>
>> if the rentention policy is CLASS, I believe that there is no way using
>> the reflection API to get a runtime failure if the annotation class is not
>> present in the classpath.
>>
>> R?mi
>>
>>
>> ______________________________**_________________
>> Concurrency-interest mailing list
>> Concurrency-interest at cs.**oswego.edu <Concurrency-interest at cs.oswego.edu>
>> http://cs.oswego.edu/mailman/**listinfo/concurrency-interest<http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/e37832b7/attachment.html>

From aleksey.shipilev at oracle.com  Fri Nov 30 05:07:14 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 30 Nov 2012 14:07:14 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B7F2DA.7080105@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
Message-ID: <50B88552.9040502@oracle.com>

On 11/30/2012 03:42 AM, oleksandr otenko wrote:
> Does it need to have Retention policy = RUNTIME?

That's an interesting point, and that is probably solves the compability
problems, as Remi said, because you will not be able to kick off
NoSuchClassException while traversing annotations.

The downside is that (layout) monitoring tools might want to detect the
annotation at runtime, if that is not a concern, I'm OK with making it
CLASS.

-Aleksey.


From oleksandr.otenko at oracle.com  Fri Nov 30 08:18:59 2012
From: oleksandr.otenko at oracle.com (oleksandr otenko)
Date: Fri, 30 Nov 2012 13:18:59 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B88552.9040502@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com>
Message-ID: <50B8B243.1020505@oracle.com>

I think the layout monitoring tools will be none the wiser even if they 
know which fields were annotated. After all, it is only a hint, and not 
a directive on how exactly to lay out the fields.

In other words, I see no reason to expose this annotation to runtime 
tools. If JVM wants to expose something useful about the actual object 
layout, it probably won't be annotations.

Alex

On 30/11/2012 10:07, Aleksey Shipilev wrote:
> On 11/30/2012 03:42 AM, oleksandr otenko wrote:
>> Does it need to have Retention policy = RUNTIME?
> That's an interesting point, and that is probably solves the compability
> problems, as Remi said, because you will not be able to kick off
> NoSuchClassException while traversing annotations.
>
> The downside is that (layout) monitoring tools might want to detect the
> annotation at runtime, if that is not a concern, I'm OK with making it
> CLASS.
>
> -Aleksey.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/da4b1301/attachment.html>

From aleksey.shipilev at oracle.com  Fri Nov 30 08:22:14 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 30 Nov 2012 17:22:14 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B8B243.1020505@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
Message-ID: <50B8B306.3060601@oracle.com>

Point taken. I think it should be CLASS then.

-Aleksey.

On 11/30/2012 05:18 PM, oleksandr otenko wrote:
> I think the layout monitoring tools will be none the wiser even if they
> know which fields were annotated. After all, it is only a hint, and not
> a directive on how exactly to lay out the fields.
> 
> In other words, I see no reason to expose this annotation to runtime
> tools. If JVM wants to expose something useful about the actual object
> layout, it probably won't be annotations.
> 
> Alex
> 
> On 30/11/2012 10:07, Aleksey Shipilev wrote:
>> On 11/30/2012 03:42 AM, oleksandr otenko wrote:
>>> Does it need to have Retention policy = RUNTIME?
>> That's an interesting point, and that is probably solves the compability
>> problems, as Remi said, because you will not be able to kick off
>> NoSuchClassException while traversing annotations.
>>
>> The downside is that (layout) monitoring tools might want to detect the
>> annotation at runtime, if that is not a concern, I'm OK with making it
>> CLASS.
>>
>> -Aleksey.
>>


From vitalyd at gmail.com  Fri Nov 30 08:36:31 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Fri, 30 Nov 2012 08:36:31 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B8B243.1020505@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
Message-ID: <CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>

What's the plan for making this info available in heap dumps (taken using
jmap)? I'd imagine tools like Eclipse MAT may want to indicate that a given
instance of a class has padding applied.  Otherwise, the object size
reported won't match expectation (without knowing that padding was applied).

Sent from my phone
On Nov 30, 2012 8:22 AM, "oleksandr otenko" <oleksandr.otenko at oracle.com>
wrote:

>  I think the layout monitoring tools will be none the wiser even if they
> know which fields were annotated. After all, it is only a hint, and not a
> directive on how exactly to lay out the fields.
>
> In other words, I see no reason to expose this annotation to runtime
> tools. If JVM wants to expose something useful about the actual object
> layout, it probably won't be annotations.
>
> Alex
>
> On 30/11/2012 10:07, Aleksey Shipilev wrote:
>
> On 11/30/2012 03:42 AM, oleksandr otenko wrote:
>
>  Does it need to have Retention policy = RUNTIME?
>
>
> That's an interesting point, and that is probably solves the compability
> problems, as Remi said, because you will not be able to kick off
> NoSuchClassException while traversing annotations.
>
> The downside is that (layout) monitoring tools might want to detect the
> annotation at runtime, if that is not a concern, I'm OK with making it
> CLASS.
>
> -Aleksey.
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/d64dcb09/attachment.html>

From aleksey.shipilev at oracle.com  Fri Nov 30 08:41:08 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 30 Nov 2012 17:41:08 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
Message-ID: <50B8B774.5040204@oracle.com>

On 11/30/2012 05:36 PM, Vitaly Davidovich wrote:
> What's the plan for making this info available in heap dumps (taken
> using jmap)? I'd imagine tools like Eclipse MAT may want to indicate
> that a given instance of a class has padding applied.  Otherwise, the
> object size reported won't match expectation (without knowing that
> padding was applied).

Can't speak for other implementations, but HotSpot would report the
proper sizes/offset via Instrumentation.objectSize and
Unsafe.*fieldOffset. As long as tooling is not doing dumb
"sum(fieldTypeCount*fieldSizeAsMandatedByJLS)", it should pick up the
proper sizes.

-Aleksey.



From vitalyd at gmail.com  Fri Nov 30 08:48:55 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Fri, 30 Nov 2012 08:48:55 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B8B774.5040204@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8B774.5040204@oracle.com>
Message-ID: <CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>

Right,  but I meant that the tool will report proper size but developer
looking at that number may not immediately understand why the reported size
is larger than expected if padding is applied.  If the tool can know that
@Contended is present, it can indicate that to the developer.  I'm not
familiar with the heap dump file format so don't know if there will be
enough info for the tool there.  I don't think instrumentation applies here
as the tool is interpreting a dump file and not profiling a live
application?

Sent from my phone
On Nov 30, 2012 8:41 AM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com>
wrote:

> On 11/30/2012 05:36 PM, Vitaly Davidovich wrote:
> > What's the plan for making this info available in heap dumps (taken
> > using jmap)? I'd imagine tools like Eclipse MAT may want to indicate
> > that a given instance of a class has padding applied.  Otherwise, the
> > object size reported won't match expectation (without knowing that
> > padding was applied).
>
> Can't speak for other implementations, but HotSpot would report the
> proper sizes/offset via Instrumentation.objectSize and
> Unsafe.*fieldOffset. As long as tooling is not doing dumb
> "sum(fieldTypeCount*fieldSizeAsMandatedByJLS)", it should pick up the
> proper sizes.
>
> -Aleksey.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/197969ae/attachment.html>

From Alan.Bateman at oracle.com  Fri Nov 30 09:08:43 2012
From: Alan.Bateman at oracle.com (Alan Bateman)
Date: Fri, 30 Nov 2012 14:08:43 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
Message-ID: <50B8BDEB.4060203@oracle.com>

On 30/11/2012 13:36, Vitaly Davidovich wrote:
>
> What's the plan for making this info available in heap dumps (taken 
> using jmap)? I'd imagine tools like Eclipse MAT may want to indicate 
> that a given instance of a class has padding applied.  Otherwise, the 
> object size reported won't match expectation (without knowing that 
> padding was applied).
>
jmap triggers HotSpot to generate a heap dump in HPROF format, a format 
that is VM agnostic. The header allows for the word size but that's 
about it. This means that tools don't have the details on the actual 
layout, don't know about padding etc. from looking at the heap dump. It 
is an area that does need to be re-visited (for many reasons).

-Alan

From aleksey.shipilev at oracle.com  Fri Nov 30 09:17:15 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 30 Nov 2012 18:17:15 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8B774.5040204@oracle.com>
	<CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>
Message-ID: <50B8BFEB.9000606@oracle.com>

Oh yes, but the same argument applies for "just" the gaps in field
layout due to field alignment.

This is a very simple proof-of-concept experiment, take the regression
test from the @Contended patch:

    // int1 is padded
    public static class Test2 {
        @Contended               private int int1;
                                 private int int2;
    }

...and run it with
 https://github.com/shipilev/java-field-layout

...it will show you:

$
~/trunks/jdk8/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/bin/java
-javaagent:target/field-layout.jar -cp
target/field-layout.jar:/home/shade/trunks/jdk8/hotspot/test/runtime/8003985/
net.openjdk.tools.fieldlayout.MainAnalyzer Test8003985\$Test2

Test8003985.Test2
   (header 12 bytes)
  12   4             int Test2.int2
   (gap 128 bytes)
 144   4             int Test2.int1
Instrumentation reports 280 bytes per instance

...the correct layout via Unsafe, and the exact object size, aligned to
word size. So that info is available in VM. jhat/MAT, however, will show
this object to retain only 24 bytes. AFAIK, this is just the glitch in
Hotspot's HPROF dump code, which we can fix.

-Aleksey.

On 11/30/2012 05:48 PM, Vitaly Davidovich wrote:
> Right,  but I meant that the tool will report proper size but developer
> looking at that number may not immediately understand why the reported
> size is larger than expected if padding is applied.  If the tool can
> know that @Contended is present, it can indicate that to the developer. 
> I'm not familiar with the heap dump file format so don't know if there
> will be enough info for the tool there.  I don't think instrumentation
> applies here as the tool is interpreting a dump file and not profiling a
> live application?
> 
> Sent from my phone
> 
> On Nov 30, 2012 8:41 AM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com
> <mailto:aleksey.shipilev at oracle.com>> wrote:
> 
>     On 11/30/2012 05:36 PM, Vitaly Davidovich wrote:
>     > What's the plan for making this info available in heap dumps (taken
>     > using jmap)? I'd imagine tools like Eclipse MAT may want to indicate
>     > that a given instance of a class has padding applied.  Otherwise, the
>     > object size reported won't match expectation (without knowing that
>     > padding was applied).
> 
>     Can't speak for other implementations, but HotSpot would report the
>     proper sizes/offset via Instrumentation.objectSize and
>     Unsafe.*fieldOffset. As long as tooling is not doing dumb
>     "sum(fieldTypeCount*fieldSizeAsMandatedByJLS)", it should pick up the
>     proper sizes.
> 
>     -Aleksey.
> 
> 


From kirk at kodewerk.com  Fri Nov 30 09:20:01 2012
From: kirk at kodewerk.com (Kirk Pepperdine)
Date: Fri, 30 Nov 2012 15:20:01 +0100
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B8BDEB.4060203@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8BDEB.4060203@oracle.com>
Message-ID: <21430374-DFE6-4208-8BFF-ED7955BFA1F9@kodewerk.com>

I might add that the object ID information in OpenJDK in the binary format corresponds to address in heap and there is sizing information in there. If the padding is a regular field, it should show up as it would be the GC threads that are asked to perform the dump.. so the dump should contain what they would naturally see.

-- Kirk

On 2012-11-30, at 3:08 PM, Alan Bateman <Alan.Bateman at oracle.com> wrote:

> On 30/11/2012 13:36, Vitaly Davidovich wrote:
>> 
>> What's the plan for making this info available in heap dumps (taken using jmap)? I'd imagine tools like Eclipse MAT may want to indicate that a given instance of a class has padding applied.  Otherwise, the object size reported won't match expectation (without knowing that padding was applied).
>> 
> jmap triggers HotSpot to generate a heap dump in HPROF format, a format that is VM agnostic. The header allows for the word size but that's about it. This means that tools don't have the details on the actual layout, don't know about padding etc. from looking at the heap dump. It is an area that does need to be re-visited (for many reasons).
> 
> -Alan
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest



From Alan.Bateman at oracle.com  Fri Nov 30 09:26:03 2012
From: Alan.Bateman at oracle.com (Alan Bateman)
Date: Fri, 30 Nov 2012 14:26:03 +0000
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <21430374-DFE6-4208-8BFF-ED7955BFA1F9@kodewerk.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8BDEB.4060203@oracle.com>
	<21430374-DFE6-4208-8BFF-ED7955BFA1F9@kodewerk.com>
Message-ID: <50B8C1FB.6000507@oracle.com>

On 30/11/2012 14:20, Kirk Pepperdine wrote:
> I might add that the object ID information in OpenJDK in the binary format corresponds to address in heap and there is sizing information in there. If the padding is a regular field, it should show up as it would be the GC threads that are asked to perform the dump.. so the dump should contain what they would naturally see.
>
> -- Kirk
>
It depends. For the built-in heap dumper then you are right as the ID is 
the object address and we've seen tools make use of that. For heap dumps 
generated by the hprof agent then it's just a generated number and so 
isn't too useful.

-Alan.

From vitalyd at gmail.com  Fri Nov 30 09:32:11 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Fri, 30 Nov 2012 09:32:11 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B8BFEB.9000606@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8B774.5040204@oracle.com>
	<CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>
	<50B8BFEB.9000606@oracle.com>
Message-ID: <CAHjP37EtPFhTGS9CFaSJWNn-PShU1-sdq3v=t+08ny-fOXdwsQ@mail.gmail.com>

Why is header reported as 12 bytes? Should that not be two words (16 bytes
on x64)?

Yeah, the state I'd like us to be in is for heap analysis tools working
offline (I.e. against an hprof file) to have enough info to be able to
indicate to the user that the object size has padding applied.  The
existing 8 byte alignment is well understood/realized so people doing size
estimates in their head take it into account.  But 128 byte padding per
field may cause some confusion :).

Sent from my phone
On Nov 30, 2012 9:17 AM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com>
wrote:

> Oh yes, but the same argument applies for "just" the gaps in field
> layout due to field alignment.
>
> This is a very simple proof-of-concept experiment, take the regression
> test from the @Contended patch:
>
>     // int1 is padded
>     public static class Test2 {
>         @Contended               private int int1;
>                                  private int int2;
>     }
>
> ...and run it with
>  https://github.com/shipilev/java-field-layout
>
> ...it will show you:
>
> $
>
> ~/trunks/jdk8/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/bin/java
> -javaagent:target/field-layout.jar -cp
>
> target/field-layout.jar:/home/shade/trunks/jdk8/hotspot/test/runtime/8003985/
> net.openjdk.tools.fieldlayout.MainAnalyzer Test8003985\$Test2
>
> Test8003985.Test2
>    (header 12 bytes)
>   12   4             int Test2.int2
>    (gap 128 bytes)
>  144   4             int Test2.int1
> Instrumentation reports 280 bytes per instance
>
> ...the correct layout via Unsafe, and the exact object size, aligned to
> word size. So that info is available in VM. jhat/MAT, however, will show
> this object to retain only 24 bytes. AFAIK, this is just the glitch in
> Hotspot's HPROF dump code, which we can fix.
>
> -Aleksey.
>
> On 11/30/2012 05:48 PM, Vitaly Davidovich wrote:
> > Right,  but I meant that the tool will report proper size but developer
> > looking at that number may not immediately understand why the reported
> > size is larger than expected if padding is applied.  If the tool can
> > know that @Contended is present, it can indicate that to the developer.
> > I'm not familiar with the heap dump file format so don't know if there
> > will be enough info for the tool there.  I don't think instrumentation
> > applies here as the tool is interpreting a dump file and not profiling a
> > live application?
> >
> > Sent from my phone
> >
> > On Nov 30, 2012 8:41 AM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com
> > <mailto:aleksey.shipilev at oracle.com>> wrote:
> >
> >     On 11/30/2012 05:36 PM, Vitaly Davidovich wrote:
> >     > What's the plan for making this info available in heap dumps (taken
> >     > using jmap)? I'd imagine tools like Eclipse MAT may want to
> indicate
> >     > that a given instance of a class has padding applied.  Otherwise,
> the
> >     > object size reported won't match expectation (without knowing that
> >     > padding was applied).
> >
> >     Can't speak for other implementations, but HotSpot would report the
> >     proper sizes/offset via Instrumentation.objectSize and
> >     Unsafe.*fieldOffset. As long as tooling is not doing dumb
> >     "sum(fieldTypeCount*fieldSizeAsMandatedByJLS)", it should pick up the
> >     proper sizes.
> >
> >     -Aleksey.
> >
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/ff108fbf/attachment.html>

From aleksey.shipilev at oracle.com  Fri Nov 30 09:44:15 2012
From: aleksey.shipilev at oracle.com (Aleksey Shipilev)
Date: Fri, 30 Nov 2012 18:44:15 +0400
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37EtPFhTGS9CFaSJWNn-PShU1-sdq3v=t+08ny-fOXdwsQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8B774.5040204@oracle.com>
	<CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>
	<50B8BFEB.9000606@oracle.com>
	<CAHjP37EtPFhTGS9CFaSJWNn-PShU1-sdq3v=t+08ny-fOXdwsQ@mail.gmail.com>
Message-ID: <50B8C63F.9090809@oracle.com>

On 11/30/2012 06:32 PM, Vitaly Davidovich wrote:
> Why is header reported as 12 bytes? Should that not be two words (16
> bytes on x64)?

This starts to get off-topic.

This is the estimate of the first field's offset, might be not the
header itself. CompressedOops allow me to do this, see:

$ java -XX:-UseCompressedOops
Test8003985.Test2
   (header 16 bytes)
  16   4             int Test2.int2
   (gap 128 bytes)
 148   4             int Test2.int1
Instrumentation reports 280 bytes per instance

$ java -XX:+UseCompressedOops
Test8003985.Test2
   (header 12 bytes)
  12   4             int Test2.int2
   (gap 128 bytes)
 144   4             int Test2.int1
Instrumentation reports 280 bytes per instance

The impact of that 4 bytes is eaten up by alignment to 8 anyway.

-Aleksey.


From vitalyd at gmail.com  Fri Nov 30 09:50:59 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Fri, 30 Nov 2012 09:50:59 -0500
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <50B8C63F.9090809@oracle.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8B774.5040204@oracle.com>
	<CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>
	<50B8BFEB.9000606@oracle.com>
	<CAHjP37EtPFhTGS9CFaSJWNn-PShU1-sdq3v=t+08ny-fOXdwsQ@mail.gmail.com>
	<50B8C63F.9090809@oracle.com>
Message-ID: <CAHjP37HG1iRzy-0SA3Ro2dB20kUmQ-Vdcb6oiXAYYg6UDvEQbA@mail.gmail.com>

Hmm, that doesn't seem right to me.  Compressed oops should only change the
pointer size of the fields themselves, it shouldn't cause header size to be
reported differently.  So pointers after header become 4 bytes instead of
8, but header should be consistently 16.  I understand that this is an
estimate via unsafe, but seems off.

Thanks

Sent from my phone
On Nov 30, 2012 9:44 AM, "Aleksey Shipilev" <aleksey.shipilev at oracle.com>
wrote:

> On 11/30/2012 06:32 PM, Vitaly Davidovich wrote:
> > Why is header reported as 12 bytes? Should that not be two words (16
> > bytes on x64)?
>
> This starts to get off-topic.
>
> This is the estimate of the first field's offset, might be not the
> header itself. CompressedOops allow me to do this, see:
>
> $ java -XX:-UseCompressedOops
> Test8003985.Test2
>    (header 16 bytes)
>   16   4             int Test2.int2
>    (gap 128 bytes)
>  148   4             int Test2.int1
> Instrumentation reports 280 bytes per instance
>
> $ java -XX:+UseCompressedOops
> Test8003985.Test2
>    (header 12 bytes)
>   12   4             int Test2.int2
>    (gap 128 bytes)
>  144   4             int Test2.int1
> Instrumentation reports 280 bytes per instance
>
> The impact of that 4 bytes is eaten up by alignment to 8 anyway.
>
> -Aleksey.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/455b87df/attachment.html>

From nathan.reynolds at oracle.com  Fri Nov 30 12:00:06 2012
From: nathan.reynolds at oracle.com (Nathan Reynolds)
Date: Fri, 30 Nov 2012 10:00:06 -0700
Subject: [concurrency-interest] @Contended (JEP-142)
In-Reply-To: <CAHjP37EtPFhTGS9CFaSJWNn-PShU1-sdq3v=t+08ny-fOXdwsQ@mail.gmail.com>
References: <50B4FB0D.8020807@cs.oswego.edu> <50B7F2DA.7080105@oracle.com>
	<50B88552.9040502@oracle.com> <50B8B243.1020505@oracle.com>
	<CAHjP37EtQ7ZVF91fgnDmCdo7W_Gd2m7DESgaNKRq8n-pR92+gA@mail.gmail.com>
	<50B8B774.5040204@oracle.com>
	<CAHjP37E8YL=6RCL6gtmgHmcT+fAGhaUcdh-+Fw=VrWwjfAyU8w@mail.gmail.com>
	<50B8BFEB.9000606@oracle.com>
	<CAHjP37EtPFhTGS9CFaSJWNn-PShU1-sdq3v=t+08ny-fOXdwsQ@mail.gmail.com>
Message-ID: <50B8E616.4050404@oracle.com>

Heap analysis tools have to guess at is the size of a reference and 
header.  The tool doesn't know if the heap dump was taken on a 32-bit 
JVM, a 64-bit JVM with compressed references or a 64-bit JVM with 
uncompressed references.  Some tools use some heuristics to guess at the 
size of the reference and hence guess at the header size too.  Field 
padding is going to make this even more difficult because the tool now 
has to guess which processor it was running on.  It would be very 
helpful if the heap dump would provide size information to make object 
size calculations accurate.  Inaccurate object size information pushes 
for the wrong optimization projects.

Nathan Reynolds 
<http://psr.us.oracle.com/wiki/index.php/User:Nathan_Reynolds> | 
Architect | 602.333.9091
Oracle PSR Engineering <http://psr.us.oracle.com/> | Server Technology
On 11/30/2012 7:32 AM, Vitaly Davidovich wrote:
>
> Why is header reported as 12 bytes? Should that not be two words (16 
> bytes on x64)?
>
> Yeah, the state I'd like us to be in is for heap analysis tools 
> working offline (I.e. against an hprof file) to have enough info to be 
> able to indicate to the user that the object size has padding 
> applied.  The existing 8 byte alignment is well understood/realized so 
> people doing size estimates in their head take it into account.  But 
> 128 byte padding per field may cause some confusion :).
>
> Sent from my phone
>
> On Nov 30, 2012 9:17 AM, "Aleksey Shipilev" 
> <aleksey.shipilev at oracle.com <mailto:aleksey.shipilev at oracle.com>> wrote:
>
>     Oh yes, but the same argument applies for "just" the gaps in field
>     layout due to field alignment.
>
>     This is a very simple proof-of-concept experiment, take the regression
>     test from the @Contended patch:
>
>         // int1 is padded
>         public static class Test2 {
>             @Contended               private int int1;
>                                      private int int2;
>         }
>
>     ...and run it with
>     https://github.com/shipilev/java-field-layout
>
>     ...it will show you:
>
>     $
>     ~/trunks/jdk8/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image/bin/java
>     -javaagent:target/field-layout.jar -cp
>     target/field-layout.jar:/home/shade/trunks/jdk8/hotspot/test/runtime/8003985/
>     net.openjdk.tools.fieldlayout.MainAnalyzer Test8003985\$Test2
>
>     Test8003985.Test2
>        (header 12 bytes)
>       12   4             int Test2.int2
>        (gap 128 bytes)
>      144   4             int Test2.int1
>     Instrumentation reports 280 bytes per instance
>
>     ...the correct layout via Unsafe, and the exact object size,
>     aligned to
>     word size. So that info is available in VM. jhat/MAT, however,
>     will show
>     this object to retain only 24 bytes. AFAIK, this is just the glitch in
>     Hotspot's HPROF dump code, which we can fix.
>
>     -Aleksey.
>
>     On 11/30/2012 05:48 PM, Vitaly Davidovich wrote:
>     > Right,  but I meant that the tool will report proper size but
>     developer
>     > looking at that number may not immediately understand why the
>     reported
>     > size is larger than expected if padding is applied.  If the tool can
>     > know that @Contended is present, it can indicate that to the
>     developer.
>     > I'm not familiar with the heap dump file format so don't know if
>     there
>     > will be enough info for the tool there.  I don't think
>     instrumentation
>     > applies here as the tool is interpreting a dump file and not
>     profiling a
>     > live application?
>     >
>     > Sent from my phone
>     >
>     > On Nov 30, 2012 8:41 AM, "Aleksey Shipilev"
>     <aleksey.shipilev at oracle.com <mailto:aleksey.shipilev at oracle.com>
>     > <mailto:aleksey.shipilev at oracle.com
>     <mailto:aleksey.shipilev at oracle.com>>> wrote:
>     >
>     >     On 11/30/2012 05:36 PM, Vitaly Davidovich wrote:
>     >     > What's the plan for making this info available in heap
>     dumps (taken
>     >     > using jmap)? I'd imagine tools like Eclipse MAT may want
>     to indicate
>     >     > that a given instance of a class has padding applied.
>      Otherwise, the
>     >     > object size reported won't match expectation (without
>     knowing that
>     >     > padding was applied).
>     >
>     >     Can't speak for other implementations, but HotSpot would
>     report the
>     >     proper sizes/offset via Instrumentation.objectSize and
>     >     Unsafe.*fieldOffset. As long as tooling is not doing dumb
>     >     "sum(fieldTypeCount*fieldSizeAsMandatedByJLS)", it should
>     pick up the
>     >     proper sizes.
>     >
>     >     -Aleksey.
>     >
>     >
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/d6ef7a70/attachment.html>

From vitalyd at gmail.com  Fri Nov 30 19:26:30 2012
From: vitalyd at gmail.com (Vitaly Davidovich)
Date: Fri, 30 Nov 2012 19:26:30 -0500
Subject: [concurrency-interest] Java hardware counter profiler tools
In-Reply-To: <CAHjP37EeBtgAhx3Ye8DSJCx-cKPo6_H-j8HcuOy94ALJaSkucA@mail.gmail.com>
References: <CAHjP37HQ7O8G31Cgj3D-rZ_aeDwd52pj1jOH-DHZM2ns40=yRA@mail.gmail.com>
	<CAHjP37EeBtgAhx3Ye8DSJCx-cKPo6_H-j8HcuOy94ALJaSkucA@mail.gmail.com>
Message-ID: <CAHjP37H8pMtR18xdneYoEPs2-9stq0WgXa+M=XRSOACy6HSXog@mail.gmail.com>

Hi guys,

This isn't a strictly concurrency question, but I figure this group is as
good an audience as any for this question.

What are folks using for doing hardware counter based profiling of java
code? Specifically, I'm interested in being able to correlate generated
assembly with java source and in turn have hardware counters associated
with it (e.g. LLC miss, branch mispredict, etc).  Linux intel x64 is the
target.

I understand this is a tall order for a profiler (with JIT in the middle),
but hoping something halfway decent exists.

I've briefly toyed with Intel's amplifier 13.1 but haven't quite got it
working to this level.

Does anyone have any recommendations and possibly links for more detailed
info?

Thanks

Sent from my phone
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/d0a4042e/attachment.html>

From nathan.reynolds at oracle.com  Fri Nov 30 19:49:48 2012
From: nathan.reynolds at oracle.com (Nathan Reynolds)
Date: Fri, 30 Nov 2012 17:49:48 -0700
Subject: [concurrency-interest] Java hardware counter profiler tools
In-Reply-To: <CAHjP37H8pMtR18xdneYoEPs2-9stq0WgXa+M=XRSOACy6HSXog@mail.gmail.com>
References: <CAHjP37HQ7O8G31Cgj3D-rZ_aeDwd52pj1jOH-DHZM2ns40=yRA@mail.gmail.com>
	<CAHjP37EeBtgAhx3Ye8DSJCx-cKPo6_H-j8HcuOy94ALJaSkucA@mail.gmail.com>
	<CAHjP37H8pMtR18xdneYoEPs2-9stq0WgXa+M=XRSOACy6HSXog@mail.gmail.com>
Message-ID: <50B9542C.1090807@oracle.com>

We use Solaris Studio Performance Analyzer, oprofile and a few others.  
These tools handle JIT in the middle just fine.

Don't let the "Solaris" in Solaris Studio Performance Analyzer turn you 
off to it.  The tool does support Linux.

http://www.oracle.com/technetwork/server-storage/solarisstudio/overview/index.html
http://oprofile.sourceforge.net/

Nathan Reynolds 
<http://psr.us.oracle.com/wiki/index.php/User:Nathan_Reynolds> | 
Architect | 602.333.9091
Oracle PSR Engineering <http://psr.us.oracle.com/> | Server Technology
On 11/30/2012 5:26 PM, Vitaly Davidovich wrote:
>
> Hi guys,
>
> This isn't a strictly concurrency question, but I figure this group is 
> as good an audience as any for this question.
>
> What are folks using for doing hardware counter based profiling of 
> java code? Specifically, I'm interested in being able to correlate 
> generated assembly with java source and in turn have hardware counters 
> associated with it (e.g. LLC miss, branch mispredict, etc).  Linux 
> intel x64 is the target.
>
> I understand this is a tall order for a profiler (with JIT in the 
> middle), but hoping something halfway decent exists.
>
> I've briefly toyed with Intel's amplifier 13.1 but haven't quite got 
> it working to this level.
>
> Does anyone have any recommendations and possibly links for more 
> detailed info?
>
> Thanks
>
> Sent from my phone
>
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20121130/ed20876f/attachment.html>

