From Maciej.Bobrowski at morganstanley.com  Tue Apr  4 10:49:34 2017
From: Maciej.Bobrowski at morganstanley.com (Bobrowski, Maciej)
Date: Tue, 4 Apr 2017 14:49:34 +0000
Subject: [concurrency-interest] static initialization and thread safety
Message-ID: <9838003A10254741BC6FFADE2ED02B4581DFEE28@OZWEX0205N1.msad.ms.com>

I was wondering what guarantees there are about non-final fields initialized as part of class initialization. Let's consider


Class Point{

    int x, y;

    public Point(int x, int y) {
         this.x = x;
         this.y = y;
    }
}

Class Init{
    public static Point p = new Point(1,2)
    public static Point p2;

    static {
        p2 = new Point(3 , 4)
        p2.x = 10
    }

}

If I have multiple threads trying to read p and p2, would ALL threads wait until those objects are fully constructed and assigned to corresponding fields (like in final fields case) due to initial;ization semantics, or is that not the case?

Thanks!
Maciej


________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170404/b8ee952c/attachment.html>

From martinrb at google.com  Tue Apr  4 12:08:17 2017
From: martinrb at google.com (Martin Buchholz)
Date: Tue, 4 Apr 2017 09:08:17 -0700
Subject: [concurrency-interest] static initialization and thread safety
In-Reply-To: <9838003A10254741BC6FFADE2ED02B4581DFEE28@OZWEX0205N1.msad.ms.com>
References: <9838003A10254741BC6FFADE2ED02B4581DFEE28@OZWEX0205N1.msad.ms.com>
Message-ID: <CA+kOe08hompJSWr3m4Z2xV6bGZmU7hNZRG7py_N6WiWb7Dkccw@mail.gmail.com>

https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.2

On Tue, Apr 4, 2017 at 7:49 AM, Bobrowski, Maciej <
Maciej.Bobrowski at morganstanley.com> wrote:

> I was wondering what guarantees there are about non-final fields
> initialized as part of class initialization. Letâ€™s consider
>
>
>
>
>
> Class Point{
>
>
>
>     int x, y;
>
>
>
>     public Point(int x, int y) {
>
>          this.x = x;
>
>          this.y = y;
>
>     }
>
> }
>
>
>
> Class Init{
>
>     public static Point p = new Point(1,2)
>
>     public static Point p2;
>
>
>
>     static {
>
>         p2 = new Point(3 , 4)
>
>         p2.x = 10
>
>     }
>
>
>
> }
>
>
>
> If I have multiple threads trying to read p and p2, would ALL threads wait
> until those objects are fully constructed and assigned to corresponding
> fields (like in final fields case) due to initial;ization semantics, or is
> that not the case?
>
>
>
> Thanks!
>
> Maciej
>
>
> ------------------------------
>
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the
> opinions or views contained herein are not intended to be, and do not
> constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall
> Street Reform and Consumer Protection Act. If you have received this
> communication in error, please destroy all electronic and paper copies and
> notify the sender immediately. Mistransmission is not intended to waive
> confidentiality or privilege. Morgan Stanley reserves the right, to the
> extent permitted under applicable law, to monitor electronic
> communications. This message is subject to terms available at the following
> link: http://www.morganstanley.com/disclaimers  If you cannot access
> these links, please notify us by reply message and we will send the
> contents to you. By communicating with Morgan Stanley you consent to the
> foregoing and to the voice recording of conversations with personnel of
> Morgan Stanley.
>
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170404/0222eea6/attachment.html>

From valentin.male.kovalenko at gmail.com  Tue Apr  4 12:23:55 2017
From: valentin.male.kovalenko at gmail.com (Valentin Kovalenko)
Date: Tue, 4 Apr 2017 19:23:55 +0300
Subject: [concurrency-interest] static initialization and thread safety
	(Bobrowski, Maciej)
Message-ID: <CAO-wXw+cv+h875dF-O0rbwSOm3XQbjodvheTwDQX1FozgPS78g@mail.gmail.com>

The short answer is yes.

This is described in JLS 12.4.2. Detailed Initialization Procedure (
https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.2),
and expressed via the initialization lock LC. There is also the following
note regarding possible optimizations of initialization procedure: "An
implementation may optimize this procedure by eliding the lock acquisition
in step 1 (and release in step 4/5) when it can determine that the
initialization of the class has already completed, provided that, in terms
of the memory model, all happens-before orderings that would exist if the
lock were acquired, still exist when the optimization is performed."


> ----------------------------------------------------------------------
>
> Date: Tue, 4 Apr 2017 14:49:34 +0000
> From: "Bobrowski, Maciej" <Maciej.Bobrowski at morganstanley.com>
> To: "concurrency-interest at cs.oswego.edu"
>         <concurrency-interest at cs.oswego.edu>
> Subject: [concurrency-interest] static initialization and thread
>         safety
> Message-ID:
>         <9838003A10254741BC6FFADE2ED02B4581DFEE28 at OZWEX0205N1.msad.ms.com>
> Content-Type: text/plain; charset="utf-8"
>
> I was wondering what guarantees there are about non-final fields
> initialized as part of class initialization. Let's consider
>
>
> Class Point{
>
>     int x, y;
>
>     public Point(int x, int y) {
>          this.x = x;
>          this.y = y;
>     }
> }
>
> Class Init{
>     public static Point p = new Point(1,2)
>     public static Point p2;
>
>     static {
>         p2 = new Point(3 , 4)
>         p2.x = 10
>     }
>
> }
>
> If I have multiple threads trying to read p and p2, would ALL threads wait
> until those objects are fully constructed and assigned to corresponding
> fields (like in final fields case) due to initial;ization semantics, or is
> that not the case?
>
> Thanks!
> Maciej
>
>
> ________________________________
>
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the
> opinions or views contained herein are not intended to be, and do not
> constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall
> Street Reform and Consumer Protection Act. If you have received this
> communication in error, please destroy all electronic and paper copies and
> notify the sender immediately. Mistransmission is not intended to waive
> confidentiality or privilege. Morgan Stanley reserves the right, to the
> extent permitted under applicable law, to monitor electronic
> communications. This message is subject to terms available at the following
> link: http://www.morganstanley.com/disclaimers  If you cannot access
> these links, please notify us by reply message and we will send the
> contents to you. By communicating with Morgan Stanley you consent to the
> foregoing and to the voice recording of conversations with personnel of
> Morgan Stanley.
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <http://cs.oswego.edu/pipermail/concurrency-
> interest/attachments/20170404/b8ee952c/attachment-0001.html>
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
>
>
> ------------------------------
>
> End of Concurrency-interest Digest, Vol 147, Issue 1
> ****************************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170404/ca45c88f/attachment.html>

From oleksandr.otenko at gmail.com  Tue Apr  4 12:39:13 2017
From: oleksandr.otenko at gmail.com (Alex Otenko)
Date: Tue, 4 Apr 2017 17:39:13 +0100
Subject: [concurrency-interest] static initialization and thread safety
In-Reply-To: <CA+kOe08hompJSWr3m4Z2xV6bGZmU7hNZRG7py_N6WiWb7Dkccw@mail.gmail.com>
References: <9838003A10254741BC6FFADE2ED02B4581DFEE28@OZWEX0205N1.msad.ms.com>
 <CA+kOe08hompJSWr3m4Z2xV6bGZmU7hNZRG7py_N6WiWb7Dkccw@mail.gmail.com>
Message-ID: <F730C9BD-94F4-4057-B56F-BF310E505DD7@gmail.com>

Needs to be added that due to lazy class initialization it is possible to incur an unintended deadlock, or observe uninitialized values, subject to cross-dependencies. Cross-dependencies are a bad thing, but you cannot always avoid them, or control - due to lazy class initialization.

Alex

> On 4 Apr 2017, at 17:08, Martin Buchholz <martinrb at google.com> wrote:
> 
> https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.2 <https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4.2>
> 
> On Tue, Apr 4, 2017 at 7:49 AM, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com <mailto:Maciej.Bobrowski at morganstanley.com>> wrote:
> 
> I was wondering what guarantees there are about non-final fields initialized as part of class initialization. Letâ€™s consider
> 
>  
> 
>  
> 
> Class Point{
> 
>  
> 
>     int x, y;
> 
>   
> 
>     public Point(int x, int y) {
> 
>          this.x = x;
> 
>          this.y = y;
> 
>     }
> 
> }
> 
>  
> 
> Class Init{
> 
> 
>     public static Point p = new Point(1,2)
> 
>     public static Point p2;
> 
>  
> 
>     static {
> 
>         p2 = new Point(3 , 4)
> 
>         p2.x = 10
> 
>     }
> 
>  
> 
> }
> 
>  
> 
> If I have multiple threads trying to read p and p2, would ALL threads wait until those objects are fully constructed and assigned to corresponding fields (like in final fields case) due to initial;ization semantics, or is that not the case?
> 
>  
> 
> Thanks!
> 
> Maciej
> 
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170404/20c17372/attachment-0001.html>

From rl.stpuu at gmail.com  Wed Apr  5 23:12:54 2017
From: rl.stpuu at gmail.com (Roussanka Loukanova)
Date: Thu, 6 Apr 2017 05:12:54 +0200
Subject: [concurrency-interest] NLS 2017: Third Nordic Logic Summer School
 (NLS) 2017: Call for Participation and Registration
Message-ID: <CACAe74iUJG-8FHrPN=aAycAmQY6CeSb4GiK4BXkVdPDfH3u4rw@mail.gmail.com>

Third Nordic Logic Summer School (NLS) 2017
Stockholm, August 7 - 11, 2017

         Call for participation

    *** Registration is now open ***
------------------------------------------------------------

The third Nordic Logic Summer School is arranged under the  auspices of the
Scandinavian Logic Society (http://scandinavianlogic.org/). The two
previous schools were organized in Nordfjordeid, Norway (2013) and Helsinki
(2015). The intended audience is advanced master students, PhD-students,
postdocs and experienced researchers wishing to learn the state of the art
in a particular subject. The school is co-located with Logic Colloquium
2017 (August 14-20) and Computer Science Logic 2017 (August 21-24).

The school will consist of 10 five-hour courses, running in two parallel
streams. In addition, there will be short student presentations and poster
sessions.

The lectures run from

** Monday August 7, 9:00 to Friday August 11, 16:15 **

LECTURERS AND COURSES
------------------------------

The following lecturers and course topics are confirmed.

* Mirna Dzamonja (University of East Anglia)
-- Set Theory

* Martin Escardo (Birmingham)
-- Topological and Constructive Aspects of Higher-Order Computation

* Henrik Forssell (Oslo)
-- Categorical Logic

* Volker Halbach (Oxford)
-- Truth & Paradox

* Larry Moss (Indiana University, Bloomington)
-- Natural Logic

* Anca Muscholl (LaBRI, UniversitÃ© Bordeaux)
-- Logic in Computer Science - Control and Synthesis, from a Distributed
Perspective

* Eric Pacuit (University of Maryland)
-- Logic and Rationality

* Peter Pagin and Dag WesterstÃ¥hl (Stockholm University)
-- Compositionality

* Sara L. Uckelman (Durham)
-- Medieval Logic

* Andreas Weiermann (Ghent)
-- Proof Theory

Programme and course descriptions can be found on
the Logic in Stockholm 2017 web site:

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2

---------------------
Certificates for participation will be provided. There will be
possibilities to take official credits for some of the courses.
---------------------

VENUE
---------------------
Department of Mathematics, KrÃ¤ftriket Campus, Stockholm University.

IMPORTANT DATES
---------------------
Registration:
-- 
Registration opens: April 6, 2017
Early registration ends: ** May 15, 2017 **
Late registration ends: ** August 4, 2017 **
-- 
Submission of abstracts for presentations and posters:
-- 
Opening: March 6, 2017
Closing: May 2, 2017
Notification of acceptance: May 9, 2017
-- 

REGISTRATION
--------------
The early registration fee, for students and participants from developing
countries, is 2000 SEK including VAT (approx. 200 Euros) per participant,
and includes coffee breaks and conference materials. For all others the
early registration fee is 2600 SEK including VAT. Late registration is 3200
SEK for all.

The registration is done on the Logic in Stockholm 2017 web site:

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2

PARTICIPATION AND TRAVEL GRANTS
-------------------------------
To be considered for a grant, you need to submit an application, with file
name:

NLS2017-grant-application-Your-Names.pdf

via EasyChair on this link:

https://easychair.org/conferences/?conf=nls2017

On the bottom of the submission page of EasyChair, under Topics, you need
to check the box "Grant application", before uploading your application.

The application must contain the following documents, in one PDF document:

(1) Letter of Application for a grant, stating your logic-related interests
(2) academic records or transcripts of courses taken so far that
demonstrate your background in logic
(3) Letter of Recommendation from your current or most recent supervisor

----
Note 1: In case your recommender prefers to send the recommendation
directly, she/he should send it as an email attachment of a pdf file named:

Letter-of-Recommendation-Your-Names.pdf

to the following email address:

nls2017-grants at math.su.se

Email Subject: Letter-of-Recommendation-Your-Name.pdf

Note 2: "Your-Names" should be your actual first and family name, without
spaces.

Note 3: In case the originals are not in English, the best is to provide
scans of official, certified translations. If that would be problematic,
you should supplement the scans of the originals with translations that are
verified by the name and signature of your supervisor. The applications
nominated for grants will be subject to further verifications.

----------------------------------------
Deadline for grant applications: ** April 24, 2017**
Notification: May 9, 2017
----------------------------------------

ACCOMMODATION
---------------------
The registration fee does not cover accommodation, but there are special
offers at hostels and hotels (in the range 700 - 1200 SEK/night for single
rooms).

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2

SPECIAL OFFER FOR ACCOMMODATION
----------------------------------
There will be offers of inexpensive accommodation via the Stockholm
University Housing Office. The cost will be around 350 SEK per person per
night, in studio apartments shared by two people. To be able to take part
in this offer, participants need to register at the latest May 15.
Enquiries may be directed to:

logic2017-accommodation [at] math.su.se

FURTHER INFORMATION
-------------------------------------
Further information about submissions, registration and accommodation
possibilities is available on the Logic in Stockholm 2017 web site

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2

General enquiries: nls2017 [at] philosophy.su.se
Accommodation enquiries: logic2017-accommodation [at] math.su.se

SPONSORS
----------------

Prover Technology
http://www.prover.com

Stockholm Mathematics Centre
https://www.math-stockholm.se

COMMITTEES
----------------

Program Committee of NLS 2017:

Thierry Coquand (GÃ¶teborg), Ali Enayat (GÃ¶teborg)
Mai Gehrke (IRIF, Paris), Nina Gierasimczuk (Copenhagen)
Valentin Goranko (Stockholm U), Lauri Hella (Tampere)
Lars Kristiansen (Oslo), Juha Kontinen (Helsinki)
Ã˜ystein Linnebo (Oslo), Sara Negri (Helsinki)
Erik Palmgren (chair, Stockholm U)

Local Organizing Committee of NLS 2017:

Valentin Goranko (co-chair), Dilian Gurov, Roussanka Loukanova,
Peter LeFanu Lumsdaine, Anders Lundstedt, Erik Palmgren (co-chair)
-------------------------------------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170406/111a788e/attachment-0001.html>

From rl.stpuu at gmail.com  Thu Apr  6 08:40:32 2017
From: rl.stpuu at gmail.com (Roussanka Loukanova)
Date: Thu, 6 Apr 2017 14:40:32 +0200
Subject: [concurrency-interest] CfP: LACompLing2017 - Logic and Algorithms
 in Computational Linguistics 2017
Message-ID: <CACAe74icB7t1KhcPTpe0bDg3076Oibpsw=xbjMPtFRV2UpK1HQ@mail.gmail.com>

=================================================

                        CALL FOR PAPERS

                          Workshop on
Logic and Algorithms in Computational Linguistics 2017 (LACompLing2017)
                   Stockholm, August 16-19, 2017

        http://staff.math.su.se/rloukanova/LACompLing17.html

     * Submission deadline for regular papers: April 14, 2017 *
=================================================
                      Affiliated with the
26th Annual EACSL Conference on Computer Science Logic CSL'2017
                   Stockholm, 20--26 August 2017

                     Co-located with:
               Logic in Stockholm 2017
https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2
=================================================

DESCRIPTION
==
Computational linguistics studies natural language in its various
manifestations from a computational point of view, both on the theoretical
level (modeling grammar modules dealing with natural language form and
meaning, and the relation between these two) and on the practical level
(developing applications for language and speech technology). Right from
the start in the 1950ties, there have been strong links with computer
science, logic, and many areas of mathematics - one can think of Chomsky's
contributions to the theory of formal languages and automata, or Lambek's
logical modeling of natural language syntax. The workshop assesses the
place of logic, mathematics, and computer science in present day
computational linguistics. It intends to be a forum for presenting new
results as well as work in progress.
--------------------------------

SCOPE
==
The workshop focuses mainly on logical approaches to computational
processing of natural language, and on the applicability of methods and
techniques from the study of artificial languages (programming/logic) in
computational linguistics. We invite participation and submissions from
other relevant approaches too, especially if they can inspire new work and
approaches.

The topics of LACompLing2017 include, but are not limited to:

- Computational theories of human language
- Computational syntax
- Computational semantics
- Computational syntax-semantics interface
- Interfaces between morphology, lexicon, syntax, semantics, speech, text,
pragmatics
- Computational grammar
- Logic and reasoning systems for linguistics
- Type theories for linguistics
- Models of computation and algorithms for linguistics
- Language processing
- Parsing algorithms
- Generation of language from semantic representations
- Large-scale grammars of natural languages
- Multilingual processing
- Data science in language processing
- Machine learning of language
- Interdisciplinary methods
- Integration of formal, computational, model theoretic, graphical,
diagrammatic, statistical, and other related methods
- Logic for information extraction or expression in written and spoken
language
- Language theories based on biological fundamentals of information and
languages
- Computational neuroscience of language

IMPORTANT DATES
==
Submission deadline for regular papers: April 14, 2017
Notification of paper acceptance: May 31, 2017
Abstracts of short presentations:  June 4, 2017
Notifications for short presentations: June 12, 2017
Deadline for final submissions: June 25, 2017
Workshop: August 16-19, 2017

SUBMISSION INSTRUCTIONS
==
- Regular papers: between 10-15 pages, including figures and references, by
using LaTeX, with article.sty:
\documentclass[a4paper,11pt]{article}

- Abstracts of short presentations: not more than 1 page, by using LaTeX,
with article.sty:
\documentclass[a4paper,11pt]{article}

- We invite original papers that are not submitted concurrently to another
conference or for publication elsewhere

- The submissions of proposed papers and abstracts of short presentations
have to be in pdf

- The camera-ready submissions require the pdf of the papers and their
LaTeX sources

The submissions are via the EasyChair management system of LACompLing2017:

https://easychair.org/conferences/?conf=lacompling2017

PUBLICATIONS
==
- The proceedings of LACompLing2017 will be published digitally by the DiVA
system of Stockholm University:
http://su.diva-portal.org

- Improved and extended versions of selected papers, which have been
presented at the workshop LACompLing2017, will be published by the Journal
of Logic, Language and Information, JoLLI, after the workshop.

ORGANIZERS
==
Krasimir Angelov, University of Gothenburg, Sweden
Valeria de Paiva, Nuance Communications, USA
Kristina Liefke, Ludwig-Maximilians-University Munich, Germany
Roussanka Loukanova, Stockholm University, Sweden (chair)
Michael Moortgat, Utrecht University, The Netherlands
Reinhard Muskens, Tilburg University, The Netherlands

CONTACT
==
Roussanka Loukanova (rloukanova at gmail.com)
Valeria de Paiva (valeria.depaiva at gmail.com)
--------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170406/1687e886/attachment.html>

From rl.stpuu at gmail.com  Sun Apr  9 20:09:49 2017
From: rl.stpuu at gmail.com (Roussanka Loukanova)
Date: Mon, 10 Apr 2017 02:09:49 +0200
Subject: [concurrency-interest] Logic Colloquium 2017: 2nd Announcement and
	Call for Submissions and Participation
Message-ID: <CACAe74gsSP_JEb7Bc7u03jBkAhPHeB0Ra2r=JV9CZtynFmsM6g@mail.gmail.com>

Logic Colloquium 2017:
Second Announcement and Call for Submissions and Participation

** Registration is now open **

August 14-20, 2017, Stockholm, Sweden

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2
----------------------------------------------

The Logic Colloquium 2017 (LC2017) is the 2017 Annual European summer
meeting of the Association for Symbolic Logic (ASL) and will be held during
August 14-20, 2017, at the main campus of Stockholm University. The Logic
Colloquium 2017 is organised and hosted jointly by the Departments of
Mathematics and Philosophy at Stockholm University, and is also supported
by the KTH Royal Institute of Technology.

LC2017 will be co-located with several other logic-related events, all
taking place at Stockholm University:
- the 3rd Nordic Logic Summer School, NLS2017, August 7-11
- the 26th EACSL Annual Conference on Computer Science Logic, CSL2017,
August 20-24
- Workshop on Logic and Algorithms in Computational Linguistics 2017,
LACompLing2017, August 16-19
- Workshop on Logical Aspects of Multi-Agent Systems,  LAMAS2017, August 25
- Workshop on Logic and Automata Theory in memory of Zoltan Esik, August 25

There will be a joint session of CSL2017 and LC2017 in the morning of
August 20.
Further information about all events can be found at:

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2

INVITED SPEAKERS
------------------------------
Plenary speakers:
- David Aspero (University of East Anglia)
- Alessandro Berarducci (Pisa)
- Elisabeth Bouscaren (Paris 11)
- Christina Brech (Sao Paolo)
- Sakae Fuchino (Kobe University)
- Denis Hirschfeldt (University of Chicago)
- Wilfrid Hodges (British Academy)
- Emil Jerabek (Prague)
- Per Martin-LÃ¶f (Stockholm University)
- Dag Prawitz (Stockholm University)
- Sonja Smets (University of Amsterdam)

Tutorial speakers:
- Patricia Bouyer-Decitre (LSV ENS Cachan)
- Mai Gehrke (Paris 7)

LC-CSL joint session highlight speakers:
- Veronica Becher (Buenos Aires)
- Pierre Simon (UC Berkeley)

SPECIAL SESSIONS
-----------------------------
Category theory and type theory in honor of Per Martin-LÃ¶f on his 75th
birthday
Dates: August 17-19, 2017

Speakers:
- Thierry Coquand (GÃ¶teborg University)
- Richard Garner (Macquarie University, Sidney)
- AndrÃ© Joyal (University of Quebec, Montreal)
- Vladimir Voevodsky (Institute of Advanced Study, Princeton)

Computability
Organizers: VerÃ³nica Becher  and Denis Hirschfeldt

Speakers:
- Emmanuel Jeandel  (University of Lorraine, France)
- Klaus Meer (Syddansk Universitet Odense M, Denmark)
- Arno Pauly (Clare college, Cambridge University)
- Theodore Slaman (University of California, Berkeley)
- Mariya Soskova (Sofia University, Bulgaria)
- Keita Yokoyama (University of California, Berkeley)

History of Logic:  TBA

Model Theory:  TBA

Philosophical Logic
Organizer: Mirna Dzamonja

Speakers:
- Michele Friend (Gerorge Washington University)
- Juliette Kennedy (Helsinki University)
- Benedikt Loewe (University of Amsterdam and Hamburg)
- Sara Negri (Helsinki University)
- Davide Rizza (University of East Anglia)
- one more speaker TBA

Proof Theory
Organizers:  Jan von Plato and Andreas Weiermann

Speakers: TBA

Set Theory
Organizers:  Christina Brech and Assaf Rinot

Speakers:
- William Chen (Ben Gurion University, Israel)
- Brent Cody (Virginia Commonwealth University, USA)
- Ashutosh Kumar (Hebrew University, Jerusalem)
- Giorgio Laguzzi (Freiburg University)
- Yann Pequignot (University of California, Los Angeles)
- Sandra Uhlenbrock (University of Vienna)

SUBMISSIONS OF CONTRIBUTED TALKS
---------------------
Abstracts of contributed talks must be submitted as pdf files via this
EasyChair page:

https://easychair.org/conferences/?conf=lc2017
(If you do not have an EasyChair-account yet, you can create one at the
submission site.)

The abstracts must be prepared according to the ASL instructions here:

http://www.aslonline.org/rules_abstracts.html

Please:
- enter Title and Abstract as plain text
- as the first keyword, put the AMS 2010 classification: 03xxx
- indicate whether you are submitting for presentation at the colloquium,
for publication in the Bulletin of Symbolic Logic, or for both

Abstracts of contributed talks submitted by ASL members, which are accepted
and prepared according to the ASL Rules for Abstracts, will be published in
the Bulletin of Symbolic Logic. Upon notification of acceptance, authors
will be requested to submit the LaTeX source files.

REGISTRATION
----------------------
The early registration fee, for students and participants from developing
countries, is 1400 SEK including VAT (approx. 140 Euros) per participant,
and includes coffee breaks and conference materials. For all others, the
early registration fee is 2000 SEK including VAT. Late registration is 2800
SEK  for regular fee participants, and 2000 SEK for reduced fee
participants.

Note: 500 SEK fee deduction when registering for CSL2017 at the same time.

The registration fee does not cover accommodation, but there will be
special offers at hostels and hotels (in the range 700 -1200 SEK per night
for single rooms) available.

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2/logic-in-stockholm-2017-august-7-25-1.718739

IMPORTANT DATES
--------------------------------------------------------
Main event: August 14-19, 2017
Joint session with CSL2017: August 20, 2017

Abstract deadlines:
Abstract submission for contributed talks:  May 5, 2017
Notification: May 19, 2017

Grant application deadline: May 8, 2017

Early registration deadline: June 9, 2017
Late registration deadline: August 1, 2017
--------------------------------------------------------

GRANTS
------------------------------------
There are possibilities for grants from ASL, NSF, and the Bill Craig
donation. Information can be found at the website of the Logic Colloquium
2017:

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2/logic-colloquium-201

PROGRAMME COMMITTEE
-------------------
- Rod Downey (University of Wellington)
- Mirna Dzamonja (PC chair, University of East Anglia)
- Ali Enayat (University of Gothenburg)
- Fernando Ferreira (University of Lisbon)
- Valentin Goranko (Stockholm University)
- Martin Hils (University of MÃ¼nster)
- Sara Negri (University of Helsinki)
- Assaf Rinot (Bar-Ilan University)
- Igor Walukiewicz (University of Bordeaux)

LOCAL ORGANISING COMMITTEE
--------------------
- Stefan Buijsman, Department of Philosophy, Stockholm University
- Mads Dam, Department of Theoretical Computer Science, KTH
- Jacopo Emmenegger, Department of Mathematics, Stockholm University
- Valentin Goranko (OC co-chair), Department of Philosophy, Stockholm
University
- Dilian Gurov, Department of Theoretical Computer Science, KTH
- Sven-Ove Hansson, Department of Philosophy, KTH Royal Institute of
Technology
- Eric Johannesson, Department of Philosophy, Stockholm University
- Vera Koponen, Department of Mathematics, Uppsala University
- Johan Lindberg, Department of Mathematics, Stockholm University
- Roussanka Loukanova, Department of Mathematics, Stockholm University
- Peter LeFanu Lumsdaine, Department of Mathematics, Stockholm University
- Anders Lundstedt, Department of Philosophy, Stockholm University
- Karl Nygren, Department of Philosophy, Stockholm University
- Peter Pagin, Department of Philosophy, Stockholm University
- Erik Palmgren (OC co-chair), Department of Mathematics, Stockholm
University
- Dag WesterstÃ¥hl, Department of Philosophy, Stockholm University

CONTACTS AND ENQUIRIES
--------------------
For enquiries on scientific and programme issues, send email to:
Mirna Dzamonja (M.Dzamonja at uea.ac.uk)
For enquiries on organising matters, send email to:
lc2017 at philosophy.su.se

SPONSORS
-----------------
Association for Symbolic Logic
Prover Technology
Stockholm University
Stockholm City Hall
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170410/e1e9ba78/attachment-0001.html>

From rl.stpuu at gmail.com  Tue Apr 18 12:06:21 2017
From: rl.stpuu at gmail.com (Roussanka Loukanova)
Date: Tue, 18 Apr 2017 18:06:21 +0200
Subject: [concurrency-interest] Logic in Stockholm 2017: Call for
	Submissions and Participation
Message-ID: <CACAe74jdhdyqhxmTh_puQtVadjK+faT3fFB0gh62-mzj7ePWCg@mail.gmail.com>

-------------------------------------------------------------------
Logic in Stockholm 2017
August 7-25, 2017, Stockholm, Sweden

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2
-------------------------------------------------------------------

Logic in Stockholm 2017 is a series of logic related events organised by
the Departments of Mathematics and Philosophy at Stockholm University, and
the Group of Theoretical Computer Science at KTH. The series consists of
the following events:

------------
August 7â€“11, 2017
The Third Nordic Logic Summer School, NLS 2017,
under the auspices of the Scandinavian Logic Society (SLS)
https://www.math-stockholm.se/en/konferenser-och-akti/logic-
in-stockholm-2/nls-summer-school-in

Submission of abstracts for presentations and posters:
Closing: May 2, 2017
Notification of acceptance: May 9, 2017

Grant applications:
Deadline for applications: April 24, 2017
Notification: May 9, 2017

------------
August 14â€“20, 2017
The 2017 ASL European Summer Meeting (Logic Colloquium), LC 2017,
under the auspices of the Association of Symbolic Logic (ASL)
https://www.math-stockholm.se/en/konferenser-och-akti/logic-
in-stockholm-2/logic-colloquium-201

Submissions:
Abstracts: May 5, 2017
Notification: May 19, 2017

Grant applications:
Deadline for applications: May 8, 2017

------------
August 20â€“24
The 26th EACSL Annual Conference on Computer Science Logic, CSL 2017,
under the auspices of the European Association for Computer Science Logic
(EACSL)
https://www.math-stockholm.se/en/konferenser-och-akti/logic-
in-stockholm-2/26th-eacsl-annual-co

Open Submissions:
Abstracts of short presentations: June 4, 2017

Joint LC 2017 and CSL 2017 special session: August 20, 2017

Satellite workshops: August 16â€“19 & 25, 2017
https://www.math-stockholm.se/en/konferenser-och-akti/logic-
in-stockholm-2/26th-eacsl-annual-co/csl-2017-affiliated-
workshops-august-16-19-and-25-1.717706

------------
August 16â€“19
Workshop on Logic and Algorithms in Computational Linguistics 2017,
LACompLing2017
http://staff.math.su.se/rloukanova/LACompLing17.html

Submission of regular papers: April 30, 2017 (extended)
Notification: May 31, 2017
Abstracts of short presentations: June 4, 2017
Notifications for short presentations: June 12, 2017
Final submissions: June 25, 2017
Workshop: August 16â€“19, 2017

------------
August 25
Workshop on Logical Aspects of Multi-Agent Systems, LAMAS 2017
http://www.cs.nott.ac.uk/~psznza/lamas17/

Submission: June 4 2017
Notification: June 15 2017
Workshop: August 25 2017

------------
August 25
Workshop on Logic and Automata Theory in memory of ZoltÃ¡n Ã‰sik

-------------------------------------------------------------------
Registration is open for all events:
https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2
-------------------------------------------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170418/f28c4604/attachment.html>

From rl.stpuu at gmail.com  Tue Apr 18 12:25:20 2017
From: rl.stpuu at gmail.com (Roussanka Loukanova)
Date: Tue, 18 Apr 2017 18:25:20 +0200
Subject: [concurrency-interest] CfP Extended Deadline: LACompLing2017 -
 Logic and Algorithms in Computational Linguistics 2017
Message-ID: <CACAe74jnH7S15C0fdjG=mKvFyJ1kcu3b6x8ujhm1vQV0t6Dsmg@mail.gmail.com>

=================================================
                         CALL FOR PAPERS

                          Workshop on
Logic and Algorithms in Computational Linguistics 2017 (LACompLing2017)
                   Stockholm, August 16-19, 2017

        http://staff.math.su.se/rloukanova/LACompLing17.html

     * Extended submission deadline for regular papers: April 30, 2017 *
================================================
                      Affiliated with the
26th Annual EACSL Conference on Computer Science Logic CSL'2017
                   Stockholm, 20--26 August 2017

                     Co-located with:
               Logic in Stockholm 2017
https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2
=================================================

DESCRIPTION
==
Computational linguistics studies natural language in its various
manifestations from a computational point of view, both on the theoretical
level (modeling grammar modules dealing with natural language form and
meaning, and the relation between these two) and on the practical level
(developing applications for language and speech technology). Right from
the start in the 1950ties, there have been strong links with computer
science, logic, and many areas of mathematics - one can think of Chomsky's
contributions to the theory of formal languages and automata, or Lambek's
logical modeling of natural language syntax. The workshop assesses the
place of logic, mathematics, and computer science in present day
computational linguistics. It intends to be a forum for presenting new
results as well as work in progress.
--------------------------------

SCOPE
==
The workshop focuses mainly on logical approaches to computational
processing of natural language, and on the applicability of methods and
techniques from the study of artificial languages (programming/logic) in
computational linguistics. We invite participation and submissions from
other relevant approaches too, especially if they can inspire new work and
approaches.

The topics of LACompLing2017 include, but are not limited to:

- Computational theories of human language
- Computational syntax
- Computational semantics
- Computational syntax-semantics interface
- Interfaces between morphology, lexicon, syntax, semantics, speech, text,
pragmatics
- Computational grammar
- Logic and reasoning systems for linguistics
- Type theories for linguistics
- Models of computation and algorithms for linguistics
- Language processing
- Parsing algorithms
- Generation of language from semantic representations
- Large-scale grammars of natural languages
- Multilingual processing
- Data science in language processing
- Machine learning of language
- Interdisciplinary methods
- Integration of formal, computational, model theoretic, graphical,
diagrammatic, statistical, and other related methods
- Logic for information extraction or expression in written and spoken
language
- Language theories based on biological fundamentals of information and
languages
- Computational neuroscience of language

IMPORTANT DATES
==
Submission deadline for regular papers: April 30, 2017 (new)
Notification of paper acceptance: May 31, 2017
Abstracts of short presentations:  June 4, 2017
Notifications for short presentations: June 12, 2017
Deadline for final submissions: June 25, 2017
Workshop: August 16-19, 2017

SUBMISSION INSTRUCTIONS
==
- Regular papers: between 10-15 pages, including figures and references, by
using LaTeX, with article.sty:
\documentclass[a4paper,11pt]{article}

- Abstracts of short presentations: not more than 1 page, by using LaTeX,
with article.sty:
\documentclass[a4paper,11pt]{article}

- We invite original papers that are not submitted concurrently to another
conference or for publication elsewhere

- The submissions of proposed papers and abstracts of short presentations
have to be in pdf

- The camera-ready submissions require the pdf of the papers and their
LaTeX sources

The submissions are via the EasyChair management system of LACompLing2017:

https://easychair.org/conferences/?conf=lacompling2017

PUBLICATIONS
==
- The proceedings of LACompLing2017 will be published digitally by the DiVA
system of Stockholm University:
http://su.diva-portal.org

- Improved and extended versions of selected papers, which have been
presented at the workshop LACompLing2017, will be published by the Journal
of Logic, Language and Information, JoLLI, after the workshop.

ORGANIZERS
==
Krasimir Angelov, University of Gothenburg, Sweden
Valeria de Paiva, Nuance Communications, USA
Kristina Liefke, Ludwig-Maximilians-University Munich, Germany
Roussanka Loukanova, Stockholm University, Sweden (chair)
Michael Moortgat, Utrecht University, The Netherlands
Reinhard Muskens, Tilburg University, The Netherlands

CONTACT
==
Roussanka Loukanova (rloukanova at gmail.com)
Valeria de Paiva (valeria.depaiva at gmail.com)
--------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170418/e71d0db7/attachment-0001.html>

From forax at univ-mlv.fr  Mon Apr 24 01:50:07 2017
From: forax at univ-mlv.fr (Remi Forax)
Date: Mon, 24 Apr 2017 07:50:07 +0200 (CEST)
Subject: [concurrency-interest] Atomic arrays and toArray(), stream(),
	iterator()
In-Reply-To: <CA+kOe0-NbBM1Mfh71HfN7-LC5S6JuqgTFrW3g6z-4iuJ7Ep9tA@mail.gmail.com>
References: <58b268542c393f6cce3949bb8544a35a@duigou.org>
 <CA+kOe0-TVxjvfb5uSnLUWqtYrNbkVpSCHzSkUQydJkXwAM9KsQ@mail.gmail.com>
 <CAP0L=URjTnHs5txMMYuZkL+tM0U5VF3NiqFmM5G=HxbqJEq9pg@mail.gmail.com>
 <CA+kOe0-+VEuPipTArhXa2NsOkiTiUqTOtJnpk2wNrYZuFempYQ@mail.gmail.com>
 <CAP0L=US0xHnKCVJ20oHBeihPE0VqO+ALQX6JjAvBxTbELT4PRQ@mail.gmail.com>
 <CAGu0=MMfHuHNNe-DOVixBODTjnP9ef+gZRx12i671-zANuZbew@mail.gmail.com>
 <CAP0L=UTye=OF47BxfPOpP-jftsKKm=vUZ8_=7u=QxOC3fzqBWg@mail.gmail.com>
 <CA+kOe0-NbBM1Mfh71HfN7-LC5S6JuqgTFrW3g6z-4iuJ7Ep9tA@mail.gmail.com>
Message-ID: <533690689.31267.1493013007418.JavaMail.zimbra@u-pem.fr>

correction to avoid to spread false news, 
i say that Arrayish was scheduled for 11 but i was wrong, it's part of valhalla and currently unscheduled. 

RÃ©mi 

> De: "Martin Buchholz" <martinrb at google.com>
> Ã€: "jbloch" <jbloch at gmail.com>
> Cc: "Mike Duigou" <openjdk at duigou.org>, "Concurrency Interest"
> <concurrency-interest at cs.oswego.edu>
> EnvoyÃ©: Mardi 21 Mars 2017 00:49:31
> Objet: Re: [concurrency-interest] Atomic arrays and toArray(), stream(),
> iterator()

> On Mon, Mar 20, 2017 at 4:24 PM, Joshua Bloch < jbloch at gmail.com > wrote:

>> Ben,
>> That's what I assumed, but I'll give Martin a chance to respond :)

> I was waiting for Doug or Aleksey to respond!

> The biggest advantage of AtomicLong will always be PORTABILITY. Each platform
> iteration takes more years to become ubiquitous than its predecessor, and that
> will be even more true for jdk9. VarHandles are for classes that are part of
> the platform or that value extreme performance more than portability.

> OTOH jdk9 AtomicLong is a wrapper around VarHandle. It's unlikely to be
> completely free. .... oh I now see Remi has a better answer!

> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170424/07a32151/attachment.html>

From Maciej.Bobrowski at morganstanley.com  Wed Apr 26 11:11:43 2017
From: Maciej.Bobrowski at morganstanley.com (Bobrowski, Maciej)
Date: Wed, 26 Apr 2017 15:11:43 +0000
Subject: [concurrency-interest] Non-volatile reads
Message-ID: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>

Let's consider the class:

Foo{

   int x = 0;
   volatile int y = 0;

  void write(int newVal) {
     x = newVal;
     y = newVal;
  }

  int getX(){ return x; }

}

I would like to assume that the compiler is NOT going to rewrite the getX() to a constant, and it will actually read it from memory/cache and not from a register. Let's assume one thread is periodically calling write with increasing value, and one other thread is reading x.

Q1. Volatile forces ordering and visibility of writes (x and y) across processors. As far as I see it, when volatile write happens, all store buffers of that core will be flushed in an exclusive manner (by obtaining exclusive flag on the processor). The push will invalidate all other cores cache lines that are related to the data written (not sure how though..). Is that correct?

Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?

Q3. Even if y was not volatile, on x-86 the store buffers would eventually be flushed, so eventually reading process would see an updated value of x, perhaps not latest but non-zero value?

Thanks for any pointers/comments.


________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/7d32d630/attachment.html>

From oleksandr.otenko at gmail.com  Wed Apr 26 11:32:03 2017
From: oleksandr.otenko at gmail.com (Alex Otenko)
Date: Wed, 26 Apr 2017 16:32:03 +0100
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
Message-ID: <88BAC92C-2BF5-4FD6-AE54-F20F08A64345@gmail.com>

You are making many assumptions about the behaviour of the compiler without a reference where you got them from. Not that I am asking for references, just pointing out how early your reasoning went wrong.

JMM only guarantees happens-before edges between writing to x (x=newVal) and reading from x (return x), if you have program order between them (same thread writes, then reads), or a happens-before edge between some other instructions - one instruction appearing in program order after write to x and one instruction appearing before reading x in program order.

For example, if you arenâ€™t reading from y as regularly as you read from x in the thread that reads x, JMM does not guarantee anything about visibility of x.


Alex

> On 26 Apr 2017, at 16:11, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com> wrote:
> 
> 
> Letâ€™s consider the class:
>  
> Foo{
>  
>    int x = 0;
>    volatile int y = 0;
>  
>   void write(int newVal) {
>      x = newVal;
>      y = newVal;
>   }
>  
>   int getX(){ return x; }
>  
> }
>  
> I would like to assume that the compiler is NOT going to rewrite the getX() to a constant, and it will actually read it from memory/cache and not from a register. Letâ€™s assume one thread is periodically calling write with increasing value, and one other thread is reading x.
>  
> Q1. Volatile forces ordering and visibility of writes (x and y) across processors. As far as I see it, when volatile write happens, all store buffers of that core will be flushed in an exclusive manner (by obtaining exclusive flag on the processor). The push will invalidate all other cores cache lines that are related to the data written (not sure how though..). Is that correct?
>  
> Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?
>  
> Q3. Even if y was not volatile, on x-86 the store buffers would eventually be flushed, so eventually reading process would see an updated value of x, perhaps not latest but non-zero value?
>  
> Thanks for any pointers/comments.
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
> 
> 
> 
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/c8147d61/attachment-0001.html>

From Maciej.Bobrowski at morganstanley.com  Wed Apr 26 11:38:05 2017
From: Maciej.Bobrowski at morganstanley.com (Bobrowski, Maciej)
Date: Wed, 26 Apr 2017 15:38:05 +0000
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <88BAC92C-2BF5-4FD6-AE54-F20F08A64345@gmail.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
 <88BAC92C-2BF5-4FD6-AE54-F20F08A64345@gmail.com>
Message-ID: <9838003A10254741BC6FFADE2ED02B4581E1C2CC@OZWEX0205N1.msad.ms.com>

Of course, I am  referring to x-86, which forces cache consistency and eventually all writes are flushed from store buffers

From: Alex Otenko [mailto:oleksandr.otenko at gmail.com]
Sent: 26 April 2017 16:32
To: Bobrowski, Maciej (IST)
Cc: concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] Non-volatile reads

You are making many assumptions about the behaviour of the compiler without a reference where you got them from. Not that I am asking for references, just pointing out how early your reasoning went wrong.

JMM only guarantees happens-before edges between writing to x (x=newVal) and reading from x (return x), if you have program order between them (same thread writes, then reads), or a happens-before edge between some other instructions - one instruction appearing in program order after write to x and one instruction appearing before reading x in program order.

For example, if you arenâ€™t reading from y as regularly as you read from x in the thread that reads x, JMM does not guarantee anything about visibility of x.


Alex

On 26 Apr 2017, at 16:11, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com<mailto:Maciej.Bobrowski at morganstanley.com>> wrote:


Letâ€™s consider the class:

Foo{

   int x = 0;
   volatile int y = 0;

  void write(int newVal) {
     x = newVal;
     y = newVal;
  }

  int getX(){ return x; }

}

I would like to assume that the compiler is NOT going to rewrite the getX() to a constant, and it will actually read it from memory/cache and not from a register. Letâ€™s assume one thread is periodically calling write with increasing value, and one other thread is reading x.

Q1. Volatile forces ordering and visibility of writes (x and y) across processors. As far as I see it, when volatile write happens, all store buffers of that core will be flushed in an exclusive manner (by obtaining exclusive flag on the processor). The push will invalidate all other cores cache lines that are related to the data written (not sure how though..). Is that correct?

Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?

Q3. Even if y was not volatile, on x-86 the store buffers would eventually be flushed, so eventually reading process would see an updated value of x, perhaps not latest but non-zero value?

Thanks for any pointers/comments.


________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.





_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>
http://cs.oswego.edu/mailman/listinfo/concurrency-interest



________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/a6907119/attachment-0001.html>

From rk at rkuhn.info  Wed Apr 26 11:45:24 2017
From: rk at rkuhn.info (Roland Kuhn)
Date: Wed, 26 Apr 2017 17:45:24 +0200
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <9838003A10254741BC6FFADE2ED02B4581E1C2CC@OZWEX0205N1.msad.ms.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
 <88BAC92C-2BF5-4FD6-AE54-F20F08A64345@gmail.com>
 <9838003A10254741BC6FFADE2ED02B4581E1C2CC@OZWEX0205N1.msad.ms.com>
Message-ID: <CCE1BC02-DF63-46F6-9ED5-4BC48F7FA4D6@rkuhn.info>

Hi Maciej,

the issue is not the processor, there are many layers of code transformation before that which you cannot simply assume away. E.g. if you spin on `while (getX() == 0)` then the compiler may just emit an infinite loop since you are clearly not writing to x in the loop.

Regards,

Roland

> 26 apr. 2017 kl. 17:38 skrev Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com>:
> 
> 
> Of course, I am  referring to x-86, which forces cache consistency and eventually all writes are flushed from store buffers
>  
> From: Alex Otenko [mailto:oleksandr.otenko at gmail.com <mailto:oleksandr.otenko at gmail.com>] 
> Sent: 26 April 2017 16:32
> To: Bobrowski, Maciej (IST)
> Cc: concurrency-interest at cs.oswego.edu <mailto:concurrency-interest at cs.oswego.edu>
> Subject: Re: [concurrency-interest] Non-volatile reads
>  
> You are making many assumptions about the behaviour of the compiler without a reference where you got them from. Not that I am asking for references, just pointing out how early your reasoning went wrong.
>  
> JMM only guarantees happens-before edges between writing to x (x=newVal) and reading from x (return x), if you have program order between them (same thread writes, then reads), or a happens-before edge between some other instructions - one instruction appearing in program order after write to x and one instruction appearing before reading x in program order.
>  
> For example, if you arenâ€™t reading from y as regularly as you read from x in the thread that reads x, JMM does not guarantee anything about visibility of x.
>  
>  
> Alex
>  
> On 26 Apr 2017, at 16:11, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com <mailto:Maciej.Bobrowski at morganstanley.com>> wrote:
>  
>  
> Letâ€™s consider the class:
>  
> Foo{
>  
>    int x = 0;
>    volatile int y = 0;
>  
>   void write(int newVal) {
>      x = newVal;
>      y = newVal;
>   }
>  
>   int getX(){ return x; }
>  
> }
>  
> I would like to assume that the compiler is NOT going to rewrite the getX() to a constant, and it will actually read it from memory/cache and not from a register. Letâ€™s assume one thread is periodically calling write with increasing value, and one other thread is reading x.
>  
> Q1. Volatile forces ordering and visibility of writes (x and y) across processors. As far as I see it, when volatile write happens, all store buffers of that core will be flushed in an exclusive manner (by obtaining exclusive flag on the processor). The push will invalidate all other cores cache lines that are related to the data written (not sure how though..). Is that correct?
>  
> Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?
>  
> Q3. Even if y was not volatile, on x-86 the store buffers would eventually be flushed, so eventually reading process would see an updated value of x, perhaps not latest but non-zero value?
>  
> Thanks for any pointers/comments.
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
>  
>  
>  
>  
>  
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>  
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
> 
> 
> 
> 
> 
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/7069e184/attachment-0001.html>

From Maciej.Bobrowski at morganstanley.com  Wed Apr 26 11:50:08 2017
From: Maciej.Bobrowski at morganstanley.com (Bobrowski, Maciej)
Date: Wed, 26 Apr 2017 15:50:08 +0000
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <CCE1BC02-DF63-46F6-9ED5-4BC48F7FA4D6@rkuhn.info>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
 <88BAC92C-2BF5-4FD6-AE54-F20F08A64345@gmail.com>
 <9838003A10254741BC6FFADE2ED02B4581E1C2CC@OZWEX0205N1.msad.ms.com>
 <CCE1BC02-DF63-46F6-9ED5-4BC48F7FA4D6@rkuhn.info>
Message-ID: <9838003A10254741BC6FFADE2ED02B4581E1C2F0@OZWEX0205N1.msad.ms.com>

I agree. The point of this exercise is to understand the low-level processor caches in the presence of volatile. SO letâ€™s assume the variable code is not optimized, the value is read from cache/memory, as described below, I wanted to check if my line of thinking is correct

From: Roland Kuhn [mailto:rk at rkuhn.info]
Sent: 26 April 2017 16:45
To: Bobrowski, Maciej (IST)
Cc: Alex Otenko; concurrency-interest at cs.oswego.edu
Subject: Re: [concurrency-interest] Non-volatile reads

Hi Maciej,

the issue is not the processor, there are many layers of code transformation before that which you cannot simply assume away. E.g. if you spin on `while (getX() == 0)` then the compiler may just emit an infinite loop since you are clearly not writing to x in the loop.

Regards,

Roland

26 apr. 2017 kl. 17:38 skrev Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com<mailto:Maciej.Bobrowski at morganstanley.com>>:


Of course, I am  referring to x-86, which forces cache consistency and eventually all writes are flushed from store buffers

From: Alex Otenko [mailto:oleksandr.otenko at gmail.com]
Sent: 26 April 2017 16:32
To: Bobrowski, Maciej (IST)
Cc: concurrency-interest at cs.oswego.edu<mailto:concurrency-interest at cs.oswego.edu>
Subject: Re: [concurrency-interest] Non-volatile reads

You are making many assumptions about the behaviour of the compiler without a reference where you got them from. Not that I am asking for references, just pointing out how early your reasoning went wrong.

JMM only guarantees happens-before edges between writing to x (x=newVal) and reading from x (return x), if you have program order between them (same thread writes, then reads), or a happens-before edge between some other instructions - one instruction appearing in program order after write to x and one instruction appearing before reading x in program order.

For example, if you arenâ€™t reading from y as regularly as you read from x in the thread that reads x, JMM does not guarantee anything about visibility of x.


Alex

On 26 Apr 2017, at 16:11, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com<mailto:Maciej.Bobrowski at morganstanley.com>> wrote:


Letâ€™s consider the class:

Foo{

   int x = 0;
   volatile int y = 0;

  void write(int newVal) {
     x = newVal;
     y = newVal;
  }

  int getX(){ return x; }

}

I would like to assume that the compiler is NOT going to rewrite the getX() to a constant, and it will actually read it from memory/cache and not from a register. Letâ€™s assume one thread is periodically calling write with increasing value, and one other thread is reading x.

Q1. Volatile forces ordering and visibility of writes (x and y) across processors. As far as I see it, when volatile write happens, all store buffers of that core will be flushed in an exclusive manner (by obtaining exclusive flag on the processor). The push will invalidate all other cores cache lines that are related to the data written (not sure how though..). Is that correct?

Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?

Q3. Even if y was not volatile, on x-86 the store buffers would eventually be flushed, so eventually reading process would see an updated value of x, perhaps not latest but non-zero value?

Thanks for any pointers/comments.



________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.





_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>
http://cs.oswego.edu/mailman/listinfo/concurrency-interest



________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.





_______________________________________________
Concurrency-interest mailing list
Concurrency-interest at cs.oswego.edu<mailto:Concurrency-interest at cs.oswego.edu>
http://cs.oswego.edu/mailman/listinfo/concurrency-interest



________________________________

NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/93853afd/attachment-0001.html>

From shade at redhat.com  Wed Apr 26 11:50:19 2017
From: shade at redhat.com (Aleksey Shipilev)
Date: Wed, 26 Apr 2017 17:50:19 +0200
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
Message-ID: <3d8736b9-1c39-e434-aae3-d923ff21d9da@redhat.com>

On 04/26/2017 05:11 PM, Bobrowski, Maciej wrote:
> class Foo {
>   int x = 0;
>   volatile int y = 0;
> 
>   void write(int newVal) {
>      x = newVal;
>      y = newVal;
>   }
> 
>   int getX(){ return x; }
> 
> }
> 
> I would like to assume that the compiler is NOT going to rewrite the getX() to a
> constant, and it will actually read it from memory/cache and not from a
> register. Letâ€™s assume one thread is periodically calling write with increasing
> value, and one other thread is reading x.

This is actually a very strong assumption, and it would be violated first in
real life cases.


> Q1. Volatile forces ordering and visibility of writes (x and y) across
> processors. As far as I see it, when volatile write happens, all store buffers
> of that core will be flushed in an exclusive manner (by obtaining exclusive flag
> on the processor). The push will invalidate all other cores cache lines that are
> related to the data written (not sure how though..). Is that correct?

Correct for some hypothesis about how Java accesses are compiled down, and how
the hardware works. For example, "volatile store" does not always mean "flusing
the store buffer". The thing about "exclusive" is really up to cache coherency
mechanism given hardware employs. Etc.


> Q2. Given the above, after the flushing of the buffers happen, the other thread
> will be forced to re-read x from main mem (or L3 cache) and update its local
> value,, effectively seeing the new value. Correct?

Correct for some hypothesis how hardware works.

Generic hardware is not obliged to flush the store buffer completely, or in
order. So one can think up the hypothetical hardware example that only flushes
"y", although it would be hard to implement release-acquire there...

Also, if "x" and "y" are on different cache lines, anything that happens to
cache line holding "y" might not happen (or happen late, or even worse) to cache
line holding "x". Reasoning gets simpler if "y" drags the neighbors in its cache
line.

<insert more fantasies here>


> Q3. Even if y was not volatile, on x-86 the store buffers would eventually be
> flushed, so eventually reading process would see an updated value of x, perhaps
> not latest but non-zero value?

Correct, in the belief that everything else was fine.

<insert more fantasies here>


> Thanks for any pointers/comments.

Now, see, "correct, but..." does not mean "always correct".

Read this:
 http://gee.cs.oswego.edu/dl/html/j9mm.html

What you want is JDK 9 VarHandles "opaque" mode that guarantees progress. Read
carefully, and you will spot exactly the case you are asking about.

In current implementation, "opaque" will indeed issue the compiler barriers
only, letting the hardware cache coherency to figure out the rest. But if we
meet the hardware which does not provide this, it will be fixed in the JDK
itself, not in some obscure code in user codebase.

Thanks,
-Aleksey


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/9392e5a3/attachment.sig>

From oleksandr.otenko at gmail.com  Wed Apr 26 11:58:55 2017
From: oleksandr.otenko at gmail.com (Alex Otenko)
Date: Wed, 26 Apr 2017 16:58:55 +0100
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <9838003A10254741BC6FFADE2ED02B4581E1C2F0@OZWEX0205N1.msad.ms.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
 <88BAC92C-2BF5-4FD6-AE54-F20F08A64345@gmail.com>
 <9838003A10254741BC6FFADE2ED02B4581E1C2CC@OZWEX0205N1.msad.ms.com>
 <CCE1BC02-DF63-46F6-9ED5-4BC48F7FA4D6@rkuhn.info>
 <9838003A10254741BC6FFADE2ED02B4581E1C2F0@OZWEX0205N1.msad.ms.com>
Message-ID: <CF516AF3-03D9-49D1-9BE8-F8BF1B047DC5@gmail.com>

Thatâ€™s a novice way of looking at Java programs.

IF volatile store of y is not optimized out,
IF non-volatile read of x is not optimized out,
then the barriers will be issued, and the value of x will be visible by "the other" thread.

But those two IFs are not necessarily true. JMM allows to optimize both of them out in your example.

Alex

> On 26 Apr 2017, at 16:50, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com> wrote:
> 
> 
> I agree. The point of this exercise is to understand the low-level processor caches in the presence of volatile. SO letâ€™s assume the variable code is not optimized, the value is read from cache/memory, as described below, I wanted to check if my line of thinking is correct
>  
> From: Roland Kuhn [mailto:rk at rkuhn.info] 
> Sent: 26 April 2017 16:45
> To: Bobrowski, Maciej (IST)
> Cc: Alex Otenko; concurrency-interest at cs.oswego.edu
> Subject: Re: [concurrency-interest] Non-volatile reads
>  
> Hi Maciej,
>  
> the issue is not the processor, there are many layers of code transformation before that which you cannot simply assume away. E.g. if you spin on `while (getX() == 0)` then the compiler may just emit an infinite loop since you are clearly not writing to x in the loop.
>  
> Regards,
>  
> Roland
>  
> 26 apr. 2017 kl. 17:38 skrev Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com <mailto:Maciej.Bobrowski at morganstanley.com>>:
>  
>  
> Of course, I am  referring to x-86, which forces cache consistency and eventually all writes are flushed from store buffers
>  
> From: Alex Otenko [mailto:oleksandr.otenko at gmail.com <mailto:oleksandr.otenko at gmail.com>] 
> Sent: 26 April 2017 16:32
> To: Bobrowski, Maciej (IST)
> Cc: concurrency-interest at cs.oswego.edu <mailto:concurrency-interest at cs.oswego.edu>
> Subject: Re: [concurrency-interest] Non-volatile reads
>  
> You are making many assumptions about the behaviour of the compiler without a reference where you got them from. Not that I am asking for references, just pointing out how early your reasoning went wrong.
>  
> JMM only guarantees happens-before edges between writing to x (x=newVal) and reading from x (return x), if you have program order between them (same thread writes, then reads), or a happens-before edge between some other instructions - one instruction appearing in program order after write to x and one instruction appearing before reading x in program order.
>  
> For example, if you arenâ€™t reading from y as regularly as you read from x in the thread that reads x, JMM does not guarantee anything about visibility of x.
>  
>  
> Alex
>  
> On 26 Apr 2017, at 16:11, Bobrowski, Maciej <Maciej.Bobrowski at morganstanley.com <mailto:Maciej.Bobrowski at morganstanley.com>> wrote:
>  
>  
> Letâ€™s consider the class:
>  
> Foo{
>  
>    int x = 0;
>    volatile int y = 0;
>  
>   void write(int newVal) {
>      x = newVal;
>      y = newVal;
>   }
>  
>   int getX(){ return x; }
>  
> }
>  
> I would like to assume that the compiler is NOT going to rewrite the getX() to a constant, and it will actually read it from memory/cache and not from a register. Letâ€™s assume one thread is periodically calling write with increasing value, and one other thread is reading x.
>  
> Q1. Volatile forces ordering and visibility of writes (x and y) across processors. As far as I see it, when volatile write happens, all store buffers of that core will be flushed in an exclusive manner (by obtaining exclusive flag on the processor). The push will invalidate all other cores cache lines that are related to the data written (not sure how though..). Is that correct?
>  
> Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?
>  
> Q3. Even if y was not volatile, on x-86 the store buffers would eventually be flushed, so eventually reading process would see an updated value of x, perhaps not latest but non-zero value?
>  
> Thanks for any pointers/comments.
> 
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
>  
>  
>  
>  
>  
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>  
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.
>  
>  
>  
>  
>  
> _______________________________________________
> Concurrency-interest mailing list
> Concurrency-interest at cs.oswego.edu <mailto:Concurrency-interest at cs.oswego.edu>
> http://cs.oswego.edu/mailman/listinfo/concurrency-interest <http://cs.oswego.edu/mailman/listinfo/concurrency-interest>
>  
> 
> 
> 
> NOTICE: Morgan Stanley is not acting as a municipal advisor and the opinions or views contained herein are not intended to be, and do not constitute, advice within the meaning of Section 975 of the Dodd-Frank Wall Street Reform and Consumer Protection Act. If you have received this communication in error, please destroy all electronic and paper copies and notify the sender immediately. Mistransmission is not intended to waive confidentiality or privilege. Morgan Stanley reserves the right, to the extent permitted under applicable law, to monitor electronic communications. This message is subject to terms available at the following link: http://www.morganstanley.com/disclaimers <http://www.morganstanley.com/disclaimers>  If you cannot access these links, please notify us by reply message and we will send the contents to you. By communicating with Morgan Stanley you consent to the foregoing and to the voice recording of conversations with personnel of Morgan Stanley.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170426/216494f0/attachment-0001.html>

From aph at redhat.com  Wed Apr 26 13:16:13 2017
From: aph at redhat.com (Andrew Haley)
Date: Wed, 26 Apr 2017 18:16:13 +0100
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
Message-ID: <14e124ba-c629-b70d-ac64-8cefc010f4cf@redhat.com>

On 26/04/17 16:11, Bobrowski, Maciej wrote:
> Q2. Given the above, after the flushing of the buffers happen, the other thread will be forced to re-read x from main mem (or L3 cache) and update its local value,, effectively seeing the new value. Correct?

No.  There is only a volatile write.  For the other thread to see
the volatile write, there has to be a volatile read to synchronize
with.

Andrew.


From aph at redhat.com  Wed Apr 26 13:16:16 2017
From: aph at redhat.com (Andrew Haley)
Date: Wed, 26 Apr 2017 18:16:16 +0100
Subject: [concurrency-interest] Non-volatile reads
In-Reply-To: <3d8736b9-1c39-e434-aae3-d923ff21d9da@redhat.com>
References: <9838003A10254741BC6FFADE2ED02B4581E1C255@OZWEX0205N1.msad.ms.com>
 <3d8736b9-1c39-e434-aae3-d923ff21d9da@redhat.com>
Message-ID: <da622ab2-c5a2-effd-b131-4ba6419d8ee4@redhat.com>

And also I'm going to recommend "Memory Barriers: a Hardware View for
Software Hackers"

http://www.puppetmastertrading.com/images/hwViewForSwHackers.pdf

... just need to get past all of this "flush the cache lines" stuff.

Andrew.

From rl.stpuu at gmail.com  Fri Apr 28 15:38:36 2017
From: rl.stpuu at gmail.com (Roussanka Loukanova)
Date: Fri, 28 Apr 2017 21:38:36 +0200
Subject: [concurrency-interest] Logic Colloquium 2017: Final Call for
 Submissions ** Deadline for abstract submissions: May 5 **
Message-ID: <CACAe74ggg1YzM+mMdpYbxMHUL1aJsQK1pCurCrb4TSAQiBx2Dw@mail.gmail.com>

Logic Colloquium 2017: Final Call for Submissions
** Deadline for abstract submissions: May 5 **
----------------------------------------------
Logic Colloquium 2017:
Third Announcement and Call for Submissions

August 14-20, 2017, Stockholm, Sweden

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2
----------------------------------------------

The Logic Colloquium 2017 (LC2017) is the 2017 Annual European summer
meeting of the Association for Symbolic Logic (ASL) and will be held during
August 14-20, 2017, at the main campus of Stockholm University. The Logic
Colloquium 2017 is organised and hosted jointly by the Departments of
Mathematics and Philosophy at Stockholm University, and is also supported
by the KTH Royal Institute of Technology.

LC2017 will be co-located with several other logic-related events, all
taking place at Stockholm University:
- the 3rd Nordic Logic Summer School, NLS2017, August 7-11
- the 26th EACSL Annual Conference on Computer Science Logic, CSL2017,
August 20-24
- Workshop on Logic and Algorithms in Computational Linguistics 2017,
LACompLing2017, August 16-19
- Workshop on Logical Aspects of Multi-Agent Systems,  LAMAS2017, August 25
- Workshop on Logic and Automata Theory in memory of Zoltan Esik, August 25

There will be a joint session of CSL2017 and LC2017 in the morning of
August 20.
Further information about all events can be found at:

https://www.math-stockholm.se/en/konferenser-och-akti/logic-in-stockholm-2

INVITED SPEAKERS
------------------------------
Plenary speakers:
- David Aspero (University of East Anglia)
- Alessandro Berarducci (Pisa)
- Elisabeth Bouscaren (Paris 11)
- Christina Brech (Sao Paolo)
- Sakae Fuchino (Kobe University)
- Denis Hirschfeldt (University of Chicago)
- Wilfrid Hodges (British Academy, UK)
- Emil Jerabek (Prague)
- Per Martin-LÃ¶f (Stockholm University)
- Dag Prawitz (Stockholm University)
- Sonja Smets (University of Amsterdam)

Tutorial speakers:
- Patricia Bouyer-Decitre (LSV ENS Cachan)
- Mai Gehrke (Paris 7)

LC-CSL joint session highlight speakers:
- Veronica Becher (University of Buenos Aires)
- Pierre Simon (UC Berkeley)
- Phokion Kolaitis (University of California Santa Cruz and IBM Research -
Almaden)
- Wolfgang Thomas (RWTH Aachen)

SPECIAL SESSIONS
-----------------------------
Category theory and type theory in honour of Per Martin-LÃ¶f on his 75th
birthday
Dates: August 17-19, 2017

Speakers:
- Thierry Coquand (GÃ¶teborg University)
- Richard Garner (Macquarie University, Sidney)
- AndrÃ© Joyal (University of Quebec, Montreal)
- Vladimir Voevodsky (Institute of Advanced Study, Princeton)

Computability
Organizers: VerÃ³nica Becher  and Denis Hirschfeldt

Speakers:
- Emmanuel Jeandel  (University of Lorraine, France)
- Klaus Meer (Brandenburg University of Technology, Cottbus-Senftenberg,
 Germany)
- Arno Pauly (Clare college, Cambridge University)
- Theodore Slaman (University of California, Berkeley)
- Mariya Soskova (Sofia University, Bulgaria)
- Keita Yokoyama (University of California, Berkeley)

History of Logic:
Organiser: Valentin Goranko

Speakers:
- Wilfrid Hodges (British Academy, UK)
- Peter Ã˜hrstrÃ¸m (Aalborg University, Denmark)
- Jan von Plato (University of Helsinki, Finland)

Model Theory:  TBA

Philosophical Logic
Organizer: Mirna Dzamonja

Speakers:
- Michele Friend (Gerorge Washington University)
- Juliette Kennedy (Helsinki University)
- Benedikt Loewe (University of Amsterdam and Hamburg)
- Sara Negri (Helsinki University)
- Davide Rizza (University of East Anglia)
- one more speaker TBA

Proof Theory
Organizers:  Jan von Plato and Andreas Weiermann

 Speakers:
- Fernando Ferreira (University of Lisbon, Portugal)
- Annika Kanckos (University of Helsinki, Finland)
- Anton Setzer (Swansea University, UK)
- further speakers TBA

Set Theory
Organizers:  Christina Brech and Assaf Rinot

Speakers:
- William Chen (Ben Gurion University, Israel)
- Brent Cody (Virginia Commonwealth University, USA)
- Ashutosh Kumar (Hebrew University, Jerusalem)
- Giorgio Laguzzi (Freiburg University)
- Yann Pequignot (University of California, Los Angeles)
- Sandra Uhlenbrock (University of Vienna, Austria)

SUBMISSIONS OF CONTRIBUTED TALKS
---------------------
Abstracts of contributed talks must be submitted as pdf files via this
EasyChair page:

https://easychair.org/conferences/?conf=lc2017
(If you do not have an EasyChair-account yet, you can create one at the
submission site.)

The abstracts must be prepared according to the ASL instructions here:

http://www.aslonline.org/rules_abstracts.html

Please:
- enter Title and Abstract as plain text
- as the first keyword, put the AMS 2010 classification: 03xxx
- indicate whether you are submitting for presentation at the colloquium,
for publication in the Bulletin of Symbolic Logic, or for both

Abstracts of contributed talks submitted by ASL members, which are accepted
and prepared according to the ASL Rules for Abstracts, will be published in
the Bulletin of Symbolic Logic. Upon notification of acceptance, authors
will be requested to submit the LaTeX source files.

REGISTRATION
----------------------
The early registration fee, for students and participants from developing
countries, is 1400 SEK including VAT (approx. 140 Euros) per participant,
and includes coffee breaks and conference materials. For all others, the
early registration fee is 2000 SEK including VAT. Late registration is 2800
SEK  for regular fee participants, and 2000 SEK for reduced fee
participants.

Note: 500 SEK fee deduction when registering for CSL2017 at the same time.

The registration fee does not cover accommodation, but there will be
special offers at hostels and hotels (in the range 700 -1200 SEK per night
for single rooms) available.

https://www.math-stockholm.se/en/konferenser-och-akti/logic-
in-stockholm-2/logic-in-stockholm-2017-august-7-25-1.718739

IMPORTANT DATES
--------------------------------------------------------
Main event: August 14-19, 2017
Joint session with CSL2017: August 20, 2017

Abstract deadlines:
Abstract submission for contributed talks:  May 5, 2017
Notification: May 19, 2017

Grant application deadline: May 8, 2017

Early registration deadline: June 9, 2017
Late registration deadline: August 1, 2017
--------------------------------------------------------

GRANTS
------------------------------------
There are possibilities for grants from ASL, NSF, and the Bill Craig
donation. Information can be found at the website of the Logic Colloquium
2017:

https://www.math-stockholm.se/en/konferenser-och-akti/logic-
in-stockholm-2/logic-colloquium-201

PROGRAMME COMMITTEE
-------------------
- Rod Downey (University of Wellington)
- Mirna Dzamonja (PC chair, University of East Anglia)
- Ali Enayat (University of Gothenburg)
- Fernando Ferreira (University of Lisbon)
- Valentin Goranko (Stockholm University)
- Martin Hils (University of MÃ¼nster)
- Sara Negri (University of Helsinki)
- Assaf Rinot (Bar-Ilan University)
- Igor Walukiewicz (University of Bordeaux)

LOCAL ORGANISING COMMITTEE
--------------------
- Stefan Buijsman, Department of Philosophy, Stockholm University
- Mads Dam, Department of Theoretical Computer Science, KTH
- Jacopo Emmenegger, Department of Mathematics, Stockholm University
- Valentin Goranko (OC co-chair), Department of Philosophy, Stockholm
University
- Dilian Gurov, Department of Theoretical Computer Science, KTH
- Sven-Ove Hansson, Department of Philosophy, KTH Royal Institute of
Technology
- Eric Johannesson, Department of Philosophy, Stockholm University
- Vera Koponen, Department of Mathematics, Uppsala University
- Johan Lindberg, Department of Mathematics, Stockholm University
- Roussanka Loukanova, Department of Mathematics, Stockholm University
- Peter LeFanu Lumsdaine, Department of Mathematics, Stockholm University
- Anders Lundstedt, Department of Philosophy, Stockholm University
- Karl Nygren, Department of Philosophy, Stockholm University
- Peter Pagin, Department of Philosophy, Stockholm University
- Erik Palmgren (OC co-chair), Department of Mathematics, Stockholm
University
- Dag WesterstÃ¥hl, Department of Philosophy, Stockholm University

CONTACTS AND ENQUIRIES
--------------------
For enquiries on scientific and programme issues, send email to:
Mirna Dzamonja (M.Dzamonja at uea.ac.uk)
For enquiries on organising matters, send email to:
lc2017 at philosophy.su.se

SPONSORS
-----------------
Association for Symbolic Logic
Stockholm University
The GS Magnusson Foundation
Prover Technology
Stockholm City Hall
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://cs.oswego.edu/pipermail/concurrency-interest/attachments/20170428/45311e16/attachment-0001.html>

