From DaveRuzius@nl.vanderlande.com  Mon Aug  2 13:46:34 2004
From: DaveRuzius@nl.vanderlande.com (Dave Ruzius)
Date: Mon, 2 Aug 2004 14:46:34 +0200
Subject: [concurrency-interest] sample code ?
Message-ID: <OFB82D0D32.60796F88-ONC1256EE4.00462ABA@nl.vanderlande>

Hi,

I'm quite new to concurrency related programming and such but we have found
out that we will need a better solution for what we've build until now
(some XML communication manager supporting up to 200 clients)
Can someone provide some basic samples using java.util.concurrent
illustrating blocking queues and things around Thread pooling ?

Thanx

Dave Ruzius
============================================================================

Disclaimer
This document may include proprietary and confidential information of
Vanderlande Industries and may only be read by those person or persons to
whom it is addressed. This document is forwarded to you in such a form
(E-mail) that Vanderlande Industries cannot guarantee the completeness
and/or correctness of its contents and information. If you have received
this E-mail message in error, please notify us immediately. Please also
delete this document from your computer. This document may not be
reproduced, copied, distributed, published, modified, or furnished to third
parties, without the prior written consent of Vanderlande Industries.
============================================================================

http://www.vanderlande.com

END OF MESSAGE...




From dl@cs.oswego.edu  Thu Aug  5 00:51:30 2004
From: dl@cs.oswego.edu (Doug Lea)
Date: Wed, 4 Aug 2004 19:51:30 -0400
Subject: [concurrency-interest] sample code ?
In-Reply-To: <OFB82D0D32.60796F88-ONC1256EE4.00462ABA@nl.vanderlande>
References: <OFB82D0D32.60796F88-ONC1256EE4.00462ABA@nl.vanderlande>
Message-ID: <16657.30338.290716.192858@altair.cs.oswego.edu>

Please first read through the sample code in the Javadocs.  We tried
to show the one or two most common usages. Other articles and guides
will be coming out over time.  For Executors, take a look at Brian's
new introductory article:

http://www.ftponline.com/javapro/2004_08/online/bgoetz_08_04_04/default.aspx

-Doug

From dl@cs.oswego.edu  Wed Aug 11 14:07:43 2004
From: dl@cs.oswego.edu (Doug Lea)
Date: Wed, 11 Aug 2004 09:07:43 -0400
Subject: [concurrency-interest] package jsr166x, concurrent skip lists
Message-ID: <16666.6687.452361.494282@altair.cs.oswego.edu>

JSR166 is officially just about done. We await only the JCP final
approval vote which will occur immediately before J2SE 5.0 (aka Tiger,
JDK1.5) release, apparently within a month or so.

But, as promised, we are releasing versions of frequently requested
components that did not make it into Tiger. They are for now defined
to be in package jsr166x. Someday these classes, or classes somehow
based on them. might make it into java.util.concurrent via maintenance
JSRs and/or RFEs. Given how these processes work, it will probably be
more than a year before they could make it in though. You can help by
trying them out and suggesting improvements.

As now mentioned at
  http://gee.cs.oswego.edu/dl/concurrency-interest/index.html
you can get this package at:
  API specs: http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166xdocs/
  jar file: http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166x.jar
  Browsable CVS sources: http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166x/ 

The first (and only) classes now in this package are concurrent skip
lists: Main class ConcurrentSkipListMap, and projections/subranges
ConcurrentSkipListSet, ConcurrentSkipListSubMap,
ConcurrentSkipListSubSet.  (Sorry these class names are so long; they
need to be this way to obey java.util naming conventions.)

ConcurrentSkipListMap is a concurrent SortedMap. It bears roughly the
same relation to TreeMap that ConcurrentHashMap does to HashMap: It is
designed primarily for concurrent applications, and to work well on
multiprocessors. It is usually a bit slower than TreeeMap in
single-threaded use, but much, much faster than synchronized TreeMaps
when concurrently updated and accessed by a lot of threads. 

Some details for the curious: Even in single-threaded use, skip lists
can be slightly faster than trees for small maps due to smaller
constant factors, but they are usually slower for large ones --
red-black trees asymptotically use about 1*log2(n) comparisons per
search while skip lists use about 2*log2(n). However, skip lists are
more amenable to efficient concurrent implementation than are balanced
trees.  Internally, ConcurrentSkipListMap uses atomic operations, not
locks, to manage concurrency.  It has a performance profile typical of
most concurrent data structures: Reading (as in method get()) is
fastest, adding/modifying (as in method put()) is reasonably fast, and
deleting (as in method remove()) is slowest, but you are supposed to
be impressed that it is possible at all :-) Also note that if you don't
need sortedness, hash maps are always a faster choice than sorted maps.

The ConcurrentSkipListSet class also implements Queue, and can act as
useful non-blocking priority queue, although one that does not permit
duplicate elements.

These classes have undergone initial testing and review, but haven't
been subjected to use in actual applications. We'd be very very
pleased if you would do this, and report experiences, comments, and
suggestions. And feel free to send in code reviews.

Also, we'd like your advice on an API question. These classes support
a few additional operations not in the SortedMap and ConcurrentMap
APIs, in part stemming from exchanges on this list two months ago. For
example, method ConcurrentSkipListMap.floorEntry(key) returns an entry
with a key less than or equal to given key. These methods don't seem
to have enough in common to make useful public interfaces that the
classes can then claim to implement. (We can't even think of
reasonable names to give any such interfaces!) The down side is that
without interfaces, it will be unpleasant for others to create and use
alternative implementations. Also, even now, the submap/subset
operations return classes that are merely documented to supply the
same methods as base maps/sets, but cannot say they implement the same
interface.  This seems like an OK compromise, but suggestions for
better alternatives would be appreciated.

-Doug

From David.Biesack@sas.com  Wed Aug 11 18:50:28 2004
From: David.Biesack@sas.com (David J. Biesack)
Date: Wed, 11 Aug 2004 13:50:28 -0400 (EDT)
Subject: [concurrency-interest] Re: Concurrency-interest digest, Vol 1 #282 - 1 msg
In-Reply-To: <20040811160001.9299.88624.Mailman@altair.cs.oswego.edu>
 (concurrency-interest-request@cs.oswego.edu)
References: <20040811160001.9299.88624.Mailman@altair.cs.oswego.edu>
Message-ID: <200408111750.i7BHoSI28720@mozart.unx.sas.com>

> Date: Wed, 11 Aug 2004 12:00:01 -0400
> From: concurrency-interest-request@cs.oswego.edu
> 
> Also, we'd like your advice on an API question. These classes support
> a few additional operations not in the SortedMap and ConcurrentMap
> APIs, in part stemming from exchanges on this list two months ago. For
> example, method ConcurrentSkipListMap.floorEntry(key) returns an entry
> with a key less than or equal to given key. These methods don't seem
> to have enough in common to make useful public interfaces that the
> classes can then claim to implement. (We can't even think of
> reasonable names to give any such interfaces!) The down side is that
> without interfaces, it will be unpleasant for others to create and use
> alternative implementations. Also, even now, the submap/subset
> operations return classes that are merely documented to supply the
> same methods as base maps/sets, but cannot say they implement the same
> interface.  This seems like an OK compromise, but suggestions for
> better alternatives would be appreciated.

I suggest that if possible, implementations of subset/submap operations
return interfaces, allowing the implementation to return instances of a
private class, just as List.sublist does. That saves having to document
two additional classes for jsr166x. (It always pains me to see a method
return a concrete class.) Of course, the tradeoff is you have to
document two new interfaces, but combined with the reasons you cite, I
think it is worth it. For example. if you deem it necessary to add
SkipListMap<K,V> Collections.unmodifiableConcurrentSkipListMap(...) ...

Are the SubSet and SubMap classes intended to support subclassing? What
reasons, other than the API return type, exist for them to be public?
If the classes must be public, Can they be final?

> -Doug

-- 
David J. Biesack     SAS Institute Inc.
R&D Java Strategist  SAS Campus Drive Cary, NC 27513
(919) 531-7771       http://www.sas.com


From kav@it.edu  Sun Aug 22 15:28:14 2004
From: kav@it.edu (Kasper Nielsen)
Date: Sun, 22 Aug 2004 16:28:14 +0200
Subject: [concurrency-interest] Asynchronous I/O
Message-ID: <4128AD7E.1020009@it.edu>

Hi,

Although not directly related to JSR166 I thought somebody on this list 
might be interested in it. Coconut AIO is a small asynchronous I/O 
library available at coconut.codehaus.org. The API 
(http://coconut.codehaus.org/sites/coconut-aio-api/apidocs/index.html) 
is designed in such a way that it "fits" nicely into 
java.util.concurrent. Some of the features are:

* Support for asynchronous server-socket, socket and datagram I/O 
(limited file support for now). Right now it is wrapping java.nio 
implemented as active objects.

* 3 completion notification programming styles. Future-style, Callback 
style and completion-queue (events posted onto a queue)

* JXM enabled, bytes read/written, sockets accepted, ...

* Fine grained monitoring, for example, you can dynamically specify 
callbacks that are called whenever a socket read, writes, connects, 
binds, closes, … I've used that, for example, for implementing a 
primitive debugging mechanism (sample output from logs):
   Socket[83] Connected to localhost/127.0.0.1:12338 from /127.0.0.1:1066
   Socket[83] Wrote 20 bytes to localhost/127.0.0.1:12338
   Socket[83] position 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
------text------
   Socket[83] 00000000 48 65 6C 6C 6F 48 65 6C 6C 6F 48 65 6C 6C 6F 48 
HelloHelloHelloH
   Socket[83] 00000010 65 6C 6C 6F                                     ello
   Socket[83] Closed


* SocketGroups and DatagramGroups are a way of "bundling" together a 
number of related sockets or datagram sockets. Consider, for example, an 
P2P application where we have a number of outgoing sockets and a number 
of incoming sockets. Many P2P applications are characterized with a high 
churn (the continuous process of node arrival and departure) and new 
connections must be established frequently. These applications might 
have a connection policy, for example, that no more (and no less) then 
100 outgoing connections must be active at the same time.
class 100ConnectionPolicy implements Handler<AsyncSocket socket> {
   AsyncSocketGroup group;
   void handle(AsyncSocket socket) {
     if (group.size() < 100 ) {
        AsyncSocket socket = AsyncSocket.open();
        socket.setGroup(group);
        socket.connect(some remote host);
     }
   }
}
This callback is called by the runtime whenever a socket leaves the 
group (normally by calling close() or due to some exception). Later on I 
hope to use to use these groups for bandwidth restraining or for 
prioritizing requests from certain connections over others.


Anyway take a look Coconut AIO at coconut.codehaus.org if you are 
interested (just ignore the other stuff on the site). Until now the 
primary focus has been on the API. But I hope to spend some more time on 
optimizations and eventually bugs that should show up. The manual is 
under development but take a look at some of the unit test which 
displays most of the functionality or just try the mailing list.

- Kasper


From dl@cs.oswego.edu  Sun Aug 29 15:39:24 2004
From: dl@cs.oswego.edu (Doug Lea)
Date: Sun, 29 Aug 2004 10:39:24 -0400
Subject: [concurrency-interest] ConcurrentLinkedList or ConcurrentLinkedDeque?
Message-ID: <16689.60060.542656.219974@altair.cs.oswego.edu>

We're still mulling over some of the interface and API issues raised
for jsr166x.ConcurrentSkipListMap etc. (Thanks to those offering
suggestions!)

On to the second-most-requested concurrent data structure that didn't
make Tiger (so will live for a long while in package jsr166x): A
linked concurrent list/queue-like collection that efficiently supports
operations at both the beginning and end, so can serve as any of a
LIFO queue, FIFO stack, or Deque mixture, as well as supporting the
standard Collection interface.  This also raises a bunch of API issues
that we'd like feedback about.

The main question is whether this class should support the full
java.util.List interface.
  http://java.sun.com/j2se/1.5.0/docs/api/java/util/List.html

The best argument in favor of this is that the List interface is
familiar and well-used by programmers, and it would be nice to allow
people to replace usages of "Collections.synchronizedList(new
LinkedList())" with "new ConcurrentLinkedList()".  (Recall that the
idea of concurrent as opposed to synchronized collections is that
concurrent ones safely allow, and cannot even prevent, truly
concurrent reads and writes across multiple threads, typically
providing much better scalability.)

However, there are three aspects of functionality in the List API that
are supportable but arguably could do more harm than good to provide
in a concurrent implementation:

1. The use of index-based List operations (get(index), set(index,
element), indexOf(element), etc) in concurrently modifiable lists is
almost always a bad idea, since the relative positions/indices of
elements can change asynchronously, so common idioms like
"list.set(list.indexOf(A), B)" don't work reliably.  Also, like
LinkedList, this class has to traverse/count elements to find the one
at a requested index, so these operations are at slow (even a bit
slower than LinkedList), and fit for use only in small lists, but this
would be OK in itself.

2. The use of sublists (as in list.sublist(3, 17).get(2)) can be
doubly surprising/problematic because two sets of positions/indices
can asynchronously vary. Plus this is very slow to correctly support
since bounds need to be verified/adjusted on each call to any method
of a sublist.

3. Weakly consistent ListIterators would break an implicit assumption
probably held by most code using bidirectional iteration: that next()
and previous() are symmetric. But in a concurrent version, for example:
   it.next(); 
   it.previous();
does NOT necessarily get you back to the same position you started at
when there are asynchronous concurrent list modifications. People
using generic List code probably won't get the expected results when
there are concurrent modifications, which means they will get
rarely-triggering bugs.  And there are related error-seekingness and
inefficiency problems with the ListIterator.nextIndex() method and
others.  (None of these issues arise with weakly consistent
unidirectional Iterators (as opposed to ListIterators) where you can't
revisit elements.)

So, indexed operations, sublists, and ListIterators all CAN be
supported, but (1) Each behaves in ways that seem likely to lead to
hard-to-debug programming errors by users of the class; and (2) Each
is inefficient compared to other List classes (even less efficient
than LinkedList).

Should they be supported anyway?

At the moment, I'm leaning against this. In which case, there are
still some other API and functionality issues:

1. Not supporting List means that there is no longer any required
method to replace/set the value of an arbitrary element.
(List.set(index, value) and ListIterator.set(value) do this.)  Should
this be supported? The Queue API doesn't provide any way to set
values, but Deques might more often be used in ways that could benefit
from methods like:
  boolean replaceFirstOccurrence(oldValue, newValue)
  boolean replaceLastOccurrence(oldValue, newValue)
  int replaceAllOccurrences(oldValue, newValue)

  (Aside: It would be a bad idea to support methods
  replaceFirst(value) and/or replaceLast(value) because if
  firsts/lasts were concurrently added or removed, you'd replace an
  element other than the one you had in mind.)

2. For convenience, LinkedList implements interface Queue by
interpreting Queue operations as FIFO, even though it, too, allows
double-ended access. Should this class do this as well?

3. Alternatively, or in addition to (2), should there be a Deque
interface, along the lines of:
  interface Deque<E> extends Collection<E> {
     boolean offerFirst(E o);
     boolean offerLast(E o);
     boolean addFirst(E o);
     boolean addLast(E o);
     E peekFirst();
     E peekLast(); 
     E getFirst() throws NoSuchElementException; 
     E getLast() throws NoSuchElementException;  
     E pollFirst(); 
     E pollLast();
     E removeFirst() throws NoSuchElementException;
     E removeLast() throws NoSuchElementException;

     // And probably the above replace methods?
  }

Notes:
  * It is too late for now to retrospectively make
    java.util.LinkedList conform to this even though it
    already supports nearly all of these mothods, and the others
    (like peekFirst) would be trivial to add.

  * Recall the difference between "offer" and "add": Queue.offer is
    allowed to return false for any reason. usually capacity
    constraints. Collection.add is allowed to return false only to
    indicate that the given element cannot be added, usually used in
    Sets when the given element is a duplicate. In this and most
    classes, they would both map to the same function, but in, say, a
    capacity-contrained Deque disallowing duplicate elements, they
    could differ. (Not that such a class is likely to ever be written,
    but we might as well propgate this convention.)

Thanks for any suggestions, comments, or advice!

-Doug

From dl@cs.oswego.edu  Sun Aug 29 15:58:05 2004
From: dl@cs.oswego.edu (Doug Lea)
Date: Sun, 29 Aug 2004 10:58:05 -0400
Subject: [concurrency-interest] Asynchronous I/O
In-Reply-To: <4128AD7E.1020009@it.edu>
References: <4128AD7E.1020009@it.edu>
Message-ID: <16689.61181.146275.664303@altair.cs.oswego.edu>

Hi Kaspar,

(Catching up after being out for a while.)

It's great to see the Coconut AIO package, not only because it looks
(on first glance anyway :-) useful and well designed and a nice fit
with java.util.concurrent, but also because I think JSR203 is due to
be resurrected someday (I have no idea when) for JDK 1.6/6.0.

See http://www.jcp.org/en/jsr/detail?id=203 where it lists as the
second deliverable:

    2. An API for asynchronous (as opposed to polled, non-blocking)
       I/O operations on both sockets and files; 

JSR203 was triaged out of Tiger, which was probably a good thing,
because I don't think there would have been enough time to try out the
various ways to make this mesh with JSR166 and to develop enough usage
experience with them to standardize on a particular API.  I hope you
are happy having Coconut serve as a potential testing ground (as
dl.util.concurrent did for java.util.concurrent).  Developing and most
importantly using Coconut-AIO will allow everyone to learn what works
well, what parts belong in a standard, and so on. So, I'd like
to encourage others on this list to try it out!

-Doug

From gregg.wonderly@pobox.com  Sun Aug 29 22:11:11 2004
From: gregg.wonderly@pobox.com (Gregg G. Wonderly)
Date: Sun, 29 Aug 2004 16:11:11 -0500
Subject: [concurrency-interest] ConcurrentLinkedList or
 ConcurrentLinkedDeque?
In-Reply-To: Your message of Sun, 29 Aug 2004 10:39:24 -0400.
 <16689.60060.542656.219974@altair.cs.oswego.edu>
Message-ID: <31534.1093813871@skymaster.cytetech.com>

>On to the second-most-requested concurrent data structure that didn't
>make Tiger (so will live for a long while in package jsr166x): A
>linked concurrent list/queue-like collection that efficiently supports
>operations at both the beginning and end, so can serve as any of a
>LIFO queue, FIFO stack, or Deque mixture, as well as supporting the
>standard Collection interface.  This also raises a bunch of API issues
>that we'd like feedback about.

>Notes:
>  * It is too late for now to retrospectively make
>    java.util.LinkedList conform to this even though it
>    already supports nearly all of these mothods, and the others
>    (like peekFirst) would be trivial to add.
>
>  * Recall the difference between "offer" and "add": Queue.offer is
>    allowed to return false for any reason. usually capacity
>    constraints. Collection.add is allowed to return false only to
>    indicate that the given element cannot be added, usually used in
>    Sets when the given element is a duplicate. In this and most
>    classes, they would both map to the same function, but in, say, a
>    capacity-contrained Deque disallowing duplicate elements, they
>    could differ. (Not that such a class is likely to ever be written,
>    but we might as well propgate this convention.)

I consider the work being done here on concurrent collections to be very much 
in line with the work done, and being considered for Javaspaces.  There are 
only so many operations that can make sense, and be predictable when you 
consider concurrency as fact, rather than a hazard of collection design.  I 
hope that there can be some investigations from both sides into what each has 
experienced to help drive towards a more common theme of 
distributed/concurrent collections.

Doug, do you subscribe to the javaspaces-users mailing list, or the jini-users 
mailing list?

-----
gregg@cytetech.com  (Cyte Technologies Inc)



From kav@it.edu  Tue Aug 31 23:07:40 2004
From: kav@it.edu (Kasper Nielsen)
Date: Wed, 01 Sep 2004 00:07:40 +0200
Subject: [concurrency-interest] Asynchronous I/O
In-Reply-To: <16689.61181.146275.664303@altair.cs.oswego.edu>
References: <4128AD7E.1020009@it.edu> <16689.61181.146275.664303@altair.cs.oswego.edu>
Message-ID: <4134F6AC.8010002@it.edu>

Doug Lea wrote:
> Hi Kaspar,
> 
> (Catching up after being out for a while.)
> 
> It's great to see the Coconut AIO package, not only because it looks
> (on first glance anyway :-) useful and well designed and a nice fit
> with java.util.concurrent, but also because I think JSR203 is due to
> be resurrected someday (I have no idea when) for JDK 1.6/6.0.
> 
> See http://www.jcp.org/en/jsr/detail?id=203 where it lists as the
> second deliverable:
> 
>     2. An API for asynchronous (as opposed to polled, non-blocking)
>        I/O operations on both sockets and files; 
> 
> JSR203 was triaged out of Tiger, which was probably a good thing,
> because I don't think there would have been enough time to try out the
> various ways to make this mesh with JSR166 and to develop enough usage
> experience with them to standardize on a particular API.  I hope you
> are happy having Coconut serve as a potential testing ground (as
> dl.util.concurrent did for java.util.concurrent). Sure, this was actually the plan from the beginning. I've tried to
create the API as flexible as possible to allow people to experiment
with different asynchronous models. One way, for example, that I've used
is to have a single Executor (for an application) with around 3-5
threads (per processor).
   But first, I just need to quickly explain how callbacks are handled
in Coconut AIO. The idea is to pass along both a Callback and an
Executor to an asynchronous method. When the computation finishes the
asynchronous method wraps the Callback inside a Runnable and submits it
to the provided Executor.
   One of the benefits of using a classic (one single thread)
event-driven architecture is that there is no need to worry about
concurrency control. Obvious this is a very appealing reason for using
this kind of architecture, however, dual-core and multi-cpu are common
nowadays. Instead I've used another approach where each Callback is
explicitly given a specific Color:
public interface Colored {
   int getColor();
}
Callbacks with different colors are allowed to be executed in parallel.
callbacks with the same color must be executed one at a time. A special
Executor (http://tinyurl.com/3kltr) is then used for serializing
the execution of these Callbacks in such a way that no Callbacks
with the same color is executed concurrently. The original 3-5 thread
per processor Executor is then wrapped inside the special Executor.
Letting the special Executor delagate the actual execution of the
Callback to original Executor.
   Of course this approach can't be used in every application because it
requires someway of splitting the application data into course grain
objects each having a separate color.  This "coloring" technique is
somewhat similar to what is used in libasync-smp.

The NIO "emulation" layer itself is actually pretty stable having around
250 testcases. Im currently working on implementing asynchronous file
I/O but also on a small visualization application that uses jmx
information to show the connectivity between different peers in real
time (as a graph). Each vertex in the graph is a peer and the thickness
of the edges represents the relative amount of data that has been
transmitted or the average throughput.

- Kasper



